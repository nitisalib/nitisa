// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 14:48:41

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormMain.h:
//         #include "IFormMain.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace app
//             {
//                 class CFormMain : public IFormMain // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormMain(); // Declare constructor
//                 };
//             }
//         }
//
//     FormMain.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormMain.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace app
//             {
//                 CFormMain::CFormMain(): // Implement constructor of your form
//                     IFormMain(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormMain::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/CursorType.h"
#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Image/Color.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Components/ColorDialog/ColorDialog.h"
#include "Standard/Controls/CheckBox/CheckBox.h"
#include "Standard/Controls/DropDown/CustomDropDown.h"
#include "Standard/Controls/DropDown/DropDown.h"
#include "Standard/Controls/Edit/Edit.h"
#include "Standard/Controls/GroupBox/GroupBox.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/Panel/Panel.h"
#include "Standard/Controls/UpDown/UpDown.h"
#include "Standard/ListItems/Label/ListItemLabel.h"

namespace nitisa
{
	class IControl;

	namespace standard
	{
		class IEdit;
	}

	class IForm;
	class IRenderer;

	namespace standard
	{
		class IUpDown;
	}

	class IWindow;
	struct CreateParams;

	namespace app
	{
		class IFormMain : public CForm
		{
		protected:
			// Components
			standard::CColorDialog *m_pColorDialog;

			// Controls
			standard::CGroupBox *m_pGroupBox1;
			standard::CLabel *m_pLabel1;
			standard::CDropDown *m_pDropDownName;
			standard::CLabel *m_pLabel2;
			standard::CEdit *m_pEditHeight;
			standard::CUpDown *m_pUpDownHeight;
			standard::CLabel *m_pLabel3;
			standard::CDropDown *m_pDropDownWeight;
			standard::CLabel *m_pLabel4;
			standard::CEdit *m_pEditDistance;
			standard::CUpDown *m_pUpDownDistance;
			standard::CLabel *m_pLabel5;
			standard::CPanel *m_pPanelColor;
			standard::CLabel *m_pLabel6;
			standard::CPanel *m_pPanelShadowColor;
			standard::CLabel *m_pLabel7;
			standard::CEdit *m_pEditShadowShiftX;
			standard::CUpDown *m_pUpDownShadowShiftX;
			standard::CLabel *m_pLabel8;
			standard::CEdit *m_pEditShadowShiftY;
			standard::CUpDown *m_pUpDownShadowShiftY;
			standard::CLabel *m_pLabel9;
			standard::CEdit *m_pEditShadowRadius;
			standard::CUpDown *m_pUpDownShadowRadius;
			standard::CCheckBox *m_pCheckBoxItalic;
			standard::CCheckBox *m_pCheckBoxUnderline;
			standard::CCheckBox *m_pCheckBoxStrikeOut;
			standard::CCheckBox *m_pCheckBoxMonospace;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormMain_OnPaint(IForm *sender, const MessagePaint &m, bool &draw_children) = 0;
			virtual void DropDownName_OnSelect(IControl *sender, const int index) = 0;
			virtual void UpDownHeight_OnChange(standard::IUpDown *sender) = 0;
			virtual void DropDownWeight_OnSelect(IControl *sender, const int index) = 0;
			virtual void UpDownDistance_OnChange(standard::IUpDown *sender) = 0;
			virtual void PanelColor_OnLeftMouseButtonUp(IControl *sender, const MessageMouse &m, bool &processed) = 0;
			virtual void PanelShadowColor_OnLeftMouseButtonUp(IControl *sender, const MessageMouse &m, bool &processed) = 0;
			virtual void UpDownShadowShiftX_OnChange(standard::IUpDown *sender) = 0;
			virtual void UpDownShadowShiftY_OnChange(standard::IUpDown *sender) = 0;
			virtual void UpDownShadowRadius_OnChange(standard::IUpDown *sender) = 0;
			virtual void CheckBoxItalic_OnChange(IControl *sender) = 0;
			virtual void CheckBoxUnderline_OnChange(IControl *sender) = 0;
			virtual void CheckBoxStrikeOut_OnChange(IControl *sender) = 0;
			virtual void CheckBoxMonospace_OnChange(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create components
				m_pColorDialog = new standard::CColorDialog(this);
				m_pColorDialog->setName(L"ColorDialog");

				// Create controls
				m_pGroupBox1 = new standard::CGroupBox(this);
				m_pGroupBox1->setName(L"GroupBox1");
				m_pLabel1 = new standard::CLabel(m_pGroupBox1);
				m_pLabel1->setName(L"Label1");
				m_pDropDownName = new standard::CDropDown(m_pGroupBox1);
				m_pDropDownName->setName(L"DropDownName");
				m_pLabel2 = new standard::CLabel(m_pGroupBox1);
				m_pLabel2->setName(L"Label2");
				m_pEditHeight = new standard::CEdit(m_pGroupBox1);
				m_pEditHeight->setName(L"EditHeight");
				m_pUpDownHeight = new standard::CUpDown(m_pGroupBox1);
				m_pUpDownHeight->setName(L"UpDownHeight");
				m_pLabel3 = new standard::CLabel(m_pGroupBox1);
				m_pLabel3->setName(L"Label3");
				m_pDropDownWeight = new standard::CDropDown(m_pGroupBox1);
				m_pDropDownWeight->setName(L"DropDownWeight");
				m_pLabel4 = new standard::CLabel(m_pGroupBox1);
				m_pLabel4->setName(L"Label4");
				m_pEditDistance = new standard::CEdit(m_pGroupBox1);
				m_pEditDistance->setName(L"EditDistance");
				m_pUpDownDistance = new standard::CUpDown(m_pGroupBox1);
				m_pUpDownDistance->setName(L"UpDownDistance");
				m_pLabel5 = new standard::CLabel(m_pGroupBox1);
				m_pLabel5->setName(L"Label5");
				m_pPanelColor = new standard::CPanel(m_pGroupBox1);
				m_pPanelColor->setName(L"PanelColor");
				m_pLabel6 = new standard::CLabel(m_pGroupBox1);
				m_pLabel6->setName(L"Label6");
				m_pPanelShadowColor = new standard::CPanel(m_pGroupBox1);
				m_pPanelShadowColor->setName(L"PanelShadowColor");
				m_pLabel7 = new standard::CLabel(m_pGroupBox1);
				m_pLabel7->setName(L"Label7");
				m_pEditShadowShiftX = new standard::CEdit(m_pGroupBox1);
				m_pEditShadowShiftX->setName(L"EditShadowShiftX");
				m_pUpDownShadowShiftX = new standard::CUpDown(m_pGroupBox1);
				m_pUpDownShadowShiftX->setName(L"UpDownShadowShiftX");
				m_pLabel8 = new standard::CLabel(m_pGroupBox1);
				m_pLabel8->setName(L"Label8");
				m_pEditShadowShiftY = new standard::CEdit(m_pGroupBox1);
				m_pEditShadowShiftY->setName(L"EditShadowShiftY");
				m_pUpDownShadowShiftY = new standard::CUpDown(m_pGroupBox1);
				m_pUpDownShadowShiftY->setName(L"UpDownShadowShiftY");
				m_pLabel9 = new standard::CLabel(m_pGroupBox1);
				m_pLabel9->setName(L"Label9");
				m_pEditShadowRadius = new standard::CEdit(m_pGroupBox1);
				m_pEditShadowRadius->setName(L"EditShadowRadius");
				m_pUpDownShadowRadius = new standard::CUpDown(m_pGroupBox1);
				m_pUpDownShadowRadius->setName(L"UpDownShadowRadius");
				m_pCheckBoxItalic = new standard::CCheckBox(m_pGroupBox1);
				m_pCheckBoxItalic->setName(L"CheckBoxItalic");
				m_pCheckBoxUnderline = new standard::CCheckBox(m_pGroupBox1);
				m_pCheckBoxUnderline->setName(L"CheckBoxUnderline");
				m_pCheckBoxStrikeOut = new standard::CCheckBox(m_pGroupBox1);
				m_pCheckBoxStrikeOut->setName(L"CheckBoxStrikeOut");
				m_pCheckBoxMonospace = new standard::CCheckBox(m_pGroupBox1);
				m_pCheckBoxMonospace->setName(L"CheckBoxMonospace");

				// Initialize components
				m_pColorDialog->setName(L"ColorDialog");

				// Initialize controls
				m_pGroupBox1->setName(L"GroupBox1");
				m_pGroupBox1->getTransform()->Translate(435.0f, 0.0f, 0.0f);
				m_pGroupBox1->setSize(PointF{ 205.0f, 480.0f });
				m_pGroupBox1->setUseParentFont(false);
				m_pGroupBox1->setAlign(Align::Right);
				m_pGroupBox1->setCaption(UTF8ToString("Properties"));
				m_pGroupBox1->setUseMask(false);

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(10.0f, 19.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("Name:"));

				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setActive(true);
					item->setCaption(UTF8ToString("Tahoma"));
					m_pDropDownName->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setCaption(UTF8ToString("Times New Roman"));
					m_pDropDownName->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setCaption(UTF8ToString("Courier New"));
					m_pDropDownName->AddItem(item);
				}
				m_pDropDownName->setName(L"DropDownName");
				m_pDropDownName->getTransform()->Translate(90.0f, 15.0f, 0.0f);
				m_pDropDownName->setSize(PointF{ 107.0f, 21.0f });
				m_pDropDownName->setTabOrder(2);
				m_pDropDownName->setText(UTF8ToString("Tahoma"));
				m_pDropDownName->setEditable(false);
				m_pDropDownName->setActiveIndex(0);
				m_pDropDownName->OnSelect = [](IControl *sender, const int index)->void { cast<IFormMain*>(sender->getForm())->DropDownName_OnSelect(sender, index); };

				m_pLabel2->setName(L"Label2");
				m_pLabel2->getTransform()->Translate(10.0f, 49.0f, 0.0f);
				m_pLabel2->setCaption(UTF8ToString("Height:"));

				m_pEditHeight->setName(L"EditHeight");
				m_pEditHeight->getTransform()->Translate(90.0f, 45.0f, 0.0f);
				m_pEditHeight->setSize(PointF{ 90.0f, 21.0f });
				m_pEditHeight->setTabOrder(4);
				m_pEditHeight->setText(UTF8ToString("-11"));

				m_pUpDownHeight->setName(L"UpDownHeight");
				m_pUpDownHeight->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownHeight->setMin(-100);
				m_pUpDownHeight->setValue(-11);
				m_pUpDownHeight->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditHeight")));
				m_pUpDownHeight->getTransform()->Translate(180.0f, 45.0f, 0.0f);
				m_pUpDownHeight->OnChange = [](standard::IUpDown *sender)->void { cast<IFormMain*>(sender->getForm())->UpDownHeight_OnChange(sender); };

				m_pLabel3->setName(L"Label3");
				m_pLabel3->getTransform()->Translate(10.0f, 79.0f, 0.0f);
				m_pLabel3->setCaption(UTF8ToString("Weight:"));

				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setCaption(UTF8ToString("Thin"));
					m_pDropDownWeight->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setCaption(UTF8ToString("Extra light"));
					m_pDropDownWeight->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setCaption(UTF8ToString("Light"));
					m_pDropDownWeight->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setActive(true);
					item->setCaption(UTF8ToString("Normal"));
					m_pDropDownWeight->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setCaption(UTF8ToString("Medium"));
					m_pDropDownWeight->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setCaption(UTF8ToString("Semi bold"));
					m_pDropDownWeight->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setCaption(UTF8ToString("Bold"));
					m_pDropDownWeight->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setCaption(UTF8ToString("Extra bold"));
					m_pDropDownWeight->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setCaption(UTF8ToString("Heavy"));
					m_pDropDownWeight->AddItem(item);
				}
				m_pDropDownWeight->setName(L"DropDownWeight");
				m_pDropDownWeight->getTransform()->Translate(90.0f, 75.0f, 0.0f);
				m_pDropDownWeight->setSize(PointF{ 107.0f, 21.0f });
				m_pDropDownWeight->setTabOrder(7);
				m_pDropDownWeight->setText(UTF8ToString("Normal"));
				m_pDropDownWeight->setEditable(false);
				m_pDropDownWeight->setActiveIndex(3);
				m_pDropDownWeight->OnSelect = [](IControl *sender, const int index)->void { cast<IFormMain*>(sender->getForm())->DropDownWeight_OnSelect(sender, index); };

				m_pLabel4->setName(L"Label4");
				m_pLabel4->getTransform()->Translate(10.0f, 109.0f, 0.0f);
				m_pLabel4->setCaption(UTF8ToString("Distance:"));

				m_pEditDistance->setName(L"EditDistance");
				m_pEditDistance->getTransform()->Translate(90.0f, 105.0f, 0.0f);
				m_pEditDistance->setSize(PointF{ 90.0f, 21.0f });
				m_pEditDistance->setTabOrder(9);
				m_pEditDistance->setText(UTF8ToString("0"));

				m_pUpDownDistance->setName(L"UpDownDistance");
				m_pUpDownDistance->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownDistance->setMin(-100);
				m_pUpDownDistance->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditDistance")));
				m_pUpDownDistance->getTransform()->Translate(180.0f, 105.0f, 0.0f);
				m_pUpDownDistance->OnChange = [](standard::IUpDown *sender)->void { cast<IFormMain*>(sender->getForm())->UpDownDistance_OnChange(sender); };

				m_pLabel5->setName(L"Label5");
				m_pLabel5->getTransform()->Translate(10.0f, 139.0f, 0.0f);
				m_pLabel5->setCaption(UTF8ToString("Color:"));

				m_pPanelColor->setName(L"PanelColor");
				m_pPanelColor->getTransform()->Translate(90.0f, 135.0f, 0.0f);
				m_pPanelColor->setSize(PointF{ 107.0f, 25.0f });
				m_pPanelColor->setCursor(CursorType::Hand);
				m_pPanelColor->setCaption(UTF8ToString(""));
				m_pPanelColor->setBackgroundColor(Color{ 0, 0, 0, 255 });
				m_pPanelColor->OnLeftMouseButtonUp = [](IControl *sender, const MessageMouse &m, bool &processed)->void { cast<IFormMain*>(sender->getForm())->PanelColor_OnLeftMouseButtonUp(sender, m, processed); };

				m_pLabel6->setName(L"Label6");
				m_pLabel6->getTransform()->Translate(10.0f, 171.0f, 0.0f);
				m_pLabel6->setCaption(UTF8ToString("Shadow color:"));

				m_pPanelShadowColor->setName(L"PanelShadowColor");
				m_pPanelShadowColor->getTransform()->Translate(90.0f, 165.0f, 0.0f);
				m_pPanelShadowColor->setSize(PointF{ 107.0f, 25.0f });
				m_pPanelShadowColor->setCursor(CursorType::Hand);
				m_pPanelShadowColor->setCaption(UTF8ToString(""));
				m_pPanelShadowColor->setBackgroundColor(Color{ 0, 0, 0, 0 });
				m_pPanelShadowColor->OnLeftMouseButtonUp = [](IControl *sender, const MessageMouse &m, bool &processed)->void { cast<IFormMain*>(sender->getForm())->PanelShadowColor_OnLeftMouseButtonUp(sender, m, processed); };

				m_pLabel7->setName(L"Label7");
				m_pLabel7->getTransform()->Translate(10.0f, 201.0f, 0.0f);
				m_pLabel7->setCaption(UTF8ToString("Shadow X shift:"));

				m_pEditShadowShiftX->setName(L"EditShadowShiftX");
				m_pEditShadowShiftX->getTransform()->Translate(90.0f, 195.0f, 0.0f);
				m_pEditShadowShiftX->setSize(PointF{ 90.0f, 21.0f });
				m_pEditShadowShiftX->setTabOrder(16);
				m_pEditShadowShiftX->setText(UTF8ToString("0"));

				m_pUpDownShadowShiftX->setName(L"UpDownShadowShiftX");
				m_pUpDownShadowShiftX->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownShadowShiftX->setMin(-100);
				m_pUpDownShadowShiftX->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditShadowShiftX")));
				m_pUpDownShadowShiftX->getTransform()->Translate(180.0f, 195.0f, 0.0f);
				m_pUpDownShadowShiftX->OnChange = [](standard::IUpDown *sender)->void { cast<IFormMain*>(sender->getForm())->UpDownShadowShiftX_OnChange(sender); };

				m_pLabel8->setName(L"Label8");
				m_pLabel8->getTransform()->Translate(10.0f, 231.0f, 0.0f);
				m_pLabel8->setCaption(UTF8ToString("Shadow Y shift:"));

				m_pEditShadowShiftY->setName(L"EditShadowShiftY");
				m_pEditShadowShiftY->getTransform()->Translate(90.0f, 225.0f, 0.0f);
				m_pEditShadowShiftY->setSize(PointF{ 90.0f, 21.0f });
				m_pEditShadowShiftY->setTabOrder(19);
				m_pEditShadowShiftY->setText(UTF8ToString("0"));

				m_pUpDownShadowShiftY->setName(L"UpDownShadowShiftY");
				m_pUpDownShadowShiftY->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownShadowShiftY->setMin(-100);
				m_pUpDownShadowShiftY->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditShadowShiftY")));
				m_pUpDownShadowShiftY->getTransform()->Translate(180.0f, 225.0f, 0.0f);
				m_pUpDownShadowShiftY->OnChange = [](standard::IUpDown *sender)->void { cast<IFormMain*>(sender->getForm())->UpDownShadowShiftY_OnChange(sender); };

				m_pLabel9->setName(L"Label9");
				m_pLabel9->getTransform()->Translate(10.0f, 259.0f, 0.0f);
				m_pLabel9->setCaption(UTF8ToString("Shadow radius:"));

				m_pEditShadowRadius->setName(L"EditShadowRadius");
				m_pEditShadowRadius->getTransform()->Translate(90.0f, 255.0f, 0.0f);
				m_pEditShadowRadius->setSize(PointF{ 90.0f, 21.0f });
				m_pEditShadowRadius->setTabOrder(22);
				m_pEditShadowRadius->setText(UTF8ToString("1"));

				m_pUpDownShadowRadius->setName(L"UpDownShadowRadius");
				m_pUpDownShadowRadius->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownShadowRadius->setMin(1);
				m_pUpDownShadowRadius->setValue(1);
				m_pUpDownShadowRadius->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditShadowRadius")));
				m_pUpDownShadowRadius->getTransform()->Translate(180.0f, 255.0f, 0.0f);
				m_pUpDownShadowRadius->OnChange = [](standard::IUpDown *sender)->void { cast<IFormMain*>(sender->getForm())->UpDownShadowRadius_OnChange(sender); };

				m_pCheckBoxItalic->setName(L"CheckBoxItalic");
				m_pCheckBoxItalic->getTransform()->Translate(10.0f, 285.0f, 0.0f);
				m_pCheckBoxItalic->setTabOrder(24);
				m_pCheckBoxItalic->setCaption(UTF8ToString("Italic"));
				m_pCheckBoxItalic->OnChange = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->CheckBoxItalic_OnChange(sender); };

				m_pCheckBoxUnderline->setName(L"CheckBoxUnderline");
				m_pCheckBoxUnderline->getTransform()->Translate(10.0f, 305.0f, 0.0f);
				m_pCheckBoxUnderline->setTabOrder(25);
				m_pCheckBoxUnderline->setCaption(UTF8ToString("Underline"));
				m_pCheckBoxUnderline->OnChange = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->CheckBoxUnderline_OnChange(sender); };

				m_pCheckBoxStrikeOut->setName(L"CheckBoxStrikeOut");
				m_pCheckBoxStrikeOut->getTransform()->Translate(10.0f, 325.0f, 0.0f);
				m_pCheckBoxStrikeOut->setTabOrder(26);
				m_pCheckBoxStrikeOut->setCaption(UTF8ToString("Strikeout"));
				m_pCheckBoxStrikeOut->OnChange = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->CheckBoxStrikeOut_OnChange(sender); };

				m_pCheckBoxMonospace->setName(L"CheckBoxMonospace");
				m_pCheckBoxMonospace->getTransform()->Translate(10.0f, 345.0f, 0.0f);
				m_pCheckBoxMonospace->setTabOrder(27);
				m_pCheckBoxMonospace->setCaption(UTF8ToString("Monospace"));
				m_pCheckBoxMonospace->OnChange = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->CheckBoxMonospace_OnChange(sender); };


			}

		public:
			IFormMain(IWindow *window, IRenderer *renderer, const String &class_name = L"FormMain", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pColorDialog{ nullptr },
				m_pGroupBox1{ nullptr },
				m_pLabel1{ nullptr },
				m_pDropDownName{ nullptr },
				m_pLabel2{ nullptr },
				m_pEditHeight{ nullptr },
				m_pUpDownHeight{ nullptr },
				m_pLabel3{ nullptr },
				m_pDropDownWeight{ nullptr },
				m_pLabel4{ nullptr },
				m_pEditDistance{ nullptr },
				m_pUpDownDistance{ nullptr },
				m_pLabel5{ nullptr },
				m_pPanelColor{ nullptr },
				m_pLabel6{ nullptr },
				m_pPanelShadowColor{ nullptr },
				m_pLabel7{ nullptr },
				m_pEditShadowShiftX{ nullptr },
				m_pUpDownShadowShiftX{ nullptr },
				m_pLabel8{ nullptr },
				m_pEditShadowShiftY{ nullptr },
				m_pUpDownShadowShiftY{ nullptr },
				m_pLabel9{ nullptr },
				m_pEditShadowRadius{ nullptr },
				m_pUpDownShadowRadius{ nullptr },
				m_pCheckBoxItalic{ nullptr },
				m_pCheckBoxUnderline{ nullptr },
				m_pCheckBoxStrikeOut{ nullptr },
				m_pCheckBoxMonospace{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormMain");
					setCaption(UTF8ToString("Font Explorer"));
					setClientSize(Point{ 640, 480 });
					setState(WindowState::Maximized);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
					OnPaint = [](IForm *sender, const MessagePaint &m, bool &draw_children)->void { cast<IFormMain*>(sender)->FormMain_OnPaint(sender, m, draw_children); };
				}
			}
		};
	}
}
