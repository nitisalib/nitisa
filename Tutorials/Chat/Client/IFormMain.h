// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 14:14:15

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormMain.h:
//         #include "IFormMain.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace app
//             {
//                 class CFormMain : public IFormMain // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormMain(); // Declare constructor
//                 };
//             }
//         }
//
//     FormMain.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormMain.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace app
//             {
//                 CFormMain::CFormMain(): // Implement constructor of your form
//                     IFormMain(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormMain::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/RectF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Components/TCPClient/TCPClient.h"
#include "Standard/Components/Timer/Timer.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/Container/Container.h"
#include "Standard/Controls/Edit/Edit.h"
#include "Standard/Controls/GroupBox/GroupBox.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/Memo/Memo.h"
#include "Standard/Controls/UpDown/UpDown.h"

namespace nitisa
{
	class IComponent;
	class IControl;

	namespace standard
	{
		class IEdit;
	}

	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace app
	{
		class IFormMain : public CForm
		{
		protected:
			// Components
			standard::CTimer *m_pTimer;
			standard::CTCPClient *m_pTCPClient;

			// Controls
			standard::CContainer *m_pContainer1;
			standard::CLabel *m_pLabel1;
			standard::CEdit *m_pEditServer;
			standard::CLabel *m_pLabel2;
			standard::CEdit *m_pEditPort;
			standard::CUpDown *m_pUpDownPort;
			standard::CButton *m_pButtonConnect;
			standard::CButton *m_pButtonDisconnect;
			standard::CLabel *m_pLabel3;
			standard::CEdit *m_pEditName;
			standard::CGroupBox *m_pGroupBox1;
			standard::CEdit *m_pEditMessage;
			standard::CGroupBox *m_pGroupBox2;
			standard::CMemo *m_pMemoChat;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void Timer_OnTimer(IComponent *sender) = 0;
			virtual void ButtonConnect_OnClick(IControl *sender) = 0;
			virtual void ButtonDisconnect_OnClick(IControl *sender) = 0;
			virtual void EditMessage_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;

		private:
			void Initialize()
			{
				// Create components
				m_pTimer = new standard::CTimer(this);
				m_pTimer->setName(L"Timer");
				m_pTCPClient = new standard::CTCPClient(this);
				m_pTCPClient->setName(L"TCPClient");

				// Create controls
				m_pContainer1 = new standard::CContainer(this);
				m_pContainer1->setName(L"Container1");
				m_pLabel1 = new standard::CLabel(m_pContainer1);
				m_pLabel1->setName(L"Label1");
				m_pEditServer = new standard::CEdit(m_pContainer1);
				m_pEditServer->setName(L"EditServer");
				m_pLabel2 = new standard::CLabel(m_pContainer1);
				m_pLabel2->setName(L"Label2");
				m_pEditPort = new standard::CEdit(m_pContainer1);
				m_pEditPort->setName(L"EditPort");
				m_pUpDownPort = new standard::CUpDown(m_pContainer1);
				m_pUpDownPort->setName(L"UpDownPort");
				m_pButtonConnect = new standard::CButton(m_pContainer1);
				m_pButtonConnect->setName(L"ButtonConnect");
				m_pButtonDisconnect = new standard::CButton(m_pContainer1);
				m_pButtonDisconnect->setName(L"ButtonDisconnect");
				m_pLabel3 = new standard::CLabel(m_pContainer1);
				m_pLabel3->setName(L"Label3");
				m_pEditName = new standard::CEdit(m_pContainer1);
				m_pEditName->setName(L"EditName");
				m_pGroupBox1 = new standard::CGroupBox(this);
				m_pGroupBox1->setName(L"GroupBox1");
				m_pEditMessage = new standard::CEdit(m_pGroupBox1);
				m_pEditMessage->setName(L"EditMessage");
				m_pGroupBox2 = new standard::CGroupBox(this);
				m_pGroupBox2->setName(L"GroupBox2");
				m_pMemoChat = new standard::CMemo(m_pGroupBox2);
				m_pMemoChat->setName(L"MemoChat");

				// Initialize components
				m_pTimer->setName(L"Timer");
				m_pTimer->setInterval(2.0f);
				m_pTimer->OnTimer = [](IComponent *sender)->void { cast<IFormMain*>(sender->getForm())->Timer_OnTimer(sender); };

				m_pTCPClient->setName(L"TCPClient");

				// Initialize controls
				m_pContainer1->setName(L"Container1");
				m_pContainer1->setSize(PointF{ 763.0f, 41.0f });
				m_pContainer1->setAlign(Align::Top);

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(8.0f, 12.0f, 0.0f);
				m_pLabel1->setSize(PointF{ 36.0f, 13.0f });
				m_pLabel1->setCaption(UTF8ToString("Server:"));
				m_pLabel1->setAutoSize(false);

				m_pEditServer->setName(L"EditServer");
				m_pEditServer->getTransform()->Translate(56.0f, 8.0f, 0.0f);
				m_pEditServer->setTabOrder(3);
				m_pEditServer->setText(UTF8ToString("localhost"));

				m_pLabel2->setName(L"Label2");
				m_pLabel2->getTransform()->Translate(184.0f, 12.0f, 0.0f);
				m_pLabel2->setSize(PointF{ 24.0f, 13.0f });
				m_pLabel2->setCaption(UTF8ToString("Port:"));
				m_pLabel2->setAutoSize(false);

				m_pEditPort->setName(L"EditPort");
				m_pEditPort->getTransform()->Translate(216.0f, 8.0f, 0.0f);
				m_pEditPort->setTabOrder(5);
				m_pEditPort->setText(UTF8ToString("1000"));

				m_pUpDownPort->setName(L"UpDownPort");
				m_pUpDownPort->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownPort->setMin(1);
				m_pUpDownPort->setMax(65000);
				m_pUpDownPort->setValue(1000);
				m_pUpDownPort->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditPort")));
				m_pUpDownPort->getTransform()->Translate(336.0f, 8.0f, 0.0f);

				m_pButtonConnect->setName(L"ButtonConnect");
				m_pButtonConnect->getTransform()->Translate(536.0f, 8.0f, 0.0f);
				m_pButtonConnect->setTabOrder(7);
				m_pButtonConnect->setCaption(UTF8ToString("Connect"));
				m_pButtonConnect->OnClick = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->ButtonConnect_OnClick(sender); };

				m_pButtonDisconnect->setName(L"ButtonDisconnect");
				m_pButtonDisconnect->getTransform()->Translate(648.0f, 8.0f, 0.0f);
				m_pButtonDisconnect->setTabOrder(8);
				m_pButtonDisconnect->setEnabled(false);
				m_pButtonDisconnect->setCaption(UTF8ToString("Disconnect"));
				m_pButtonDisconnect->OnClick = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->ButtonDisconnect_OnClick(sender); };

				m_pLabel3->setName(L"Label3");
				m_pLabel3->getTransform()->Translate(368.0f, 12.0f, 0.0f);
				m_pLabel3->setSize(PointF{ 31.0f, 13.0f });
				m_pLabel3->setCaption(UTF8ToString("Name:"));
				m_pLabel3->setAutoSize(false);

				m_pEditName->setName(L"EditName");
				m_pEditName->getTransform()->Translate(408.0f, 8.0f, 0.0f);
				m_pEditName->setTabOrder(12);
				m_pEditName->setText(UTF8ToString("John Doe"));

				m_pGroupBox1->setName(L"GroupBox1");
				m_pGroupBox1->getTransform()->Translate(0.0f, 393.0f, 0.0f);
				m_pGroupBox1->setSize(PointF{ 763.0f, 49.0f });
				m_pGroupBox1->setAlign(Align::Bottom);
				m_pGroupBox1->setCaption(UTF8ToString("Write a message"));
				m_pGroupBox1->setPadding(RectF{ 4.0f, 18.0f, 4.0f, 4.0f });

				m_pEditMessage->setName(L"EditMessage");
				m_pEditMessage->getTransform()->Translate(5.0f, 19.0f, 0.0f);
				m_pEditMessage->setSize(PointF{ 753.0f, 25.0f });
				m_pEditMessage->setTabOrder(10);
				m_pEditMessage->setAlign(Align::Client);
				m_pEditMessage->setText(UTF8ToString(""));
				m_pEditMessage->setPlaceholder(UTF8ToString("Type a message"));
				m_pEditMessage->OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IFormMain*>(sender->getForm())->EditMessage_OnKeyUp(sender, m, processed); };

				m_pGroupBox2->setName(L"GroupBox2");
				m_pGroupBox2->getTransform()->Translate(0.0f, 41.0f, 0.0f);
				m_pGroupBox2->setSize(PointF{ 763.0f, 352.0f });
				m_pGroupBox2->setAlign(Align::Client);
				m_pGroupBox2->setCaption(UTF8ToString("Chat"));

				m_pMemoChat->setName(L"MemoChat");
				m_pMemoChat->getTransform()->Translate(5.0f, 15.0f, 0.0f);
				m_pMemoChat->setSize(PointF{ 753.0f, 332.0f });
				m_pMemoChat->setTabOrder(14);
				m_pMemoChat->setAlign(Align::Client);
				m_pMemoChat->setText(UTF8ToString(""));
				m_pMemoChat->setReadOnly(true);


			}

		public:
			IFormMain(IWindow *window, IRenderer *renderer, const String &class_name = L"FormMain", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pTimer{ nullptr },
				m_pTCPClient{ nullptr },
				m_pContainer1{ nullptr },
				m_pLabel1{ nullptr },
				m_pEditServer{ nullptr },
				m_pLabel2{ nullptr },
				m_pEditPort{ nullptr },
				m_pUpDownPort{ nullptr },
				m_pButtonConnect{ nullptr },
				m_pButtonDisconnect{ nullptr },
				m_pLabel3{ nullptr },
				m_pEditName{ nullptr },
				m_pGroupBox1{ nullptr },
				m_pEditMessage{ nullptr },
				m_pGroupBox2{ nullptr },
				m_pMemoChat{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormMain");
					setCaption(UTF8ToString("Chat client"));
					setClientSize(Point{ 763, 442 });
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
				}
			}
		};
	}
}
