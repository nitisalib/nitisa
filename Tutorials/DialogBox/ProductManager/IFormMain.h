// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 14:19:26

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormMain.h:
//         #include "IFormMain.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace app
//             {
//                 class CFormMain : public IFormMain // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormMain(); // Declare constructor
//                 };
//             }
//         }
//
//     FormMain.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormMain.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace app
//             {
//                 CFormMain::CFormMain(): // Implement constructor of your form
//                     IFormMain(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormMain::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/CheckListBox/CheckListBox.h"
#include "Standard/Controls/Container/Container.h"
#include "Standard/Controls/GroupBox/GroupBox.h"
#include "Standard/Controls/ListBox/CustomListBox.h"
#include "Standard/ListItems/CheckBox/ListItemCheckBox.h"

namespace nitisa
{
	class IControl;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace app
	{
		class IFormMain : public CForm
		{
		protected:
			// Controls
			standard::CContainer *m_pContainer1;
			standard::CButton *m_pButtonAdd;
			standard::CButton *m_pButtonEdit;
			standard::CButton *m_pButtonDelete;
			standard::CButton *m_pButtonClear;
			standard::CGroupBox *m_pGroupBox1;
			standard::CCheckListBox *m_pCheckListBoxProducts;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void ButtonAdd_OnClick(IControl *sender) = 0;
			virtual void ButtonEdit_OnClick(IControl *sender) = 0;
			virtual void ButtonDelete_OnClick(IControl *sender) = 0;
			virtual void ButtonClear_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pContainer1 = new standard::CContainer(this);
				m_pContainer1->setName(L"Container1");
				m_pButtonAdd = new standard::CButton(m_pContainer1);
				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonEdit = new standard::CButton(m_pContainer1);
				m_pButtonEdit->setName(L"ButtonEdit");
				m_pButtonDelete = new standard::CButton(m_pContainer1);
				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonClear = new standard::CButton(m_pContainer1);
				m_pButtonClear->setName(L"ButtonClear");
				m_pGroupBox1 = new standard::CGroupBox(this);
				m_pGroupBox1->setName(L"GroupBox1");
				m_pCheckListBoxProducts = new standard::CCheckListBox(m_pGroupBox1);
				m_pCheckListBoxProducts->setName(L"CheckListBoxProducts");

				// Initialize controls
				m_pContainer1->setName(L"Container1");
				m_pContainer1->getTransform()->Translate(501.0f, 0.0f, 0.0f);
				m_pContainer1->setSize(PointF{ 121.0f, 440.0f });
				m_pContainer1->setAlign(Align::Right);
				m_pContainer1->setUseMask(false);

				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonAdd->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pButtonAdd->setTabOrder(2);
				m_pButtonAdd->setCaption(UTF8ToString("Add product..."));
				m_pButtonAdd->OnClick = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->ButtonAdd_OnClick(sender); };

				m_pButtonEdit->setName(L"ButtonEdit");
				m_pButtonEdit->getTransform()->Translate(8.0f, 40.0f, 0.0f);
				m_pButtonEdit->setTabOrder(3);
				m_pButtonEdit->setCaption(UTF8ToString("Edit product..."));
				m_pButtonEdit->OnClick = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->ButtonEdit_OnClick(sender); };

				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonDelete->getTransform()->Translate(8.0f, 72.0f, 0.0f);
				m_pButtonDelete->setTabOrder(4);
				m_pButtonDelete->setCaption(UTF8ToString("Delete products"));
				m_pButtonDelete->OnClick = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->ButtonDelete_OnClick(sender); };

				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonClear->getTransform()->Translate(8.0f, 104.0f, 0.0f);
				m_pButtonClear->setTabOrder(7);
				m_pButtonClear->setCaption(UTF8ToString("Clear"));
				m_pButtonClear->OnClick = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->ButtonClear_OnClick(sender); };

				m_pGroupBox1->setName(L"GroupBox1");
				m_pGroupBox1->setSize(PointF{ 501.0f, 440.0f });
				m_pGroupBox1->setAlign(Align::Client);
				m_pGroupBox1->setCaption(UTF8ToString("Products"));
				m_pGroupBox1->setUseMask(false);

				m_pCheckListBoxProducts->setName(L"CheckListBoxProducts");
				m_pCheckListBoxProducts->getTransform()->Translate(5.0f, 15.0f, 0.0f);
				m_pCheckListBoxProducts->setSize(PointF{ 491.0f, 420.0f });
				m_pCheckListBoxProducts->setTabOrder(6);
				m_pCheckListBoxProducts->setAlign(Align::Client);


			}

		public:
			IFormMain(IWindow *window, IRenderer *renderer, const String &class_name = L"FormMain", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pContainer1{ nullptr },
				m_pButtonAdd{ nullptr },
				m_pButtonEdit{ nullptr },
				m_pButtonDelete{ nullptr },
				m_pButtonClear{ nullptr },
				m_pGroupBox1{ nullptr },
				m_pCheckListBoxProducts{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormMain");
					setCaption(UTF8ToString("Product manager"));
					setClientSize(Point{ 622, 440 });
					setState(WindowState::Maximized);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
				}
			}
		};
	}
}
