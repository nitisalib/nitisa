// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:33:18

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormColorArrayProto.h:
//         #include "IFormColorArrayProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CFormColorArrayProto : public IFormColorArrayProto // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormColorArrayProto(); // Declare constructor
//                 };
//             }
//         }
//
//     FormColorArrayProto.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormColorArrayProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CFormColorArrayProto::CFormColorArrayProto(): // Implement constructor of your form
//                     IFormColorArrayProto(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormColorArrayProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/CursorType.h"
#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Components/ColorDialog/ColorDialog.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/ColorListBox/ColorListBox.h"
#include "../../Controls/Label/Label.h"
#include "../../Controls/ListBox/CustomListBox.h"
#include "../../Controls/ListBox/ListBox.h"
#include "../../Controls/ListBox/ListBoxListItem.h"
#include "../../Controls/Panel/Panel.h"
#include "../../ListItems/Color/ListItemColor.h"

namespace nitisa
{
	class IControl;
	class IForm;
	class IListItem;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace standard
	{
		class IFormColorArrayProto : public CForm
		{
		protected:
			// Components
			CColorDialog *m_pColorDialog1;

			// Controls
			CListBox *m_pListBoxArray;
			CButton *m_pButtonAdd;
			CButton *m_pButtonUpdate;
			CButton *m_pButtonDelete;
			CButton *m_pButtonClear;
			CLabel *m_pLabel1;
			CLabel *m_pLabelMinCount;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;
			CColorListBox *m_pColorListBox;
			CLabel *m_pLabel2;
			CLabel *m_pLabel3;
			CPanel *m_pPanelColor;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormColorArrayProto_OnKeyUp(IForm *sender, const MessageKey &m) = 0;
			virtual void ListBoxArray_OnSelect(IControl *sender, IListItem *item) = 0;
			virtual void ButtonAdd_OnClick(IControl *sender) = 0;
			virtual void ButtonUpdate_OnClick(IControl *sender) = 0;
			virtual void ButtonDelete_OnClick(IControl *sender) = 0;
			virtual void ButtonClear_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;
			virtual void ColorListBox_OnSelect(IControl *sender, IListItem *item) = 0;
			virtual void PanelColor_OnLeftMouseButtonDown(IControl *sender, const MessageMouse &m, bool &processed) = 0;

		private:
			void Initialize()
			{
				// Create components
				m_pColorDialog1 = new CColorDialog(this);
				m_pColorDialog1->setName(L"ColorDialog1");

				// Create controls
				m_pListBoxArray = new CListBox(this);
				m_pListBoxArray->setName(L"ListBoxArray");
				m_pButtonAdd = new CButton(this);
				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonUpdate = new CButton(this);
				m_pButtonUpdate->setName(L"ButtonUpdate");
				m_pButtonDelete = new CButton(this);
				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonClear = new CButton(this);
				m_pButtonClear->setName(L"ButtonClear");
				m_pLabel1 = new CLabel(this);
				m_pLabel1->setName(L"Label1");
				m_pLabelMinCount = new CLabel(this);
				m_pLabelMinCount->setName(L"LabelMinCount");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");
				m_pColorListBox = new CColorListBox(this);
				m_pColorListBox->setName(L"ColorListBox");
				m_pLabel2 = new CLabel(this);
				m_pLabel2->setName(L"Label2");
				m_pLabel3 = new CLabel(this);
				m_pLabel3->setName(L"Label3");
				m_pPanelColor = new CPanel(this);
				m_pPanelColor->setName(L"PanelColor");

				// Initialize components
				m_pColorDialog1->setName(L"ColorDialog1");

				// Initialize controls
				m_pListBoxArray->setName(L"ListBoxArray");
				m_pListBoxArray->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pListBoxArray->setSize(PointF{ 177.0f, 313.0f });
				m_pListBoxArray->setTabOrder(1);
				m_pListBoxArray->setMultiselect(false);
				m_pListBoxArray->OnSelect = [](IControl *sender, IListItem *item)->void { cast<IFormColorArrayProto*>(sender->getForm())->ListBoxArray_OnSelect(sender, item); };

				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonAdd->getTransform()->Translate(480.0f, 80.0f, 0.0f);
				m_pButtonAdd->setTabOrder(4);
				m_pButtonAdd->setCaption(UTF8ToString("Add"));
				m_pButtonAdd->OnClick = [](IControl *sender)->void { cast<IFormColorArrayProto*>(sender->getForm())->ButtonAdd_OnClick(sender); };

				m_pButtonUpdate->setName(L"ButtonUpdate");
				m_pButtonUpdate->getTransform()->Translate(480.0f, 104.0f, 0.0f);
				m_pButtonUpdate->setTabOrder(5);
				m_pButtonUpdate->setEnabled(false);
				m_pButtonUpdate->setCaption(UTF8ToString("Update"));
				m_pButtonUpdate->OnClick = [](IControl *sender)->void { cast<IFormColorArrayProto*>(sender->getForm())->ButtonUpdate_OnClick(sender); };

				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonDelete->getTransform()->Translate(480.0f, 136.0f, 0.0f);
				m_pButtonDelete->setTabOrder(6);
				m_pButtonDelete->setEnabled(false);
				m_pButtonDelete->setCaption(UTF8ToString("Delete"));
				m_pButtonDelete->OnClick = [](IControl *sender)->void { cast<IFormColorArrayProto*>(sender->getForm())->ButtonDelete_OnClick(sender); };

				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonClear->getTransform()->Translate(480.0f, 160.0f, 0.0f);
				m_pButtonClear->setTabOrder(7);
				m_pButtonClear->setEnabled(false);
				m_pButtonClear->setCaption(UTF8ToString("Clear"));
				m_pButtonClear->OnClick = [](IControl *sender)->void { cast<IFormColorArrayProto*>(sender->getForm())->ButtonClear_OnClick(sender); };

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(192.0f, 304.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("Min count:"));

				m_pLabelMinCount->setName(L"LabelMinCount");
				m_pLabelMinCount->getTransform()->Translate(256.0f, 304.0f, 0.0f);
				m_pLabelMinCount->setCaption(UTF8ToString("0"));

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(8.0f, 328.0f, 0.0f);
				m_pButtonOk->setTabOrder(8);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { cast<IFormColorArrayProto*>(sender->getForm())->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(120.0f, 328.0f, 0.0f);
				m_pButtonCancel->setTabOrder(9);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { cast<IFormColorArrayProto*>(sender->getForm())->ButtonCancel_OnClick(sender); };

				m_pColorListBox->setName(L"ColorListBox");
				m_pColorListBox->getTransform()->Translate(192.0f, 32.0f, 0.0f);
				m_pColorListBox->setSize(PointF{ 193.0f, 265.0f });
				m_pColorListBox->setTabOrder(2);
				m_pColorListBox->OnSelect = [](IControl *sender, IListItem *item)->void { cast<IFormColorArrayProto*>(sender->getForm())->ColorListBox_OnSelect(sender, item); };

				m_pLabel2->setName(L"Label2");
				m_pLabel2->getTransform()->Translate(192.0f, 12.0f, 0.0f);
				m_pLabel2->setCaption(UTF8ToString("Select color:"));

				m_pLabel3->setName(L"Label3");
				m_pLabel3->getTransform()->Translate(392.0f, 12.0f, 0.0f);
				m_pLabel3->setCaption(UTF8ToString("Or choose custom one:"));

				m_pPanelColor->setName(L"PanelColor");
				m_pPanelColor->getTransform()->Translate(392.0f, 32.0f, 0.0f);
				m_pPanelColor->setSize(PointF{ 193.0f, 41.0f });
				m_pPanelColor->setCursor(CursorType::Hand);
				m_pPanelColor->setCaption(UTF8ToString(""));
				m_pPanelColor->setUseMask(false);
				m_pPanelColor->OnLeftMouseButtonDown = [](IControl *sender, const MessageMouse &m, bool &processed)->void { cast<IFormColorArrayProto*>(sender->getForm())->PanelColor_OnLeftMouseButtonDown(sender, m, processed); };


			}

		public:
			IFormColorArrayProto(IWindow *window, IRenderer *renderer, const String &class_name = L"FormColorArrayProto", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pColorDialog1{ nullptr },
				m_pListBoxArray{ nullptr },
				m_pButtonAdd{ nullptr },
				m_pButtonUpdate{ nullptr },
				m_pButtonDelete{ nullptr },
				m_pButtonClear{ nullptr },
				m_pLabel1{ nullptr },
				m_pLabelMinCount{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr },
				m_pColorListBox{ nullptr },
				m_pLabel2{ nullptr },
				m_pLabel3{ nullptr },
				m_pPanelColor{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormColorArrayProto");
					setCaption(UTF8ToString("Manage Color-array"));
					setClientSize(Point{ 593, 360 });
					setState(WindowState::Hidden);
					setWindowPosition(WindowPosition::MainFormCenter);
					setHasMaximizeBox(false);
					setHasMinimizeBox(false);
					setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
					OnKeyUp = [](IForm *sender, const MessageKey &m)->void { cast<IFormColorArrayProto*>(sender)->FormColorArrayProto_OnKeyUp(sender, m); };
				}
			}
		};
	}
}
