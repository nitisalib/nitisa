// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:34:17

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormImageListProto.h:
//         #include "IFormImageListProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CFormImageListProto : public IFormImageListProto // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormImageListProto(); // Declare constructor
//                 };
//             }
//         }
//
//     FormImageListProto.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormImageListProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CFormImageListProto::CFormImageListProto(): // Implement constructor of your form
//                     IFormImageListProto(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormImageListProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Components/ImageList/ImageList.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/Container/Container.h"
#include "../../Controls/ImageListEditor/ImageListEditor.h"

namespace nitisa
{
	class IControl;
	class IImageList;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace standard
	{
		class IFormImageListProto : public CForm
		{
		protected:
			// Components
			CImageList *m_pImageList;

			// Controls
			CContainer *m_pContainerButtons;
			CButton *m_pButtonAdd;
			CButton *m_pButtonDelete;
			CButton *m_pButtonClear;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;
			CImageListEditor *m_pImageListEditor;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void ButtonAdd_OnClick(IControl *sender) = 0;
			virtual void ButtonDelete_OnClick(IControl *sender) = 0;
			virtual void ButtonClear_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create components
				m_pImageList = new CImageList(this);
				m_pImageList->setName(L"ImageList");

				// Create controls
				m_pContainerButtons = new CContainer(this);
				m_pContainerButtons->setName(L"ContainerButtons");
				m_pButtonAdd = new CButton(m_pContainerButtons);
				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonDelete = new CButton(m_pContainerButtons);
				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonClear = new CButton(m_pContainerButtons);
				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonOk = new CButton(m_pContainerButtons);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(m_pContainerButtons);
				m_pButtonCancel->setName(L"ButtonCancel");
				m_pImageListEditor = new CImageListEditor(this);
				m_pImageListEditor->setName(L"ImageListEditor");

				// Initialize components
				m_pImageList->setName(L"ImageList");

				// Initialize controls
				m_pContainerButtons->setName(L"ContainerButtons");
				m_pContainerButtons->getTransform()->Translate(0.0f, 111.0f, 0.0f);
				m_pContainerButtons->setSize(PointF{ 372.0f, 39.0f });
				m_pContainerButtons->setAlign(Align::Bottom);
				m_pContainerButtons->setUseMask(false);

				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonAdd->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pButtonAdd->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonAdd->setTabOrder(2);
				m_pButtonAdd->setCaption(UTF8ToString("Add..."));
				m_pButtonAdd->OnClick = [](IControl *sender)->void { cast<IFormImageListProto*>(sender->getForm())->ButtonAdd_OnClick(sender); };

				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonDelete->getTransform()->Translate(80.0f, 8.0f, 0.0f);
				m_pButtonDelete->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonDelete->setTabOrder(3);
				m_pButtonDelete->setCaption(UTF8ToString("Delete"));
				m_pButtonDelete->OnClick = [](IControl *sender)->void { cast<IFormImageListProto*>(sender->getForm())->ButtonDelete_OnClick(sender); };

				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonClear->getTransform()->Translate(152.0f, 8.0f, 0.0f);
				m_pButtonClear->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonClear->setTabOrder(4);
				m_pButtonClear->setCaption(UTF8ToString("Clear"));
				m_pButtonClear->OnClick = [](IControl *sender)->void { cast<IFormImageListProto*>(sender->getForm())->ButtonClear_OnClick(sender); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(224.0f, 8.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(5);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { cast<IFormImageListProto*>(sender->getForm())->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(296.0f, 8.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(6);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { cast<IFormImageListProto*>(sender->getForm())->ButtonCancel_OnClick(sender); };

				m_pImageListEditor->setName(L"ImageListEditor");
				m_pImageListEditor->setSize(PointF{ 372.0f, 111.0f });
				m_pImageListEditor->setAlign(Align::Client);
				m_pImageListEditor->setImageList(cast<IImageList*>(getComponent(L"ImageList")));


			}

		public:
			IFormImageListProto(IWindow *window, IRenderer *renderer, const String &class_name = L"FormImageListProto", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pImageList{ nullptr },
				m_pContainerButtons{ nullptr },
				m_pButtonAdd{ nullptr },
				m_pButtonDelete{ nullptr },
				m_pButtonClear{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr },
				m_pImageListEditor{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormImageListProto");
					setCaption(UTF8ToString("Image List"));
					setClientSize(Point{ 372, 150 });
					setState(WindowState::Hidden);
					setWindowPosition(WindowPosition::MainFormCenter);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
				}
			}
		};
	}
}
