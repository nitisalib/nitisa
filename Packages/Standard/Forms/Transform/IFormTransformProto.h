// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:36:47

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormTransformProto.h:
//         #include "IFormTransformProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CFormTransformProto : public IFormTransformProto // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormTransformProto(); // Declare constructor
//                 };
//             }
//         }
//
//     FormTransformProto.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormTransformProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CFormTransformProto::CFormTransformProto(): // Implement constructor of your form
//                     IFormTransformProto(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormTransformProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/DropDown/CustomDropDown.h"
#include "../../Controls/DropDown/DropDown.h"
#include "../../Controls/Edit/Edit.h"
#include "../../Controls/GroupBox/GroupBox.h"
#include "../../Controls/Label/Label.h"
#include "../../ListItems/Label/ListItemLabel.h"

namespace nitisa
{
	class IControl;
	class IForm;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace standard
	{
		class IFormTransformProto : public CForm
		{
		protected:
			// Controls
			CGroupBox *m_pGroupBoxT;
			CLabel *m_pLabelTx;
			CLabel *m_pLabelTy;
			CLabel *m_pLabelTz;
			CEdit *m_pEditTx;
			CEdit *m_pEditTy;
			CEdit *m_pEditTz;
			CGroupBox *m_pGroupBoxS;
			CLabel *m_pLabelSx;
			CLabel *m_pLabelSy;
			CLabel *m_pLabelSz;
			CEdit *m_pEditSx;
			CEdit *m_pEditSy;
			CEdit *m_pEditSz;
			CGroupBox *m_pGroupBoxR;
			CLabel *m_pLabelRx;
			CLabel *m_pLabelRy;
			CLabel *m_pLabelRz;
			CEdit *m_pEditRx;
			CEdit *m_pEditRy;
			CEdit *m_pEditRz;
			CGroupBox *m_pGroupBoxO;
			CLabel *m_pLabelRO;
			CLabel *m_pLabelTO;
			CDropDown *m_pDropDownRO;
			CDropDown *m_pDropDownTO;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormTransformProto_OnKeyUp(IForm *sender, const MessageKey &m) = 0;
			virtual void EditTx_OnKillFocus(IControl *sender) = 0;
			virtual void EditTy_OnKillFocus(IControl *sender) = 0;
			virtual void EditTz_OnKillFocus(IControl *sender) = 0;
			virtual void EditSx_OnKillFocus(IControl *sender) = 0;
			virtual void EditSy_OnKillFocus(IControl *sender) = 0;
			virtual void EditSz_OnKillFocus(IControl *sender) = 0;
			virtual void EditRx_OnKillFocus(IControl *sender) = 0;
			virtual void EditRy_OnKillFocus(IControl *sender) = 0;
			virtual void EditRz_OnKillFocus(IControl *sender) = 0;
			virtual void DropDownRO_OnSelect(IControl *sender, const int index) = 0;
			virtual void DropDownTO_OnSelect(IControl *sender, const int index) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pGroupBoxT = new CGroupBox(this);
				m_pGroupBoxT->setName(L"GroupBoxT");
				m_pLabelTx = new CLabel(m_pGroupBoxT);
				m_pLabelTx->setName(L"LabelTx");
				m_pLabelTy = new CLabel(m_pGroupBoxT);
				m_pLabelTy->setName(L"LabelTy");
				m_pLabelTz = new CLabel(m_pGroupBoxT);
				m_pLabelTz->setName(L"LabelTz");
				m_pEditTx = new CEdit(m_pGroupBoxT);
				m_pEditTx->setName(L"EditTx");
				m_pEditTy = new CEdit(m_pGroupBoxT);
				m_pEditTy->setName(L"EditTy");
				m_pEditTz = new CEdit(m_pGroupBoxT);
				m_pEditTz->setName(L"EditTz");
				m_pGroupBoxS = new CGroupBox(this);
				m_pGroupBoxS->setName(L"GroupBoxS");
				m_pLabelSx = new CLabel(m_pGroupBoxS);
				m_pLabelSx->setName(L"LabelSx");
				m_pLabelSy = new CLabel(m_pGroupBoxS);
				m_pLabelSy->setName(L"LabelSy");
				m_pLabelSz = new CLabel(m_pGroupBoxS);
				m_pLabelSz->setName(L"LabelSz");
				m_pEditSx = new CEdit(m_pGroupBoxS);
				m_pEditSx->setName(L"EditSx");
				m_pEditSy = new CEdit(m_pGroupBoxS);
				m_pEditSy->setName(L"EditSy");
				m_pEditSz = new CEdit(m_pGroupBoxS);
				m_pEditSz->setName(L"EditSz");
				m_pGroupBoxR = new CGroupBox(this);
				m_pGroupBoxR->setName(L"GroupBoxR");
				m_pLabelRx = new CLabel(m_pGroupBoxR);
				m_pLabelRx->setName(L"LabelRx");
				m_pLabelRy = new CLabel(m_pGroupBoxR);
				m_pLabelRy->setName(L"LabelRy");
				m_pLabelRz = new CLabel(m_pGroupBoxR);
				m_pLabelRz->setName(L"LabelRz");
				m_pEditRx = new CEdit(m_pGroupBoxR);
				m_pEditRx->setName(L"EditRx");
				m_pEditRy = new CEdit(m_pGroupBoxR);
				m_pEditRy->setName(L"EditRy");
				m_pEditRz = new CEdit(m_pGroupBoxR);
				m_pEditRz->setName(L"EditRz");
				m_pGroupBoxO = new CGroupBox(this);
				m_pGroupBoxO->setName(L"GroupBoxO");
				m_pLabelRO = new CLabel(m_pGroupBoxO);
				m_pLabelRO->setName(L"LabelRO");
				m_pLabelTO = new CLabel(m_pGroupBoxO);
				m_pLabelTO->setName(L"LabelTO");
				m_pDropDownRO = new CDropDown(m_pGroupBoxO);
				m_pDropDownRO->setName(L"DropDownRO");
				m_pDropDownTO = new CDropDown(m_pGroupBoxO);
				m_pDropDownTO->setName(L"DropDownTO");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pGroupBoxT->setName(L"GroupBoxT");
				m_pGroupBoxT->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pGroupBoxT->setSize(PointF{ 136.0f, 94.0f });
				m_pGroupBoxT->setCaption(UTF8ToString("Translate"));
				m_pGroupBoxT->setUseMask(false);

				m_pLabelTx->setName(L"LabelTx");
				m_pLabelTx->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pLabelTx->setCaption(UTF8ToString("X:"));

				m_pLabelTy->setName(L"LabelTy");
				m_pLabelTy->getTransform()->Translate(8.0f, 46.0f, 0.0f);
				m_pLabelTy->setCaption(UTF8ToString("Y:"));

				m_pLabelTz->setName(L"LabelTz");
				m_pLabelTz->getTransform()->Translate(8.0f, 70.0f, 0.0f);
				m_pLabelTz->setCaption(UTF8ToString("Z:"));

				m_pEditTx->setName(L"EditTx");
				m_pEditTx->getTransform()->Translate(28.0f, 18.0f, 0.0f);
				m_pEditTx->setSize(PointF{ 100.0f, 21.0f });
				m_pEditTx->setTabOrder(8);
				m_pEditTx->setText(UTF8ToString("0"));
				m_pEditTx->OnKillFocus = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->EditTx_OnKillFocus(sender); };

				m_pEditTy->setName(L"EditTy");
				m_pEditTy->getTransform()->Translate(28.0f, 44.0f, 0.0f);
				m_pEditTy->setSize(PointF{ 100.0f, 21.0f });
				m_pEditTy->setTabOrder(9);
				m_pEditTy->setText(UTF8ToString("0"));
				m_pEditTy->OnKillFocus = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->EditTy_OnKillFocus(sender); };

				m_pEditTz->setName(L"EditTz");
				m_pEditTz->getTransform()->Translate(28.0f, 68.0f, 0.0f);
				m_pEditTz->setSize(PointF{ 100.0f, 21.0f });
				m_pEditTz->setTabOrder(10);
				m_pEditTz->setText(UTF8ToString("0"));
				m_pEditTz->OnKillFocus = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->EditTz_OnKillFocus(sender); };

				m_pGroupBoxS->setName(L"GroupBoxS");
				m_pGroupBoxS->getTransform()->Translate(148.0f, 8.0f, 0.0f);
				m_pGroupBoxS->setSize(PointF{ 136.0f, 94.0f });
				m_pGroupBoxS->setCaption(UTF8ToString("Scale"));
				m_pGroupBoxS->setUseMask(false);

				m_pLabelSx->setName(L"LabelSx");
				m_pLabelSx->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pLabelSx->setCaption(UTF8ToString("X:"));

				m_pLabelSy->setName(L"LabelSy");
				m_pLabelSy->getTransform()->Translate(8.0f, 46.0f, 0.0f);
				m_pLabelSy->setCaption(UTF8ToString("Y:"));

				m_pLabelSz->setName(L"LabelSz");
				m_pLabelSz->getTransform()->Translate(8.0f, 70.0f, 0.0f);
				m_pLabelSz->setCaption(UTF8ToString("Z:"));

				m_pEditSx->setName(L"EditSx");
				m_pEditSx->getTransform()->Translate(28.0f, 18.0f, 0.0f);
				m_pEditSx->setSize(PointF{ 100.0f, 21.0f });
				m_pEditSx->setTabOrder(14);
				m_pEditSx->setText(UTF8ToString("1"));
				m_pEditSx->OnKillFocus = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->EditSx_OnKillFocus(sender); };

				m_pEditSy->setName(L"EditSy");
				m_pEditSy->getTransform()->Translate(28.0f, 44.0f, 0.0f);
				m_pEditSy->setSize(PointF{ 100.0f, 21.0f });
				m_pEditSy->setTabOrder(15);
				m_pEditSy->setText(UTF8ToString("1"));
				m_pEditSy->OnKillFocus = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->EditSy_OnKillFocus(sender); };

				m_pEditSz->setName(L"EditSz");
				m_pEditSz->getTransform()->Translate(28.0f, 68.0f, 0.0f);
				m_pEditSz->setSize(PointF{ 100.0f, 21.0f });
				m_pEditSz->setTabOrder(16);
				m_pEditSz->setText(UTF8ToString("1"));
				m_pEditSz->OnKillFocus = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->EditSz_OnKillFocus(sender); };

				m_pGroupBoxR->setName(L"GroupBoxR");
				m_pGroupBoxR->getTransform()->Translate(288.0f, 8.0f, 0.0f);
				m_pGroupBoxR->setSize(PointF{ 136.0f, 94.0f });
				m_pGroupBoxR->setCaption(UTF8ToString("Rotate"));
				m_pGroupBoxR->setUseMask(false);

				m_pLabelRx->setName(L"LabelRx");
				m_pLabelRx->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pLabelRx->setCaption(UTF8ToString("X:"));

				m_pLabelRy->setName(L"LabelRy");
				m_pLabelRy->getTransform()->Translate(8.0f, 46.0f, 0.0f);
				m_pLabelRy->setCaption(UTF8ToString("Y:"));

				m_pLabelRz->setName(L"LabelRz");
				m_pLabelRz->getTransform()->Translate(8.0f, 70.0f, 0.0f);
				m_pLabelRz->setCaption(UTF8ToString("Z:"));

				m_pEditRx->setName(L"EditRx");
				m_pEditRx->getTransform()->Translate(28.0f, 18.0f, 0.0f);
				m_pEditRx->setSize(PointF{ 100.0f, 21.0f });
				m_pEditRx->setTabOrder(20);
				m_pEditRx->setText(UTF8ToString("0"));
				m_pEditRx->OnKillFocus = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->EditRx_OnKillFocus(sender); };

				m_pEditRy->setName(L"EditRy");
				m_pEditRy->getTransform()->Translate(28.0f, 44.0f, 0.0f);
				m_pEditRy->setSize(PointF{ 100.0f, 21.0f });
				m_pEditRy->setTabOrder(21);
				m_pEditRy->setText(UTF8ToString("0"));
				m_pEditRy->OnKillFocus = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->EditRy_OnKillFocus(sender); };

				m_pEditRz->setName(L"EditRz");
				m_pEditRz->getTransform()->Translate(28.0f, 68.0f, 0.0f);
				m_pEditRz->setSize(PointF{ 100.0f, 21.0f });
				m_pEditRz->setTabOrder(22);
				m_pEditRz->setText(UTF8ToString("0"));
				m_pEditRz->OnKillFocus = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->EditRz_OnKillFocus(sender); };

				m_pGroupBoxO->setName(L"GroupBoxO");
				m_pGroupBoxO->getTransform()->Translate(8.0f, 106.0f, 0.0f);
				m_pGroupBoxO->setSize(PointF{ 416.0f, 46.0f });
				m_pGroupBoxO->setCaption(UTF8ToString("Orders"));
				m_pGroupBoxO->setUseMask(false);

				m_pLabelRO->setName(L"LabelRO");
				m_pLabelRO->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pLabelRO->setCaption(UTF8ToString("Rotate:"));

				m_pLabelTO->setName(L"LabelTO");
				m_pLabelTO->getTransform()->Translate(210.0f, 22.0f, 0.0f);
				m_pLabelTO->setCaption(UTF8ToString("Transform:"));

				m_pDropDownRO->setName(L"DropDownRO");
				m_pDropDownRO->getTransform()->Translate(106.0f, 18.0f, 0.0f);
				m_pDropDownRO->setSize(PointF{ 100.0f, 21.0f });
				m_pDropDownRO->setTabOrder(25);
				m_pDropDownRO->setEditable(false);
				m_pDropDownRO->OnSelect = [](IControl *sender, const int index)->void { cast<IFormTransformProto*>(sender->getForm())->DropDownRO_OnSelect(sender, index); };

				m_pDropDownTO->setName(L"DropDownTO");
				m_pDropDownTO->getTransform()->Translate(308.0f, 18.0f, 0.0f);
				m_pDropDownTO->setSize(PointF{ 100.0f, 21.0f });
				m_pDropDownTO->setTabOrder(26);
				m_pDropDownTO->setEditable(false);
				m_pDropDownTO->OnSelect = [](IControl *sender, const int index)->void { cast<IFormTransformProto*>(sender->getForm())->DropDownTO_OnSelect(sender, index); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(146.0f, 156.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(27);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(218.0f, 156.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(28);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { cast<IFormTransformProto*>(sender->getForm())->ButtonCancel_OnClick(sender); };


			}

		public:
			IFormTransformProto(IWindow *window, IRenderer *renderer, const String &class_name = L"FormTransformProto", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pGroupBoxT{ nullptr },
				m_pLabelTx{ nullptr },
				m_pLabelTy{ nullptr },
				m_pLabelTz{ nullptr },
				m_pEditTx{ nullptr },
				m_pEditTy{ nullptr },
				m_pEditTz{ nullptr },
				m_pGroupBoxS{ nullptr },
				m_pLabelSx{ nullptr },
				m_pLabelSy{ nullptr },
				m_pLabelSz{ nullptr },
				m_pEditSx{ nullptr },
				m_pEditSy{ nullptr },
				m_pEditSz{ nullptr },
				m_pGroupBoxR{ nullptr },
				m_pLabelRx{ nullptr },
				m_pLabelRy{ nullptr },
				m_pLabelRz{ nullptr },
				m_pEditRx{ nullptr },
				m_pEditRy{ nullptr },
				m_pEditRz{ nullptr },
				m_pGroupBoxO{ nullptr },
				m_pLabelRO{ nullptr },
				m_pLabelTO{ nullptr },
				m_pDropDownRO{ nullptr },
				m_pDropDownTO{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormTransformProto");
					setCaption(UTF8ToString("Transform"));
					setClientSize(Point{ 432, 187 });
					setState(WindowState::Hidden);
					setWindowPosition(WindowPosition::MainFormCenter);
					setHasMaximizeBox(false);
					setHasMinimizeBox(false);
					setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
					OnKeyUp = [](IForm *sender, const MessageKey &m)->void { cast<IFormTransformProto*>(sender)->FormTransformProto_OnKeyUp(sender, m); };
				}
			}
		};
	}
}
