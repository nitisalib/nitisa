// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 14:53:19

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormSplash.h:
//         #include "IFormSplash.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace app
//             {
//                 class CFormSplash : public IFormSplash // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormSplash(); // Declare constructor
//                 };
//             }
//         }
//
//     FormSplash.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormSplash.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace app
//             {
//                 CFormSplash::CFormSplash(): // Implement constructor of your form
//                     IFormSplash(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormSplash::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/CloseAction.h"
#include "Nitisa/Core/Font.h"
#include "Nitisa/Core/FontWeight.h"
#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TextAlign.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Image/Color.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/ProgressBar/ProgressBar.h"

namespace nitisa
{
	class IForm;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace app
	{
		class IFormSplash : public CForm
		{
		protected:
			// Controls
			standard::CProgressBar *m_pProgressBar;
			standard::CLabel *m_pLabel1;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormSplash_OnClose(IForm *sender, CloseAction &action) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pProgressBar = new standard::CProgressBar(this);
				m_pProgressBar->setName(L"ProgressBar");
				m_pLabel1 = new standard::CLabel(this);
				m_pLabel1->setName(L"Label1");

				// Initialize controls
				m_pProgressBar->setName(L"ProgressBar");
				m_pProgressBar->getTransform()->Translate(0.0f, 209.0f, 0.0f);
				m_pProgressBar->setSize(PointF{ 391.0f, 17.0f });
				m_pProgressBar->setAlign(Align::Bottom);

				m_pLabel1->setName(L"Label1");
				{
					CFont font;
					font.setFontName(L"Tahoma");
					font.setHeight(-64);
					font.setWeight(FontWeight::Normal);
					font.setDistance(0.0f);
					font.setColor(Color{ 0, 0, 0, 255 });
					font.setShadowShift(PointF{ 0.0f, 0.0f });
					font.setShadowRadius(1);
					font.setShadowColor(Color{ 0, 0, 0, 0 });
					font.setItalic(false);
					font.setUnderline(false);
					font.setStrikeOut(false);
					font.setMonospace(false);
					m_pLabel1->setFont(&font);
				}
				m_pLabel1->setUseParentFont(false);
				m_pLabel1->setAlign(Align::Client);
				m_pLabel1->setSize(PointF{ 391.0f, 209.0f });
				m_pLabel1->setCaption(UTF8ToString("Loading..."));
				m_pLabel1->setCaptionHorizontalAlign(TextAlign::Center);
				m_pLabel1->setAutoSize(false);


			}

		public:
			IFormSplash(IWindow *window, IRenderer *renderer, const String &class_name = L"FormSplash", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pProgressBar{ nullptr },
				m_pLabel1{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormSplash");
					setClientSize(Point{ 391, 226 });
					setWindowPosition(WindowPosition::ScreenCenter);
					setHasCaption(false);
					setHasMaximizeBox(false);
					setHasMinimizeBox(false);
					setHasSizeBox(false);
					setHasSystemMenu(false);
					setHasClientEdge(false);
					setHasWindowEdge(false);
					setIsPopup(true);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
					OnClose = [](IForm *sender, CloseAction &action)->void { cast<IFormSplash*>(sender)->FormSplash_OnClose(sender, action); };
				}
			}
		};
	}
}
