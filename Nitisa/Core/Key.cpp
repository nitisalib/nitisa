// This file is a part of Nitisa framework
// Copyright © 2022 Nitisa. All rights reserved.
// Author: Dimitry Lysenko
// Site: http://nitisa.com
// Download: http://nitisa.com/downloads
// Documentation: http://nitisa.com/documentation
// License: http://nitisa.com/site/license

#include "stdafx.h"

namespace nitisa
{
	String KeyToString(const Key key)
	{
		switch (key)
		{
		case Key::LButton:				return L"Key::LButton";
		case Key::RButton:				return L"Key::RButton";
		case Key::Cancel:				return L"Key::Cancel";
		case Key::MButton:				return L"Key::MButton";
		case Key::XButton1:				return L"Key::XButton1";
		case Key::XButton2:				return L"Key::XButton2";
		case Key::Backspace:			return L"Key::Backspace";
		case Key::Tab:					return L"Key::Tab";
		case Key::Clear:				return L"Key::Clear";
		case Key::Return:				return L"Key::Return";
		case Key::Shift:				return L"Key::Shift";
		case Key::Control:				return L"Key::Control";
		case Key::Menu:					return L"Key::Menu";
		case Key::Pause:				return L"Key::Pause";
		case Key::CapsLock:				return L"Key::CapsLock";
		case Key::Kana:					return L"Key::Kana";
		case Key::Junja:				return L"Key::Junja";
		case Key::Final:				return L"Key::Final";
		case Key::Hanja:				return L"Key::Hanja";
		case Key::Escape:				return L"Key::Escape";
		case Key::Convert:				return L"Key::Convert";
		case Key::NonConvert:			return L"Key::NonConvert";
		case Key::Accept:				return L"Key::Accept";
		case Key::ModeChange:			return L"Key::ModeChange";
		case Key::Space:				return L"Key::Space";
		case Key::Prior:				return L"Key::Prior";
		case Key::Next:					return L"Key::Next";
		case Key::End:					return L"Key::End";
		case Key::Home:					return L"Key::Home";
		case Key::Left:					return L"Key::Left";
		case Key::Up:					return L"Key::Up";
		case Key::Right:				return L"Key::Right";
		case Key::Down:					return L"Key::Down";
		case Key::Select:				return L"Key::Select";
		case Key::Print:				return L"Key::Print";
		case Key::Execute:				return L"Key::Execute";
		case Key::Snapshot:				return L"Key::Snapshot";
		case Key::Insert:				return L"Key::Insert";
		case Key::Delete:				return L"Key::Delete";
		case Key::Help:					return L"Key::Help";
		case Key::Key0:					return L"Key::Key0";
		case Key::Key1:					return L"Key::Key1";
		case Key::Key2:					return L"Key::Key2";
		case Key::Key3:					return L"Key::Key3";
		case Key::Key4:					return L"Key::Key4";
		case Key::Key5:					return L"Key::Key5";
		case Key::Key6:					return L"Key::Key6";
		case Key::Key7:					return L"Key::Key7";
		case Key::Key8:					return L"Key::Key8";
		case Key::Key9:					return L"Key::Key9";
		case Key::A:					return L"Key::A";
		case Key::B:					return L"Key::B";
		case Key::C:					return L"Key::C";
		case Key::D:					return L"Key::D";
		case Key::E:					return L"Key::E";
		case Key::F:					return L"Key::F";
		case Key::G:					return L"Key::G";
		case Key::H:					return L"Key::H";
		case Key::I:					return L"Key::I";
		case Key::J:					return L"Key::J";
		case Key::K:					return L"Key::K";
		case Key::L:					return L"Key::L";
		case Key::M:					return L"Key::M";
		case Key::N:					return L"Key::N";
		case Key::O:					return L"Key::O";
		case Key::P:					return L"Key::P";
		case Key::Q:					return L"Key::Q";
		case Key::R:					return L"Key::R";
		case Key::S:					return L"Key::S";
		case Key::T:					return L"Key::T";
		case Key::U:					return L"Key::U";
		case Key::V:					return L"Key::V";
		case Key::W:					return L"Key::W";
		case Key::X:					return L"Key::X";
		case Key::Y:					return L"Key::Y";
		case Key::Z:					return L"Key::Z";
		case Key::LWin:					return L"Key::LWin";
		case Key::RWin:					return L"Key::RWin";
		case Key::Apps:					return L"Key::Apps";
		case Key::Sleep:				return L"Key::Sleep";
		case Key::Numpad0:				return L"Key::Numpad0";
		case Key::Numpad1:				return L"Key::Numpad1";
		case Key::Numpad2:				return L"Key::Numpad2";
		case Key::Numpad3:				return L"Key::Numpad3";
		case Key::Numpad4:				return L"Key::Numpad4";
		case Key::Numpad5:				return L"Key::Numpad5";
		case Key::Numpad6:				return L"Key::Numpad6";
		case Key::Numpad7:				return L"Key::Numpad7";
		case Key::Numpad8:				return L"Key::Numpad8";
		case Key::Numpad9:				return L"Key::Numpad9";
		case Key::Multiply:				return L"Key::Multiply";
		case Key::Add:					return L"Key::Add";
		case Key::Separator:			return L"Key::Separator";
		case Key::Subtract:				return L"Key::Subtract";
		case Key::Decimal:				return L"Key::Decimal";
		case Key::Divide:				return L"Key::Divide";
		case Key::F1:					return L"Key::F1";
		case Key::F2:					return L"Key::F2";
		case Key::F3:					return L"Key::F3";
		case Key::F4:					return L"Key::F4";
		case Key::F5:					return L"Key::F5";
		case Key::F6:					return L"Key::F6";
		case Key::F7:					return L"Key::F7";
		case Key::F8:					return L"Key::F8";
		case Key::F9:					return L"Key::F9";
		case Key::F10:					return L"Key::F10";
		case Key::F11:					return L"Key::F11";
		case Key::F12:					return L"Key::F12";
		case Key::F13:					return L"Key::F13";
		case Key::F14:					return L"Key::F14";
		case Key::F15:					return L"Key::F15";
		case Key::F16:					return L"Key::F16";
		case Key::F17:					return L"Key::F17";
		case Key::F18:					return L"Key::F18";
		case Key::F19:					return L"Key::F19";
		case Key::F20:					return L"Key::F20";
		case Key::F21:					return L"Key::F21";
		case Key::F22:					return L"Key::F22";
		case Key::F23:					return L"Key::F23";
		case Key::F24:					return L"Key::F24";
		case Key::NumLock:				return L"Key::NumLock";
		case Key::ScrollLock:			return L"Key::ScrollLock";
		case Key::LShift:				return L"Key::LShift";
		case Key::RShift:				return L"Key::RShift";
		case Key::LControl:				return L"Key::LControl";
		case Key::RControl:				return L"Key::RControl";
		case Key::LMenu:				return L"Key::LMenu";
		case Key::RMenu:				return L"Key::RMenu";
		case Key::BrowserBack:			return L"Key::BrowserBack";
		case Key::BrowserForward:		return L"Key::BrowserForward";
		case Key::BrowserRefresh:		return L"Key::BrowserRefresh";
		case Key::BrowserStop:			return L"Key::BrowserStop";
		case Key::BrowserSearch:		return L"Key::BrowserSearch";
		case Key::BrowserFavorites:		return L"Key::BrowserFavorites";
		case Key::BrowserHome:			return L"Key::BrowserHome";
		case Key::VolumeMute:			return L"Key::VolumeMute";
		case Key::VolumeDown:			return L"Key::VolumeDown";
		case Key::VolumeUp:				return L"Key::VolumeUp";
		case Key::MediaNextTrack:		return L"Key::MediaNextTrack";
		case Key::MediaPrevTrack:		return L"Key::MediaPrevTrack";
		case Key::MediaStop:			return L"Key::MediaStop";
		case Key::MediaPlayPause:		return L"Key::MediaPlayPause";
		case Key::LaunchMail:			return L"Key::LaunchMail";
		case Key::LaunchMediaSelect:	return L"Key::LaunchMediaSelect";
		case Key::LaunchApp1:			return L"Key::LaunchApp1";
		case Key::LaunchApp2:			return L"Key::LaunchApp2";
		case Key::Semicolon:			return L"Key::Semicolon";
		case Key::OemPlus:				return L"Key::OemPlus";
		case Key::OemComma:				return L"Key::OemComma";
		case Key::OemMinus:				return L"Key::OemMinus";
		case Key::OemPeriod:			return L"Key::OemPeriod";
		case Key::Slash:				return L"Key::Slash";
		case Key::Tilde:				return L"Key::Tilde";
		case Key::LeftBracket:			return L"Key::LeftBracket";
		case Key::BackSlash:			return L"Key::BackSlash";
		case Key::RightBracket:			return L"Key::RightBracket";
		case Key::Apostrophe:			return L"Key::Apostrophe";
		case Key::Oem8:					return L"Key::Oem8";
		case Key::Oem102:				return L"Key::Oem102";
		case Key::ProcessKey:			return L"Key::ProcessKey";
		case Key::Packet:				return L"Key::Packet";
		case Key::Attn:					return L"Key::Attn";
		case Key::CrSel:				return L"Key::CrSel";
		case Key::ExSel:				return L"Key::ExSel";
		case Key::ErEOF:				return L"Key::ErEOF";
		case Key::Play:					return L"Key::Play";
		case Key::Zoom:					return L"Key::Zoom";
		case Key::PA1:					return L"Key::PA1";
		case Key::OemClear:				return L"Key::OemClear";
		default:						return L"Key::Unknown";
		}
	}

	Key StringToKey(const String &value)
	{
		if (value == L"Key::LButton") return Key::LButton;
		if (value == L"Key::RButton") return Key::RButton;
		if (value == L"Key::Cancel") return Key::Cancel;
		if (value == L"Key::MButton") return Key::MButton;
		if (value == L"Key::XButton1") return Key::XButton1;
		if (value == L"Key::XButton2") return Key::XButton2;
		if (value == L"Key::Backspace") return Key::Backspace;
		if (value == L"Key::Tab") return Key::Tab;
		if (value == L"Key::Clear") return Key::Clear;
		if (value == L"Key::Return") return Key::Return;
		if (value == L"Key::Shift") return Key::Shift;
		if (value == L"Key::Control") return Key::Control;
		if (value == L"Key::Menu") return Key::Menu;
		if (value == L"Key::Pause") return Key::Pause;
		if (value == L"Key::CapsLock") return Key::CapsLock;
		if (value == L"Key::Kana") return Key::Kana;
		if (value == L"Key::Junja") return Key::Junja;
		if (value == L"Key::Final") return Key::Final;
		if (value == L"Key::Hanja") return Key::Hanja;
		if (value == L"Key::Escape") return Key::Escape;
		if (value == L"Key::Convert") return Key::Convert;
		if (value == L"Key::NonConvert") return Key::NonConvert;
		if (value == L"Key::Accept") return Key::Accept;
		if (value == L"Key::ModeChange") return Key::ModeChange;
		if (value == L"Key::Space") return Key::Space;
		if (value == L"Key::Prior") return Key::Prior;
		if (value == L"Key::Next") return Key::Next;
		if (value == L"Key::End") return Key::End;
		if (value == L"Key::Home") return Key::Home;
		if (value == L"Key::Left") return Key::Left;
		if (value == L"Key::Up") return Key::Up;
		if (value == L"Key::Right") return Key::Right;
		if (value == L"Key::Down") return Key::Down;
		if (value == L"Key::Select") return Key::Select;
		if (value == L"Key::Print") return Key::Print;
		if (value == L"Key::Execute") return Key::Execute;
		if (value == L"Key::Snapshot") return Key::Snapshot;
		if (value == L"Key::Insert") return Key::Insert;
		if (value == L"Key::Delete") return Key::Delete;
		if (value == L"Key::Help") return Key::Help;
		if (value == L"Key::Key0") return Key::Key0;
		if (value == L"Key::Key1") return Key::Key1;
		if (value == L"Key::Key2") return Key::Key2;
		if (value == L"Key::Key3") return Key::Key3;
		if (value == L"Key::Key4") return Key::Key4;
		if (value == L"Key::Key5") return Key::Key5;
		if (value == L"Key::Key6") return Key::Key6;
		if (value == L"Key::Key7") return Key::Key7;
		if (value == L"Key::Key8") return Key::Key8;
		if (value == L"Key::Key9") return Key::Key9;
		if (value == L"Key::A") return Key::A;
		if (value == L"Key::B") return Key::B;
		if (value == L"Key::C") return Key::C;
		if (value == L"Key::D") return Key::D;
		if (value == L"Key::E") return Key::E;
		if (value == L"Key::F") return Key::F;
		if (value == L"Key::G") return Key::G;
		if (value == L"Key::H") return Key::H;
		if (value == L"Key::I") return Key::I;
		if (value == L"Key::J") return Key::J;
		if (value == L"Key::K") return Key::K;
		if (value == L"Key::L") return Key::L;
		if (value == L"Key::M") return Key::M;
		if (value == L"Key::N") return Key::N;
		if (value == L"Key::O") return Key::O;
		if (value == L"Key::P") return Key::P;
		if (value == L"Key::Q") return Key::Q;
		if (value == L"Key::R") return Key::R;
		if (value == L"Key::S") return Key::S;
		if (value == L"Key::T") return Key::T;
		if (value == L"Key::U") return Key::U;
		if (value == L"Key::V") return Key::V;
		if (value == L"Key::W") return Key::W;
		if (value == L"Key::X") return Key::X;
		if (value == L"Key::Y") return Key::Y;
		if (value == L"Key::Z") return Key::Z;
		if (value == L"Key::LWin") return Key::LWin;
		if (value == L"Key::RWin") return Key::RWin;
		if (value == L"Key::Apps") return Key::Apps;
		if (value == L"Key::Sleep") return Key::Sleep;
		if (value == L"Key::Numpad0") return Key::Numpad0;
		if (value == L"Key::Numpad1") return Key::Numpad1;
		if (value == L"Key::Numpad2") return Key::Numpad2;
		if (value == L"Key::Numpad3") return Key::Numpad3;
		if (value == L"Key::Numpad4") return Key::Numpad4;
		if (value == L"Key::Numpad5") return Key::Numpad5;
		if (value == L"Key::Numpad6") return Key::Numpad6;
		if (value == L"Key::Numpad7") return Key::Numpad7;
		if (value == L"Key::Numpad8") return Key::Numpad8;
		if (value == L"Key::Numpad9") return Key::Numpad9;
		if (value == L"Key::Multiply") return Key::Multiply;
		if (value == L"Key::Add") return Key::Add;
		if (value == L"Key::Separator") return Key::Separator;
		if (value == L"Key::Subtract") return Key::Subtract;
		if (value == L"Key::Decimal") return Key::Decimal;
		if (value == L"Key::Divide") return Key::Divide;
		if (value == L"Key::F1") return Key::F1;
		if (value == L"Key::F2") return Key::F2;
		if (value == L"Key::F3") return Key::F3;
		if (value == L"Key::F4") return Key::F4;
		if (value == L"Key::F5") return Key::F5;
		if (value == L"Key::F6") return Key::F6;
		if (value == L"Key::F7") return Key::F7;
		if (value == L"Key::F8") return Key::F8;
		if (value == L"Key::F9") return Key::F9;
		if (value == L"Key::F10") return Key::F10;
		if (value == L"Key::F11") return Key::F11;
		if (value == L"Key::F12") return Key::F12;
		if (value == L"Key::F13") return Key::F13;
		if (value == L"Key::F14") return Key::F14;
		if (value == L"Key::F15") return Key::F15;
		if (value == L"Key::F16") return Key::F16;
		if (value == L"Key::F17") return Key::F17;
		if (value == L"Key::F18") return Key::F18;
		if (value == L"Key::F19") return Key::F19;
		if (value == L"Key::F20") return Key::F20;
		if (value == L"Key::F21") return Key::F21;
		if (value == L"Key::F22") return Key::F22;
		if (value == L"Key::F23") return Key::F23;
		if (value == L"Key::F24") return Key::F24;
		if (value == L"Key::NumLock") return Key::NumLock;
		if (value == L"Key::ScrollLock") return Key::ScrollLock;
		if (value == L"Key::LShift") return Key::LShift;
		if (value == L"Key::RShift") return Key::RShift;
		if (value == L"Key::LControl") return Key::LControl;
		if (value == L"Key::RControl") return Key::RControl;
		if (value == L"Key::LMenu") return Key::LMenu;
		if (value == L"Key::RMenu") return Key::RMenu;
		if (value == L"Key::BrowserBack") return Key::BrowserBack;
		if (value == L"Key::BrowserForward") return Key::BrowserForward;
		if (value == L"Key::BrowserRefresh") return Key::BrowserRefresh;
		if (value == L"Key::BrowserStop") return Key::BrowserStop;
		if (value == L"Key::BrowserSearch") return Key::BrowserSearch;
		if (value == L"Key::BrowserFavorites") return Key::BrowserFavorites;
		if (value == L"Key::BrowserHome") return Key::BrowserHome;
		if (value == L"Key::VolumeMute") return Key::VolumeMute;
		if (value == L"Key::VolumeDown") return Key::VolumeDown;
		if (value == L"Key::VolumeUp") return Key::VolumeUp;
		if (value == L"Key::MediaNextTrack") return Key::MediaNextTrack;
		if (value == L"Key::MediaPrevTrack") return Key::MediaPrevTrack;
		if (value == L"Key::MediaStop") return Key::MediaStop;
		if (value == L"Key::MediaPlayPause") return Key::MediaPlayPause;
		if (value == L"Key::LaunchMail") return Key::LaunchMail;
		if (value == L"Key::LaunchMediaSelect") return Key::LaunchMediaSelect;
		if (value == L"Key::LaunchApp1") return Key::LaunchApp1;
		if (value == L"Key::LaunchApp2") return Key::LaunchApp2;
		if (value == L"Key::Semicolon") return Key::Semicolon;
		if (value == L"Key::OemPlus") return Key::OemPlus;
		if (value == L"Key::OemComma") return Key::OemComma;
		if (value == L"Key::OemMinus") return Key::OemMinus;
		if (value == L"Key::OemPeriod") return Key::OemPeriod;
		if (value == L"Key::Slash") return Key::Slash;
		if (value == L"Key::Tilde") return Key::Tilde;
		if (value == L"Key::LeftBracket") return Key::LeftBracket;
		if (value == L"Key::BackSlash") return Key::BackSlash;
		if (value == L"Key::RightBracket") return Key::RightBracket;
		if (value == L"Key::Apostrophe") return Key::Apostrophe;
		if (value == L"Key::Oem8") return Key::Oem8;
		if (value == L"Key::Oem102") return Key::Oem102;
		if (value == L"Key::ProcessKey") return Key::ProcessKey;
		if (value == L"Key::Packet") return Key::Packet;
		if (value == L"Key::Attn") return Key::Attn;
		if (value == L"Key::CrSel") return Key::CrSel;
		if (value == L"Key::ExSel") return Key::ExSel;
		if (value == L"Key::ErEOF") return Key::ErEOF;
		if (value == L"Key::Play") return Key::Play;
		if (value == L"Key::Zoom") return Key::Zoom;
		if (value == L"Key::PA1") return Key::PA1;
		if (value == L"Key::OemClear") return Key::OemClear;
		return Key::Unknown;
	}
}