// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:29:14

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxFloatArrayProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxFloatArrayProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CDialogBoxFloatArrayProto : public IDialogBoxFloatArrayProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxFloatArrayProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxFloatArrayProto.cpp:
//         #include "DialogBoxFloatArrayProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CDialogBoxFloatArrayProto::CDialogBoxFloatArrayProto(): // Implement constructor of your widget
//                     IDialogBoxFloatArrayProto(L"DialogBoxFloatArrayProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxFloatArrayProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxFloatArrayProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/DialogBoxEx/DialogBoxEx.h"
#include "../../Controls/DialogBoxEx/DialogBoxExService.h"
#include "../../Controls/Edit/Edit.h"
#include "../../Controls/Label/Label.h"
#include "../../Controls/ListBox/CustomListBox.h"
#include "../../Controls/ListBox/ListBox.h"
#include "../../Controls/ListBox/ListBoxListItem.h"

namespace nitisa
{
	class IControl;
	class IDialogBoxService;
	class IForm;
	class IListItem;

	namespace standard
	{
		class IDialogBoxFloatArrayProto : public CDialogBoxEx
		{
		public:
			class IDialogBoxFloatArrayProtoService: public CDialogBoxExService
			{
			private:
				IDialogBoxFloatArrayProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
					}
				}

				void NotifyOnDetaching() override
				{
					CDialogBoxExService::NotifyOnDetaching();
				}

				IDialogBoxFloatArrayProtoService(IDialogBoxFloatArrayProto *control) : CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Controls
			CListBox *m_pListBoxArray;
			CButton *m_pButtonAdd;
			CButton *m_pButtonUpdate;
			CButton *m_pButtonDelete;
			CButton *m_pButtonClear;
			CLabel *m_pLabel1;
			CLabel *m_pLabelMinCount;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;
			CEdit *m_pEditValue;
			CLabel *m_pLabel2;
			CLabel *m_pLabel3;
			CLabel *m_pLabelMinValue;
			CLabel *m_pLabelMaxValue;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormFloatArrayProto_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void ListBoxArray_OnSelect(IControl *sender, IListItem *item) = 0;
			virtual void ButtonAdd_OnClick(IControl *sender) = 0;
			virtual void ButtonUpdate_OnClick(IControl *sender) = 0;
			virtual void ButtonDelete_OnClick(IControl *sender) = 0;
			virtual void ButtonClear_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pListBoxArray = new CListBox(this);
				m_pListBoxArray->setName(L"ListBoxArray");
				m_pButtonAdd = new CButton(this);
				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonUpdate = new CButton(this);
				m_pButtonUpdate->setName(L"ButtonUpdate");
				m_pButtonDelete = new CButton(this);
				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonClear = new CButton(this);
				m_pButtonClear->setName(L"ButtonClear");
				m_pLabel1 = new CLabel(this);
				m_pLabel1->setName(L"Label1");
				m_pLabelMinCount = new CLabel(this);
				m_pLabelMinCount->setName(L"LabelMinCount");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");
				m_pEditValue = new CEdit(this);
				m_pEditValue->setName(L"EditValue");
				m_pLabel2 = new CLabel(this);
				m_pLabel2->setName(L"Label2");
				m_pLabel3 = new CLabel(this);
				m_pLabel3->setName(L"Label3");
				m_pLabelMinValue = new CLabel(this);
				m_pLabelMinValue->setName(L"LabelMinValue");
				m_pLabelMaxValue = new CLabel(this);
				m_pLabelMaxValue->setName(L"LabelMaxValue");

				// Initialize controls
				m_pListBoxArray->setName(L"ListBoxArray");
				m_pListBoxArray->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pListBoxArray->setSize(PointF{ 177.0f, 313.0f });
				m_pListBoxArray->setTabOrder(1);
				m_pListBoxArray->setMultiselect(false);
				m_pListBoxArray->OnSelect = [](IControl *sender, IListItem *item)->void { parent<IDialogBoxFloatArrayProto*, false>(sender)->ListBoxArray_OnSelect(sender, item); };

				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonAdd->getTransform()->Translate(192.0f, 32.0f, 0.0f);
				m_pButtonAdd->setTabOrder(4);
				m_pButtonAdd->setCaption(UTF8ToString("Add"));
				m_pButtonAdd->OnClick = [](IControl *sender)->void { parent<IDialogBoxFloatArrayProto*, false>(sender)->ButtonAdd_OnClick(sender); };

				m_pButtonUpdate->setName(L"ButtonUpdate");
				m_pButtonUpdate->getTransform()->Translate(192.0f, 56.0f, 0.0f);
				m_pButtonUpdate->setTabOrder(5);
				m_pButtonUpdate->setEnabled(false);
				m_pButtonUpdate->setCaption(UTF8ToString("Update"));
				m_pButtonUpdate->OnClick = [](IControl *sender)->void { parent<IDialogBoxFloatArrayProto*, false>(sender)->ButtonUpdate_OnClick(sender); };

				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonDelete->getTransform()->Translate(192.0f, 88.0f, 0.0f);
				m_pButtonDelete->setTabOrder(6);
				m_pButtonDelete->setEnabled(false);
				m_pButtonDelete->setCaption(UTF8ToString("Delete"));
				m_pButtonDelete->OnClick = [](IControl *sender)->void { parent<IDialogBoxFloatArrayProto*, false>(sender)->ButtonDelete_OnClick(sender); };

				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonClear->getTransform()->Translate(192.0f, 112.0f, 0.0f);
				m_pButtonClear->setTabOrder(7);
				m_pButtonClear->setEnabled(false);
				m_pButtonClear->setCaption(UTF8ToString("Clear"));
				m_pButtonClear->OnClick = [](IControl *sender)->void { parent<IDialogBoxFloatArrayProto*, false>(sender)->ButtonClear_OnClick(sender); };

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(192.0f, 232.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("Min count:"));

				m_pLabelMinCount->setName(L"LabelMinCount");
				m_pLabelMinCount->getTransform()->Translate(256.0f, 232.0f, 0.0f);
				m_pLabelMinCount->setCaption(UTF8ToString("0"));

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(8.0f, 328.0f, 0.0f);
				m_pButtonOk->setTabOrder(8);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxFloatArrayProto*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(120.0f, 328.0f, 0.0f);
				m_pButtonCancel->setTabOrder(9);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxFloatArrayProto*, false>(sender)->ButtonCancel_OnClick(sender); };

				m_pEditValue->setName(L"EditValue");
				m_pEditValue->getTransform()->Translate(192.0f, 8.0f, 0.0f);
				m_pEditValue->setSize(PointF{ 104.0f, 21.0f });
				m_pEditValue->setTabOrder(2);
				m_pEditValue->setText(UTF8ToString("0.000000"));

				m_pLabel2->setName(L"Label2");
				m_pLabel2->getTransform()->Translate(192.0f, 256.0f, 0.0f);
				m_pLabel2->setCaption(UTF8ToString("Min value:"));

				m_pLabel3->setName(L"Label3");
				m_pLabel3->getTransform()->Translate(192.0f, 280.0f, 0.0f);
				m_pLabel3->setCaption(UTF8ToString("Max value:"));

				m_pLabelMinValue->setName(L"LabelMinValue");
				m_pLabelMinValue->getTransform()->Translate(256.0f, 256.0f, 0.0f);
				m_pLabelMinValue->setSize(PointF{ 42.0f, 13.0f });
				m_pLabelMinValue->setCaption(UTF8ToString(""));
				m_pLabelMinValue->setAutoSize(false);

				m_pLabelMaxValue->setName(L"LabelMaxValue");
				m_pLabelMaxValue->getTransform()->Translate(256.0f, 280.0f, 0.0f);
				m_pLabelMaxValue->setSize(PointF{ 42.0f, 13.0f });
				m_pLabelMaxValue->setCaption(UTF8ToString(""));
				m_pLabelMaxValue->setAutoSize(false);


			}

		public:
			IDialogBoxFloatArrayProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxFloatArrayProtoService(this)),
				m_pListBoxArray{ nullptr },
				m_pButtonAdd{ nullptr },
				m_pButtonUpdate{ nullptr },
				m_pButtonDelete{ nullptr },
				m_pButtonClear{ nullptr },
				m_pLabel1{ nullptr },
				m_pLabelMinCount{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr },
				m_pEditValue{ nullptr },
				m_pLabel2{ nullptr },
				m_pLabel3{ nullptr },
				m_pLabelMinValue{ nullptr },
				m_pLabelMaxValue{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxFloatArrayProto");
				setCaption(UTF8ToString("Manage float-array"));
				setClientSize(Point{ 305, 360 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
				OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxFloatArrayProto*>(sender)->FormFloatArrayProto_OnKeyUp(sender, m, processed); };
			}

			IComponent *getComponent(const String &name)
			{
				return nullptr;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"ListBoxArray" && m_pListBoxArray != exclude)
					return m_pListBoxArray;
				if (name == L"ButtonAdd" && m_pButtonAdd != exclude)
					return m_pButtonAdd;
				if (name == L"ButtonUpdate" && m_pButtonUpdate != exclude)
					return m_pButtonUpdate;
				if (name == L"ButtonDelete" && m_pButtonDelete != exclude)
					return m_pButtonDelete;
				if (name == L"ButtonClear" && m_pButtonClear != exclude)
					return m_pButtonClear;
				if (name == L"Label1" && m_pLabel1 != exclude)
					return m_pLabel1;
				if (name == L"LabelMinCount" && m_pLabelMinCount != exclude)
					return m_pLabelMinCount;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				if (name == L"EditValue" && m_pEditValue != exclude)
					return m_pEditValue;
				if (name == L"Label2" && m_pLabel2 != exclude)
					return m_pLabel2;
				if (name == L"Label3" && m_pLabel3 != exclude)
					return m_pLabel3;
				if (name == L"LabelMinValue" && m_pLabelMinValue != exclude)
					return m_pLabelMinValue;
				if (name == L"LabelMaxValue" && m_pLabelMaxValue != exclude)
					return m_pLabelMaxValue;
				return nullptr;
			}

		};
	}
}

