// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:30:03

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxImageListProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxImageListProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CDialogBoxImageListProto : public IDialogBoxImageListProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxImageListProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxImageListProto.cpp:
//         #include "DialogBoxImageListProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CDialogBoxImageListProto::CDialogBoxImageListProto(): // Implement constructor of your widget
//                     IDialogBoxImageListProto(L"DialogBoxImageListProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxImageListProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxImageListProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Components/ImageList/ImageList.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/Container/Container.h"
#include "../../Controls/DialogBoxEx/DialogBoxEx.h"
#include "../../Controls/DialogBoxEx/DialogBoxExService.h"
#include "../../Controls/ImageListEditor/ImageListEditor.h"

namespace nitisa
{
	class IControl;
	class IDialogBoxService;
	class IImageList;

	namespace standard
	{
		class IDialogBoxImageListProto : public CDialogBoxEx
		{
		public:
			class IDialogBoxImageListProtoService: public CDialogBoxExService
			{
			private:
				IDialogBoxImageListProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
						m_pControl->m_pImageList->setForm(m_pControl->getForm());
					}
				}

				void NotifyOnDetaching() override
				{
					CDialogBoxExService::NotifyOnDetaching();
					m_pControl->m_pImageList->setForm(nullptr);
				}

				IDialogBoxImageListProtoService(IDialogBoxImageListProto *control) : CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Components
			CImageList *m_pImageList;

			// Controls
			CContainer *m_pContainerButtons;
			CButton *m_pButtonAdd;
			CButton *m_pButtonDelete;
			CButton *m_pButtonClear;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;
			CImageListEditor *m_pImageListEditor;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void ButtonAdd_OnClick(IControl *sender) = 0;
			virtual void ButtonDelete_OnClick(IControl *sender) = 0;
			virtual void ButtonClear_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create components
				m_pImageList = new CImageList();
				m_pImageList->setName(L"ImageList");

				// Create controls
				m_pContainerButtons = new CContainer(this);
				m_pContainerButtons->setName(L"ContainerButtons");
				m_pButtonAdd = new CButton(m_pContainerButtons);
				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonDelete = new CButton(m_pContainerButtons);
				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonClear = new CButton(m_pContainerButtons);
				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonOk = new CButton(m_pContainerButtons);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(m_pContainerButtons);
				m_pButtonCancel->setName(L"ButtonCancel");
				m_pImageListEditor = new CImageListEditor(this);
				m_pImageListEditor->setName(L"ImageListEditor");

				// Initialize components
				m_pImageList->setName(L"ImageList");

				// Initialize controls
				m_pContainerButtons->setName(L"ContainerButtons");
				m_pContainerButtons->getTransform()->Translate(0.0f, 111.0f, 0.0f);
				m_pContainerButtons->setSize(PointF{ 372.0f, 39.0f });
				m_pContainerButtons->setAlign(Align::Bottom);
				m_pContainerButtons->setUseMask(false);

				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonAdd->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pButtonAdd->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonAdd->setTabOrder(2);
				m_pButtonAdd->setCaption(UTF8ToString("Add..."));
				m_pButtonAdd->OnClick = [](IControl *sender)->void { parent<IDialogBoxImageListProto*, false>(sender)->ButtonAdd_OnClick(sender); };

				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonDelete->getTransform()->Translate(80.0f, 8.0f, 0.0f);
				m_pButtonDelete->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonDelete->setTabOrder(3);
				m_pButtonDelete->setCaption(UTF8ToString("Delete"));
				m_pButtonDelete->OnClick = [](IControl *sender)->void { parent<IDialogBoxImageListProto*, false>(sender)->ButtonDelete_OnClick(sender); };

				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonClear->getTransform()->Translate(152.0f, 8.0f, 0.0f);
				m_pButtonClear->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonClear->setTabOrder(4);
				m_pButtonClear->setCaption(UTF8ToString("Clear"));
				m_pButtonClear->OnClick = [](IControl *sender)->void { parent<IDialogBoxImageListProto*, false>(sender)->ButtonClear_OnClick(sender); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(224.0f, 8.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(5);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxImageListProto*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(296.0f, 8.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(6);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxImageListProto*, false>(sender)->ButtonCancel_OnClick(sender); };

				m_pImageListEditor->setName(L"ImageListEditor");
				m_pImageListEditor->setSize(PointF{ 372.0f, 111.0f });
				m_pImageListEditor->setAlign(Align::Client);
				m_pImageListEditor->setImageList(cast<IImageList*>(getComponent(L"ImageList")));


			}

		public:
			IDialogBoxImageListProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxImageListProtoService(this)),
				m_pImageList{ nullptr },
				m_pContainerButtons{ nullptr },
				m_pButtonAdd{ nullptr },
				m_pButtonDelete{ nullptr },
				m_pButtonClear{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr },
				m_pImageListEditor{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxImageListProto");
				setCaption(UTF8ToString("Image List"));
				setClientSize(Point{ 372, 150 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				Initialize();
			}

			~IDialogBoxImageListProto() override
			{
				m_pImageList->Release();
			}

			IComponent *getComponent(const String &name)
			{
				if (name == L"ImageList")
					return m_pImageList;
				return nullptr;
			}

			bool hasComponent(IComponent *component) override
			{
				if (component == m_pImageList)
					return true;
				return false;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"ContainerButtons" && m_pContainerButtons != exclude)
					return m_pContainerButtons;
				if (name == L"ButtonAdd" && m_pButtonAdd != exclude)
					return m_pButtonAdd;
				if (name == L"ButtonDelete" && m_pButtonDelete != exclude)
					return m_pButtonDelete;
				if (name == L"ButtonClear" && m_pButtonClear != exclude)
					return m_pButtonClear;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				if (name == L"ImageListEditor" && m_pImageListEditor != exclude)
					return m_pImageListEditor;
				return nullptr;
			}

		};
	}
}

