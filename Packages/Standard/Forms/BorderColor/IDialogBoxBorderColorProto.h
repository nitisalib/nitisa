// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:42:45

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxBorderColorProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxBorderColorProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CDialogBoxBorderColorProto : public IDialogBoxBorderColorProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxBorderColorProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxBorderColorProto.cpp:
//         #include "DialogBoxBorderColorProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CDialogBoxBorderColorProto::CDialogBoxBorderColorProto(): // Implement constructor of your widget
//                     IDialogBoxBorderColorProto(L"DialogBoxBorderColorProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxBorderColorProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxBorderColorProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Components/ColorDialog/ColorDialog.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/DialogBoxEx/DialogBoxEx.h"
#include "../../Controls/DialogBoxEx/DialogBoxExService.h"

namespace nitisa
{
	class IComponent;
	class IControl;
	class IDialogBoxService;
	class IForm;

	namespace standard
	{
		class IDialogBoxBorderColorProto : public CDialogBoxEx
		{
		public:
			class IDialogBoxBorderColorProtoService: public CDialogBoxExService
			{
			private:
				IDialogBoxBorderColorProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
						m_pControl->m_pColorDialog1->setForm(m_pControl->getForm());
					}
				}

				void NotifyOnDetaching() override
				{
					CDialogBoxExService::NotifyOnDetaching();
					m_pControl->m_pColorDialog1->setForm(nullptr);
				}

				IDialogBoxBorderColorProtoService(IDialogBoxBorderColorProto *control) : CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Components
			CColorDialog *m_pColorDialog1;

			// Controls
			CButton *m_pButtonLeft;
			CButton *m_pButtonTop;
			CButton *m_pButtonRight;
			CButton *m_pButtonBottom;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void DialogBoxBorderColorProto_OnPaint(IControl *sender, const MessagePaint &m, bool &draw_children) = 0;
			virtual void DialogBoxBorderColorProto_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void ColorDialog1_OnApply(IComponent *sender) = 0;
			virtual void ButtonLeft_OnClick(IControl *sender) = 0;
			virtual void ButtonTop_OnClick(IControl *sender) = 0;
			virtual void ButtonRight_OnClick(IControl *sender) = 0;
			virtual void ButtonBottom_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create components
				m_pColorDialog1 = new CColorDialog();
				m_pColorDialog1->setName(L"ColorDialog1");

				// Create controls
				m_pButtonLeft = new CButton(this);
				m_pButtonLeft->setName(L"ButtonLeft");
				m_pButtonTop = new CButton(this);
				m_pButtonTop->setName(L"ButtonTop");
				m_pButtonRight = new CButton(this);
				m_pButtonRight->setName(L"ButtonRight");
				m_pButtonBottom = new CButton(this);
				m_pButtonBottom->setName(L"ButtonBottom");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize components
				m_pColorDialog1->setName(L"ColorDialog1");
				m_pColorDialog1->setUseDialogBox(true);
				m_pColorDialog1->Tag = (void*)this;
				m_pColorDialog1->OnApply = [](IComponent *sender)->void { ((IDialogBoxBorderColorProto*)(void*)sender->Tag)->ColorDialog1_OnApply(sender); };

				// Initialize controls
				m_pButtonLeft->setName(L"ButtonLeft");
				m_pButtonLeft->getTransform()->Translate(11.0f, 36.0f, 0.0f);
				m_pButtonLeft->setSize(PointF{ 50.0f, 23.0f });
				m_pButtonLeft->setTabOrder(1);
				m_pButtonLeft->setCaption(UTF8ToString("Left"));
				m_pButtonLeft->OnClick = [](IControl *sender)->void { parent<IDialogBoxBorderColorProto*, false>(sender)->ButtonLeft_OnClick(sender); };

				m_pButtonTop->setName(L"ButtonTop");
				m_pButtonTop->getTransform()->Translate(108.0f, 11.0f, 0.0f);
				m_pButtonTop->setSize(PointF{ 50.0f, 23.0f });
				m_pButtonTop->setTabOrder(2);
				m_pButtonTop->setCaption(UTF8ToString("Top"));
				m_pButtonTop->OnClick = [](IControl *sender)->void { parent<IDialogBoxBorderColorProto*, false>(sender)->ButtonTop_OnClick(sender); };

				m_pButtonRight->setName(L"ButtonRight");
				m_pButtonRight->getTransform()->Translate(205.0f, 36.0f, 0.0f);
				m_pButtonRight->setSize(PointF{ 50.0f, 23.0f });
				m_pButtonRight->setTabOrder(3);
				m_pButtonRight->setCaption(UTF8ToString("Right"));
				m_pButtonRight->OnClick = [](IControl *sender)->void { parent<IDialogBoxBorderColorProto*, false>(sender)->ButtonRight_OnClick(sender); };

				m_pButtonBottom->setName(L"ButtonBottom");
				m_pButtonBottom->getTransform()->Translate(108.0f, 62.0f, 0.0f);
				m_pButtonBottom->setSize(PointF{ 50.0f, 23.0f });
				m_pButtonBottom->setTabOrder(4);
				m_pButtonBottom->setCaption(UTF8ToString("Bottom"));
				m_pButtonBottom->OnClick = [](IControl *sender)->void { parent<IDialogBoxBorderColorProto*, false>(sender)->ButtonBottom_OnClick(sender); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(63.0f, 92.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(5);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxBorderColorProto*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(135.0f, 92.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(6);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxBorderColorProto*, false>(sender)->ButtonCancel_OnClick(sender); };


			}

		public:
			IDialogBoxBorderColorProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxBorderColorProtoService(this)),
				m_pColorDialog1{ nullptr },
				m_pButtonLeft{ nullptr },
				m_pButtonTop{ nullptr },
				m_pButtonRight{ nullptr },
				m_pButtonBottom{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxBorderColorProto");
				setCaption(UTF8ToString("Border colors"));
				setClientSize(Point{ 266, 123 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
				OnPaint = [](IControl *sender, const MessagePaint &m, bool &draw_children)->void { cast<IDialogBoxBorderColorProto*>(sender)->DialogBoxBorderColorProto_OnPaint(sender, m, draw_children); };
				OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxBorderColorProto*>(sender)->DialogBoxBorderColorProto_OnKeyUp(sender, m, processed); };
			}

			~IDialogBoxBorderColorProto() override
			{
				m_pColorDialog1->Release();
			}

			IComponent *getComponent(const String &name)
			{
				if (name == L"ColorDialog1")
					return m_pColorDialog1;
				return nullptr;
			}

			bool hasComponent(IComponent *component) override
			{
				if (component == m_pColorDialog1)
					return true;
				return false;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"ButtonLeft" && m_pButtonLeft != exclude)
					return m_pButtonLeft;
				if (name == L"ButtonTop" && m_pButtonTop != exclude)
					return m_pButtonTop;
				if (name == L"ButtonRight" && m_pButtonRight != exclude)
					return m_pButtonRight;
				if (name == L"ButtonBottom" && m_pButtonBottom != exclude)
					return m_pButtonBottom;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				return nullptr;
			}

		};
	}
}

