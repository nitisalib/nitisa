// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:29:02

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxFindProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxFindProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CDialogBoxFindProto : public IDialogBoxFindProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxFindProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxFindProto.cpp:
//         #include "DialogBoxFindProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CDialogBoxFindProto::CDialogBoxFindProto(): // Implement constructor of your widget
//                     IDialogBoxFindProto(L"DialogBoxFindProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxFindProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxFindProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/CheckBox/CheckBox.h"
#include "../../Controls/DialogBoxEx/DialogBoxEx.h"
#include "../../Controls/DialogBoxEx/DialogBoxExService.h"
#include "../../Controls/Edit/Edit.h"
#include "../../Controls/GroupBox/GroupBox.h"
#include "../../Controls/Label/Label.h"
#include "../../Controls/RadioButton/RadioButton.h"

namespace nitisa
{
	class IControl;
	class IDialogBoxService;
	class IForm;

	namespace standard
	{
		class IDialogBoxFindProto : public CDialogBoxEx
		{
		public:
			class IDialogBoxFindProtoService: public CDialogBoxExService
			{
			private:
				IDialogBoxFindProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
					}
				}

				void NotifyOnDetaching() override
				{
					CDialogBoxExService::NotifyOnDetaching();
				}

				IDialogBoxFindProtoService(IDialogBoxFindProto *control) : CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Controls
			CLabel *m_pLabel1;
			CEdit *m_pEditText;
			CCheckBox *m_pCheckBoxWords;
			CCheckBox *m_pCheckBoxCase;
			CGroupBox *m_pGroupBox1;
			CRadioButton *m_pRadioButtonDown;
			CRadioButton *m_pRadioButtonUp;
			CButton *m_pButtonSearch;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormFindProto_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void EditText_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void EditText_OnChange(IControl *sender) = 0;
			virtual void ButtonSearch_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pLabel1 = new CLabel(this);
				m_pLabel1->setName(L"Label1");
				m_pEditText = new CEdit(this);
				m_pEditText->setName(L"EditText");
				m_pCheckBoxWords = new CCheckBox(this);
				m_pCheckBoxWords->setName(L"CheckBoxWords");
				m_pCheckBoxCase = new CCheckBox(this);
				m_pCheckBoxCase->setName(L"CheckBoxCase");
				m_pGroupBox1 = new CGroupBox(this);
				m_pGroupBox1->setName(L"GroupBox1");
				m_pRadioButtonDown = new CRadioButton(m_pGroupBox1);
				m_pRadioButtonDown->setName(L"RadioButtonDown");
				m_pRadioButtonUp = new CRadioButton(m_pGroupBox1);
				m_pRadioButtonUp->setName(L"RadioButtonUp");
				m_pButtonSearch = new CButton(this);
				m_pButtonSearch->setName(L"ButtonSearch");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(8.0f, 12.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("Find what:"));

				m_pEditText->setName(L"EditText");
				m_pEditText->getTransform()->Translate(104.0f, 8.0f, 0.0f);
				m_pEditText->setSize(PointF{ 352.0f, 21.0f });
				m_pEditText->setTabOrder(2);
				m_pEditText->setText(UTF8ToString(""));
				m_pEditText->OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { parent<IDialogBoxFindProto*, false>(sender)->EditText_OnKeyUp(sender, m, processed); };
				m_pEditText->OnChange = [](IControl *sender)->void { parent<IDialogBoxFindProto*, false>(sender)->EditText_OnChange(sender); };

				m_pCheckBoxWords->setName(L"CheckBoxWords");
				m_pCheckBoxWords->getTransform()->Translate(8.0f, 48.0f, 0.0f);
				m_pCheckBoxWords->setTabOrder(3);
				m_pCheckBoxWords->setCaption(UTF8ToString("Match whole words"));

				m_pCheckBoxCase->setName(L"CheckBoxCase");
				m_pCheckBoxCase->getTransform()->Translate(8.0f, 72.0f, 0.0f);
				m_pCheckBoxCase->setTabOrder(4);
				m_pCheckBoxCase->setCaption(UTF8ToString("Match case"));

				m_pGroupBox1->setName(L"GroupBox1");
				m_pGroupBox1->getTransform()->Translate(192.0f, 32.0f, 0.0f);
				m_pGroupBox1->setSize(PointF{ 265.0f, 57.0f });
				m_pGroupBox1->setCaption(UTF8ToString("Direction"));
				m_pGroupBox1->setUseMask(false);

				m_pRadioButtonDown->setName(L"RadioButtonDown");
				m_pRadioButtonDown->getTransform()->Translate(88.0f, 24.0f, 0.0f);
				m_pRadioButtonDown->setTabOrder(6);
				m_pRadioButtonDown->setCaption(UTF8ToString("Down"));
				m_pRadioButtonDown->setChecked(true);

				m_pRadioButtonUp->setName(L"RadioButtonUp");
				m_pRadioButtonUp->getTransform()->Translate(16.0f, 24.0f, 0.0f);
				m_pRadioButtonUp->setTabOrder(7);
				m_pRadioButtonUp->setCaption(UTF8ToString("Up"));

				m_pButtonSearch->setName(L"ButtonSearch");
				m_pButtonSearch->getTransform()->Translate(464.0f, 8.0f, 0.0f);
				m_pButtonSearch->setTabOrder(8);
				m_pButtonSearch->setEnabled(false);
				m_pButtonSearch->setCaption(UTF8ToString("Find next"));
				m_pButtonSearch->OnClick = [](IControl *sender)->void { parent<IDialogBoxFindProto*, false>(sender)->ButtonSearch_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(464.0f, 40.0f, 0.0f);
				m_pButtonCancel->setTabOrder(9);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxFindProto*, false>(sender)->ButtonCancel_OnClick(sender); };


			}

		public:
			IDialogBoxFindProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxFindProtoService(this)),
				m_pLabel1{ nullptr },
				m_pEditText{ nullptr },
				m_pCheckBoxWords{ nullptr },
				m_pCheckBoxCase{ nullptr },
				m_pGroupBox1{ nullptr },
				m_pRadioButtonDown{ nullptr },
				m_pRadioButtonUp{ nullptr },
				m_pButtonSearch{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxFindProto");
				setCaption(UTF8ToString("Find"));
				setClientSize(Point{ 576, 97 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
				OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxFindProto*>(sender)->FormFindProto_OnKeyUp(sender, m, processed); };
			}

			IComponent *getComponent(const String &name)
			{
				return nullptr;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"Label1" && m_pLabel1 != exclude)
					return m_pLabel1;
				if (name == L"EditText" && m_pEditText != exclude)
					return m_pEditText;
				if (name == L"CheckBoxWords" && m_pCheckBoxWords != exclude)
					return m_pCheckBoxWords;
				if (name == L"CheckBoxCase" && m_pCheckBoxCase != exclude)
					return m_pCheckBoxCase;
				if (name == L"GroupBox1" && m_pGroupBox1 != exclude)
					return m_pGroupBox1;
				if (name == L"RadioButtonDown" && m_pRadioButtonDown != exclude)
					return m_pRadioButtonDown;
				if (name == L"RadioButtonUp" && m_pRadioButtonUp != exclude)
					return m_pRadioButtonUp;
				if (name == L"ButtonSearch" && m_pButtonSearch != exclude)
					return m_pButtonSearch;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				return nullptr;
			}

		};
	}
}

