// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 14:49:41

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormMain.h:
//         #include "IFormMain.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace app
//             {
//                 class CFormMain : public IFormMain // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormMain(); // Declare constructor
//                 };
//             }
//         }
//
//     FormMain.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormMain.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace app
//             {
//                 CFormMain::CFormMain(): // Implement constructor of your form
//                     IFormMain(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormMain::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/DrawGrid/CustomDrawGrid.h"
#include "Standard/Controls/DrawGrid/CustomGrid.h"
#include "Standard/Controls/GroupBox/GroupBox.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/StringGrid/CustomStringGrid.h"
#include "Standard/Controls/StringGrid/StringGrid.h"

namespace nitisa
{
	class IControl;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace app
	{
		class IFormMain : public CForm
		{
		protected:
			// Controls
			standard::CGroupBox *m_pGroupBox1;
			standard::CStringGrid *m_pStringGridA;
			standard::CGroupBox *m_pGroupBox3;
			standard::CStringGrid *m_pStringGridB;
			standard::CButton *m_pButtonCalculate;
			standard::CGroupBox *m_pGroupBox4;
			standard::CStringGrid *m_pStringGridResult;
			standard::CLabel *m_pLabel1;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void ButtonCalculate_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pGroupBox1 = new standard::CGroupBox(this);
				m_pGroupBox1->setName(L"GroupBox1");
				m_pStringGridA = new standard::CStringGrid(m_pGroupBox1);
				m_pStringGridA->setName(L"StringGridA");
				m_pGroupBox3 = new standard::CGroupBox(this);
				m_pGroupBox3->setName(L"GroupBox3");
				m_pStringGridB = new standard::CStringGrid(m_pGroupBox3);
				m_pStringGridB->setName(L"StringGridB");
				m_pButtonCalculate = new standard::CButton(this);
				m_pButtonCalculate->setName(L"ButtonCalculate");
				m_pGroupBox4 = new standard::CGroupBox(this);
				m_pGroupBox4->setName(L"GroupBox4");
				m_pStringGridResult = new standard::CStringGrid(m_pGroupBox4);
				m_pStringGridResult->setName(L"StringGridResult");
				m_pLabel1 = new standard::CLabel(this);
				m_pLabel1->setName(L"Label1");

				// Initialize controls
				m_pGroupBox1->setName(L"GroupBox1");
				m_pGroupBox1->getTransform()->Translate(10.0f, 10.0f, 0.0f);
				m_pGroupBox1->setSize(PointF{ 272.0f, 122.0f });
				m_pGroupBox1->setCaption(UTF8ToString("Matrix A"));
				m_pGroupBox1->setUseMask(false);

				m_pStringGridA->setName(L"StringGridA");
				m_pStringGridA->getTransform()->Translate(5.0f, 15.0f, 0.0f);
				m_pStringGridA->setSize(PointF{ 262.0f, 102.0f });
				m_pStringGridA->setTabOrder(2);
				m_pStringGridA->setAlign(Align::Client);
				m_pStringGridA->setMultiselect(false);
				m_pStringGridA->setColumns(4);
				m_pStringGridA->setRows(4);
				m_pStringGridA->setFixedColumns(0);
				m_pStringGridA->setFixedRows(0);

				m_pGroupBox3->setName(L"GroupBox3");
				m_pGroupBox3->getTransform()->Translate(320.0f, 10.0f, 0.0f);
				m_pGroupBox3->setSize(PointF{ 272.0f, 122.0f });
				m_pGroupBox3->setCaption(UTF8ToString("Matrix B"));
				m_pGroupBox3->setUseMask(false);

				m_pStringGridB->setName(L"StringGridB");
				m_pStringGridB->getTransform()->Translate(5.0f, 15.0f, 0.0f);
				m_pStringGridB->setSize(PointF{ 262.0f, 102.0f });
				m_pStringGridB->setTabOrder(9);
				m_pStringGridB->setAlign(Align::Client);
				m_pStringGridB->setMultiselect(false);
				m_pStringGridB->setColumns(4);
				m_pStringGridB->setRows(4);
				m_pStringGridB->setFixedColumns(0);
				m_pStringGridB->setFixedRows(0);

				m_pButtonCalculate->setName(L"ButtonCalculate");
				m_pButtonCalculate->getTransform()->Translate(600.0f, 63.0f, 0.0f);
				m_pButtonCalculate->setSize(PointF{ 64.0f, 23.0f });
				m_pButtonCalculate->setTabOrder(10);
				m_pButtonCalculate->setCaption(UTF8ToString("="));
				m_pButtonCalculate->OnClick = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->ButtonCalculate_OnClick(sender); };

				m_pGroupBox4->setName(L"GroupBox4");
				m_pGroupBox4->getTransform()->Translate(674.0f, 10.0f, 0.0f);
				m_pGroupBox4->setSize(PointF{ 272.0f, 122.0f });
				m_pGroupBox4->setCaption(UTF8ToString("Result"));
				m_pGroupBox4->setUseMask(false);

				m_pStringGridResult->setName(L"StringGridResult");
				m_pStringGridResult->getTransform()->Translate(5.0f, 15.0f, 0.0f);
				m_pStringGridResult->setSize(PointF{ 262.0f, 102.0f });
				m_pStringGridResult->setTabOrder(12);
				m_pStringGridResult->setEnabled(false);
				m_pStringGridResult->setAlign(Align::Client);
				m_pStringGridResult->setColumns(4);
				m_pStringGridResult->setRows(4);
				m_pStringGridResult->setFixedColumns(0);
				m_pStringGridResult->setFixedRows(0);

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(300.0f, 70.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("*"));


			}

		public:
			IFormMain(IWindow *window, IRenderer *renderer, const String &class_name = L"FormMain", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pGroupBox1{ nullptr },
				m_pStringGridA{ nullptr },
				m_pGroupBox3{ nullptr },
				m_pStringGridB{ nullptr },
				m_pButtonCalculate{ nullptr },
				m_pGroupBox4{ nullptr },
				m_pStringGridResult{ nullptr },
				m_pLabel1{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormMain");
					setCaption(UTF8ToString("Matrix calculator"));
					setClientSize(Point{ 955, 142 });
					setWindowPosition(WindowPosition::ScreenCenter);
					setHasMaximizeBox(false);
					setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
				}
			}
		};
	}
}
