// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 14:45:49

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxProduct.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxProduct.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace app
//             {
//                 class CDialogBoxProduct : public IDialogBoxProduct // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxProduct(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxProduct.cpp:
//         #include "DialogBoxProduct.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace app
//             {
//                 CDialogBoxProduct::CDialogBoxProduct(): // Implement constructor of your widget
//                     IDialogBoxProduct(L"DialogBoxProduct", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxProduct::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxProduct::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/DialogBoxEx/DialogBoxEx.h"
#include "Standard/Controls/DialogBoxEx/DialogBoxExService.h"
#include "Standard/Controls/Edit/Edit.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/UpDown/UpDown.h"
#include "Standard/Controls/UpDownEx/UpDownEx.h"

namespace nitisa
{
	class IControl;
	class IDialogBoxService;

	namespace standard
	{
		class IEdit;
	}

	namespace app
	{
		class IDialogBoxProduct : public standard::CDialogBoxEx
		{
		public:
			class IDialogBoxProductService: public standard::CDialogBoxExService
			{
			private:
				IDialogBoxProduct *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					standard::CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
					}
				}

				void NotifyOnDetaching() override
				{
					standard::CDialogBoxExService::NotifyOnDetaching();
				}

				IDialogBoxProductService(IDialogBoxProduct *control) : standard::CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Controls
			standard::CLabel *m_pLabel1;
			standard::CLabel *m_pLabel2;
			standard::CLabel *m_pLabel3;
			standard::CEdit *m_pEditName;
			standard::CEdit *m_pEditPrice;
			standard::CEdit *m_pEditQuantity;
			standard::CUpDownEx *m_pUpDownExPrice;
			standard::CUpDown *m_pUpDownQuantity;
			standard::CButton *m_pButtonOk;
			standard::CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pLabel1 = new standard::CLabel(this);
				m_pLabel1->setName(L"Label1");
				m_pLabel2 = new standard::CLabel(this);
				m_pLabel2->setName(L"Label2");
				m_pLabel3 = new standard::CLabel(this);
				m_pLabel3->setName(L"Label3");
				m_pEditName = new standard::CEdit(this);
				m_pEditName->setName(L"EditName");
				m_pEditPrice = new standard::CEdit(this);
				m_pEditPrice->setName(L"EditPrice");
				m_pEditQuantity = new standard::CEdit(this);
				m_pEditQuantity->setName(L"EditQuantity");
				m_pUpDownExPrice = new standard::CUpDownEx(this);
				m_pUpDownExPrice->setName(L"UpDownExPrice");
				m_pUpDownQuantity = new standard::CUpDown(this);
				m_pUpDownQuantity->setName(L"UpDownQuantity");
				m_pButtonOk = new standard::CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new standard::CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(8.0f, 12.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("Name:"));

				m_pLabel2->setName(L"Label2");
				m_pLabel2->getTransform()->Translate(8.0f, 36.0f, 0.0f);
				m_pLabel2->setCaption(UTF8ToString("Price:"));

				m_pLabel3->setName(L"Label3");
				m_pLabel3->getTransform()->Translate(8.0f, 60.0f, 0.0f);
				m_pLabel3->setCaption(UTF8ToString("Quantity:"));

				m_pEditName->setName(L"EditName");
				m_pEditName->getTransform()->Translate(88.0f, 8.0f, 0.0f);
				m_pEditName->setSize(PointF{ 136.0f, 21.0f });
				m_pEditName->setTabOrder(4);
				m_pEditName->setText(UTF8ToString("Edit1"));

				m_pEditPrice->setName(L"EditPrice");
				m_pEditPrice->getTransform()->Translate(88.0f, 32.0f, 0.0f);
				m_pEditPrice->setTabOrder(5);
				m_pEditPrice->setText(UTF8ToString("1.00"));

				m_pEditQuantity->setName(L"EditQuantity");
				m_pEditQuantity->getTransform()->Translate(88.0f, 56.0f, 0.0f);
				m_pEditQuantity->setTabOrder(6);
				m_pEditQuantity->setText(UTF8ToString("0"));

				m_pUpDownExPrice->setName(L"UpDownExPrice");
				m_pUpDownExPrice->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownExPrice->setMax(1000.0f);
				m_pUpDownExPrice->setValue(1.0f);
				m_pUpDownExPrice->setStep(0.5f);
				m_pUpDownExPrice->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditPrice")));
				m_pUpDownExPrice->getTransform()->Translate(208.0f, 32.0f, 0.0f);
				m_pUpDownExPrice->setSigns(2);

				m_pUpDownQuantity->setName(L"UpDownQuantity");
				m_pUpDownQuantity->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownQuantity->setMax(1000);
				m_pUpDownQuantity->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditQuantity")));
				m_pUpDownQuantity->getTransform()->Translate(208.0f, 56.0f, 0.0f);

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(8.0f, 88.0f, 0.0f);
				m_pButtonOk->setTabOrder(9);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxProduct*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(120.0f, 88.0f, 0.0f);
				m_pButtonCancel->setTabOrder(10);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxProduct*, false>(sender)->ButtonCancel_OnClick(sender); };


			}

		public:
			IDialogBoxProduct(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				standard::CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxProductService(this)),
				m_pLabel1{ nullptr },
				m_pLabel2{ nullptr },
				m_pLabel3{ nullptr },
				m_pEditName{ nullptr },
				m_pEditPrice{ nullptr },
				m_pEditQuantity{ nullptr },
				m_pUpDownExPrice{ nullptr },
				m_pUpDownQuantity{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxProduct");
				setClientSize(Point{ 233, 119 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
			}

			IComponent *getComponent(const String &name)
			{
				return nullptr;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"Label1" && m_pLabel1 != exclude)
					return m_pLabel1;
				if (name == L"Label2" && m_pLabel2 != exclude)
					return m_pLabel2;
				if (name == L"Label3" && m_pLabel3 != exclude)
					return m_pLabel3;
				if (name == L"EditName" && m_pEditName != exclude)
					return m_pEditName;
				if (name == L"EditPrice" && m_pEditPrice != exclude)
					return m_pEditPrice;
				if (name == L"EditQuantity" && m_pEditQuantity != exclude)
					return m_pEditQuantity;
				if (name == L"UpDownExPrice" && m_pUpDownExPrice != exclude)
					return m_pUpDownExPrice;
				if (name == L"UpDownQuantity" && m_pUpDownQuantity != exclude)
					return m_pUpDownQuantity;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				return nullptr;
			}

		};
	}
}

