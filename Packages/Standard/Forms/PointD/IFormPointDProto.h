// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:35:28

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormPointDProto.h:
//         #include "IFormPointDProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CFormPointDProto : public IFormPointDProto // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormPointDProto(); // Declare constructor
//                 };
//             }
//         }
//
//     FormPointDProto.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormPointDProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CFormPointDProto::CFormPointDProto(): // Implement constructor of your form
//                     IFormPointDProto(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormPointDProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/Edit/Edit.h"
#include "../../Controls/Label/Label.h"

namespace nitisa
{
	class IControl;
	class IForm;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace standard
	{
		class IFormPointDProto : public CForm
		{
		protected:
			// Controls
			CLabel *m_pLabelX;
			CEdit *m_pEditX;
			CLabel *m_pLabelY;
			CEdit *m_pEditY;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormPointDProto_OnKeyUp(IForm *sender, const MessageKey &m) = 0;
			virtual void EditX_OnKillFocus(IControl *sender) = 0;
			virtual void EditY_OnKillFocus(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pLabelX = new CLabel(this);
				m_pLabelX->setName(L"LabelX");
				m_pEditX = new CEdit(this);
				m_pEditX->setName(L"EditX");
				m_pLabelY = new CLabel(this);
				m_pLabelY->setName(L"LabelY");
				m_pEditY = new CEdit(this);
				m_pEditY->setName(L"EditY");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pLabelX->setName(L"LabelX");
				m_pLabelX->getTransform()->Translate(8.0f, 12.0f, 0.0f);
				m_pLabelX->setCaption(UTF8ToString("X:"));

				m_pEditX->setName(L"EditX");
				m_pEditX->getTransform()->Translate(32.0f, 8.0f, 0.0f);
				m_pEditX->setSize(PointF{ 100.0f, 21.0f });
				m_pEditX->setTabOrder(2);
				m_pEditX->setText(UTF8ToString("0"));
				m_pEditX->OnKillFocus = [](IControl *sender)->void { cast<IFormPointDProto*>(sender->getForm())->EditX_OnKillFocus(sender); };

				m_pLabelY->setName(L"LabelY");
				m_pLabelY->getTransform()->Translate(136.0f, 12.0f, 0.0f);
				m_pLabelY->setCaption(UTF8ToString("Y:"));

				m_pEditY->setName(L"EditY");
				m_pEditY->getTransform()->Translate(160.0f, 8.0f, 0.0f);
				m_pEditY->setSize(PointF{ 100.0f, 21.0f });
				m_pEditY->setTabOrder(4);
				m_pEditY->setText(UTF8ToString("0"));
				m_pEditY->OnKillFocus = [](IControl *sender)->void { cast<IFormPointDProto*>(sender->getForm())->EditY_OnKillFocus(sender); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(64.0f, 32.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(5);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { cast<IFormPointDProto*>(sender->getForm())->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(136.0f, 32.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(6);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { cast<IFormPointDProto*>(sender->getForm())->ButtonCancel_OnClick(sender); };


			}

		public:
			IFormPointDProto(IWindow *window, IRenderer *renderer, const String &class_name = L"FormPointDProto", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pLabelX{ nullptr },
				m_pEditX{ nullptr },
				m_pLabelY{ nullptr },
				m_pEditY{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormPointDProto");
					setCaption(UTF8ToString("Point(double)"));
					setClientSize(Point{ 268, 63 });
					setState(WindowState::Hidden);
					setWindowPosition(WindowPosition::MainFormCenter);
					setHasMaximizeBox(false);
					setHasMinimizeBox(false);
					setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
					OnKeyUp = [](IForm *sender, const MessageKey &m)->void { cast<IFormPointDProto*>(sender)->FormPointDProto_OnKeyUp(sender, m); };
				}
			}
		};
	}
}
