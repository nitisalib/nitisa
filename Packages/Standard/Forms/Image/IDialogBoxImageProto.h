// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:29:55

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxImageProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxImageProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CDialogBoxImageProto : public IDialogBoxImageProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxImageProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxImageProto.cpp:
//         #include "DialogBoxImageProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CDialogBoxImageProto::CDialogBoxImageProto(): // Implement constructor of your widget
//                     IDialogBoxImageProto(L"DialogBoxImageProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxImageProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxImageProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/Font.h"
#include "Nitisa/Core/FontWeight.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TextAlign.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Image/Color.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/RectF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/Container/Container.h"
#include "../../Controls/DialogBoxEx/DialogBoxEx.h"
#include "../../Controls/DialogBoxEx/DialogBoxExService.h"
#include "../../Controls/Image/Image.h"
#include "../../Controls/Label/Label.h"
#include "../../Controls/Panel/Panel.h"
#include "../../Controls/ScrollBox/ScrollBox.h"

namespace nitisa
{
	class IControl;
	class IDialogBoxService;
	class IForm;

	namespace standard
	{
		class IDialogBoxImageProto : public CDialogBoxEx
		{
		public:
			class IDialogBoxImageProtoService: public CDialogBoxExService
			{
			private:
				IDialogBoxImageProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
					}
				}

				void NotifyOnDetaching() override
				{
					CDialogBoxExService::NotifyOnDetaching();
				}

				IDialogBoxImageProtoService(IDialogBoxImageProto *control) : CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Controls
			CPanel *m_pPanelWarning;
			CContainer *m_pContainer;
			CButton *m_pButtonLoad;
			CButton *m_pButtonClear;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;
			CLabel *m_pLabelSize;
			CScrollBox *m_pScrollBox;
			CImage *m_pImage;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormImageProto_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void ButtonLoad_OnClick(IControl *sender) = 0;
			virtual void ButtonClear_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pPanelWarning = new CPanel(this);
				m_pPanelWarning->setName(L"PanelWarning");
				m_pContainer = new CContainer(this);
				m_pContainer->setName(L"Container");
				m_pButtonLoad = new CButton(m_pContainer);
				m_pButtonLoad->setName(L"ButtonLoad");
				m_pButtonClear = new CButton(m_pContainer);
				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonOk = new CButton(m_pContainer);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(m_pContainer);
				m_pButtonCancel->setName(L"ButtonCancel");
				m_pLabelSize = new CLabel(m_pContainer);
				m_pLabelSize->setName(L"LabelSize");
				m_pScrollBox = new CScrollBox(this);
				m_pScrollBox->setName(L"ScrollBox");
				m_pImage = new CImage(m_pScrollBox);
				m_pImage->setName(L"Image");

				// Initialize controls
				m_pPanelWarning->setName(L"PanelWarning");
				{
					CFont font;
					font.setFontName(L"Tahoma");
					font.setHeight(-11);
					font.setWeight(FontWeight::Normal);
					font.setDistance(0.0f);
					font.setColor(Color{ 255, 0, 0, 255 });
					font.setShadowShift(PointF{ 0.0f, 0.0f });
					font.setShadowRadius(1);
					font.setShadowColor(Color{ 0, 0, 0, 0 });
					font.setItalic(false);
					font.setUnderline(false);
					font.setStrikeOut(false);
					font.setMonospace(false);
					m_pPanelWarning->setFont(&font);
				}
				m_pPanelWarning->getTransform()->Translate(0.0f, 376.0f, 0.0f);
				m_pPanelWarning->setSize(PointF{ 600.0f, 24.0f });
				m_pPanelWarning->setUseParentFont(false);
				m_pPanelWarning->setAlign(Align::Bottom);
				m_pPanelWarning->setCaption(UTF8ToString("If you add big image, the form save and load time will take awhile!"));
				m_pPanelWarning->setCaptionHorizontalAlign(TextAlign::Left);
				m_pPanelWarning->setOuterBevelWidth(RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pPanelWarning->setInnerBevelWidth(RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pPanelWarning->setPadding(RectF{ 4.0f, 0.0f, 0.0f, 0.0f });
				m_pPanelWarning->setBackgroundColor(Color{ 0, 0, 0, 0 });
				m_pPanelWarning->setUseMask(false);

				m_pContainer->setName(L"Container");
				m_pContainer->getTransform()->Translate(516.0f, 0.0f, 0.0f);
				m_pContainer->setSize(PointF{ 84.0f, 376.0f });
				m_pContainer->setAlign(Align::Right);
				m_pContainer->setUseMask(false);

				m_pButtonLoad->setName(L"ButtonLoad");
				m_pButtonLoad->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pButtonLoad->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonLoad->setTabOrder(5);
				m_pButtonLoad->setCaption(UTF8ToString("Load..."));
				m_pButtonLoad->OnClick = [](IControl *sender)->void { parent<IDialogBoxImageProto*, false>(sender)->ButtonLoad_OnClick(sender); };

				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonClear->getTransform()->Translate(8.0f, 35.0f, 0.0f);
				m_pButtonClear->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonClear->setTabOrder(6);
				m_pButtonClear->setCaption(UTF8ToString("Clear"));
				m_pButtonClear->OnClick = [](IControl *sender)->void { parent<IDialogBoxImageProto*, false>(sender)->ButtonClear_OnClick(sender); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(8.0f, 66.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(7);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxImageProto*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(8.0f, 93.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(8);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxImageProto*, false>(sender)->ButtonCancel_OnClick(sender); };

				m_pLabelSize->setName(L"LabelSize");
				m_pLabelSize->getTransform()->Translate(8.0f, 140.0f, 0.0f);
				m_pLabelSize->setSize(PointF{ 68.0f, 50.0f });
				m_pLabelSize->setCaption(UTF8ToString(""));
				m_pLabelSize->setMultiline(true);
				m_pLabelSize->setAutoSize(false);

				m_pScrollBox->setName(L"ScrollBox");
				m_pScrollBox->setSize(PointF{ 516.0f, 376.0f });
				m_pScrollBox->setAlign(Align::Client);

				m_pImage->setName(L"Image");
				m_pImage->setSize(PointF{ 0.0f, 0.0f });


			}

		public:
			IDialogBoxImageProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxImageProtoService(this)),
				m_pPanelWarning{ nullptr },
				m_pContainer{ nullptr },
				m_pButtonLoad{ nullptr },
				m_pButtonClear{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr },
				m_pLabelSize{ nullptr },
				m_pScrollBox{ nullptr },
				m_pImage{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxImageProto");
				setCaption(UTF8ToString("Image"));
				setClientSize(Point{ 600, 400 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				Initialize();
				OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxImageProto*>(sender)->FormImageProto_OnKeyUp(sender, m, processed); };
			}

			IComponent *getComponent(const String &name)
			{
				return nullptr;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"PanelWarning" && m_pPanelWarning != exclude)
					return m_pPanelWarning;
				if (name == L"Container" && m_pContainer != exclude)
					return m_pContainer;
				if (name == L"ButtonLoad" && m_pButtonLoad != exclude)
					return m_pButtonLoad;
				if (name == L"ButtonClear" && m_pButtonClear != exclude)
					return m_pButtonClear;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				if (name == L"LabelSize" && m_pLabelSize != exclude)
					return m_pLabelSize;
				if (name == L"ScrollBox" && m_pScrollBox != exclude)
					return m_pScrollBox;
				if (name == L"Image" && m_pImage != exclude)
					return m_pImage;
				return nullptr;
			}

		};
	}
}

