// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:28:35

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxColorProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxColorProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CDialogBoxColorProto : public IDialogBoxColorProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxColorProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxColorProto.cpp:
//         #include "DialogBoxColorProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CDialogBoxColorProto::CDialogBoxColorProto(): // Implement constructor of your widget
//                     IDialogBoxColorProto(L"DialogBoxColorProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxColorProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxColorProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/AlphaBar/AlphaBar.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/DialogBoxEx/DialogBoxEx.h"
#include "../../Controls/DialogBoxEx/DialogBoxExService.h"
#include "../../Controls/Edit/Edit.h"
#include "../../Controls/HSVBar/HSVBar.h"
#include "../../Controls/HSVPlane/HSVPlane.h"
#include "../../Controls/Label/Label.h"

namespace nitisa
{
	class IControl;
	class IDialogBoxService;
	class IForm;

	namespace standard
	{
		class IDialogBoxColorProto : public CDialogBoxEx
		{
		public:
			class IDialogBoxColorProtoService: public CDialogBoxExService
			{
			private:
				IDialogBoxColorProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
					}
				}

				void NotifyOnDetaching() override
				{
					CDialogBoxExService::NotifyOnDetaching();
				}

				IDialogBoxColorProtoService(IDialogBoxColorProto *control) : CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Controls
			CHSVPlane *m_pHSVPlane;
			CHSVBar *m_pHSVBar;
			CAlphaBar *m_pAlphaBar;
			CLabel *m_pLabelHue;
			CEdit *m_pEditHue;
			CLabel *m_pLabelSaturation;
			CEdit *m_pEditSaturation;
			CLabel *m_pLabelValue;
			CEdit *m_pEditValue;
			CLabel *m_pLabelR;
			CEdit *m_pEditR;
			CLabel *m_pLabelG;
			CEdit *m_pEditG;
			CLabel *m_pLabelB;
			CEdit *m_pEditB;
			CLabel *m_pLabelA;
			CEdit *m_pEditA;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormColorProto_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void HSVPlane_OnChange(IControl *sender) = 0;
			virtual void HSVBar_OnChange(IControl *sender) = 0;
			virtual void AlphaBar_OnChange(IControl *sender) = 0;
			virtual void EditHue_OnKillFocus(IControl *sender) = 0;
			virtual void EditHue_OnChange(IControl *sender) = 0;
			virtual void EditSaturation_OnKillFocus(IControl *sender) = 0;
			virtual void EditSaturation_OnChange(IControl *sender) = 0;
			virtual void EditValue_OnKillFocus(IControl *sender) = 0;
			virtual void EditValue_OnChange(IControl *sender) = 0;
			virtual void EditR_OnKillFocus(IControl *sender) = 0;
			virtual void EditR_OnChange(IControl *sender) = 0;
			virtual void EditG_OnKillFocus(IControl *sender) = 0;
			virtual void EditG_OnChange(IControl *sender) = 0;
			virtual void EditB_OnKillFocus(IControl *sender) = 0;
			virtual void EditB_OnChange(IControl *sender) = 0;
			virtual void EditA_OnKillFocus(IControl *sender) = 0;
			virtual void EditA_OnChange(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pHSVPlane = new CHSVPlane(this);
				m_pHSVPlane->setName(L"HSVPlane");
				m_pHSVBar = new CHSVBar(this);
				m_pHSVBar->setName(L"HSVBar");
				m_pAlphaBar = new CAlphaBar(this);
				m_pAlphaBar->setName(L"AlphaBar");
				m_pLabelHue = new CLabel(this);
				m_pLabelHue->setName(L"LabelHue");
				m_pEditHue = new CEdit(this);
				m_pEditHue->setName(L"EditHue");
				m_pLabelSaturation = new CLabel(this);
				m_pLabelSaturation->setName(L"LabelSaturation");
				m_pEditSaturation = new CEdit(this);
				m_pEditSaturation->setName(L"EditSaturation");
				m_pLabelValue = new CLabel(this);
				m_pLabelValue->setName(L"LabelValue");
				m_pEditValue = new CEdit(this);
				m_pEditValue->setName(L"EditValue");
				m_pLabelR = new CLabel(this);
				m_pLabelR->setName(L"LabelR");
				m_pEditR = new CEdit(this);
				m_pEditR->setName(L"EditR");
				m_pLabelG = new CLabel(this);
				m_pLabelG->setName(L"LabelG");
				m_pEditG = new CEdit(this);
				m_pEditG->setName(L"EditG");
				m_pLabelB = new CLabel(this);
				m_pLabelB->setName(L"LabelB");
				m_pEditB = new CEdit(this);
				m_pEditB->setName(L"EditB");
				m_pLabelA = new CLabel(this);
				m_pLabelA->setName(L"LabelA");
				m_pEditA = new CEdit(this);
				m_pEditA->setName(L"EditA");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pHSVPlane->setName(L"HSVPlane");
				m_pHSVPlane->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pHSVPlane->OnChange = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->HSVPlane_OnChange(sender); };

				m_pHSVBar->setName(L"HSVBar");
				m_pHSVBar->getTransform()->Translate(268.0f, 4.0f, 0.0f);
				m_pHSVBar->OnChange = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->HSVBar_OnChange(sender); };

				m_pAlphaBar->setName(L"AlphaBar");
				m_pAlphaBar->getTransform()->Translate(312.0f, 4.0f, 0.0f);
				m_pAlphaBar->OnChange = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->AlphaBar_OnChange(sender); };

				m_pLabelHue->setName(L"LabelHue");
				m_pLabelHue->getTransform()->Translate(356.0f, 12.0f, 0.0f);
				m_pLabelHue->setCaption(UTF8ToString("H:"));

				m_pEditHue->setName(L"EditHue");
				m_pEditHue->getTransform()->Translate(374.0f, 8.0f, 0.0f);
				m_pEditHue->setSize(PointF{ 50.0f, 21.0f });
				m_pEditHue->setTabOrder(5);
				m_pEditHue->setText(UTF8ToString("0"));
				m_pEditHue->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditHue_OnKillFocus(sender); };
				m_pEditHue->OnChange = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditHue_OnChange(sender); };

				m_pLabelSaturation->setName(L"LabelSaturation");
				m_pLabelSaturation->getTransform()->Translate(356.0f, 36.0f, 0.0f);
				m_pLabelSaturation->setCaption(UTF8ToString("S:"));

				m_pEditSaturation->setName(L"EditSaturation");
				m_pEditSaturation->getTransform()->Translate(374.0f, 32.0f, 0.0f);
				m_pEditSaturation->setSize(PointF{ 50.0f, 21.0f });
				m_pEditSaturation->setTabOrder(7);
				m_pEditSaturation->setText(UTF8ToString("0"));
				m_pEditSaturation->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditSaturation_OnKillFocus(sender); };
				m_pEditSaturation->OnChange = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditSaturation_OnChange(sender); };

				m_pLabelValue->setName(L"LabelValue");
				m_pLabelValue->getTransform()->Translate(356.0f, 60.0f, 0.0f);
				m_pLabelValue->setCaption(UTF8ToString("V:"));

				m_pEditValue->setName(L"EditValue");
				m_pEditValue->getTransform()->Translate(374.0f, 56.0f, 0.0f);
				m_pEditValue->setSize(PointF{ 50.0f, 21.0f });
				m_pEditValue->setTabOrder(9);
				m_pEditValue->setText(UTF8ToString("0"));
				m_pEditValue->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditValue_OnKillFocus(sender); };
				m_pEditValue->OnChange = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditValue_OnChange(sender); };

				m_pLabelR->setName(L"LabelR");
				m_pLabelR->getTransform()->Translate(356.0f, 110.0f, 0.0f);
				m_pLabelR->setCaption(UTF8ToString("R:"));

				m_pEditR->setName(L"EditR");
				m_pEditR->getTransform()->Translate(374.0f, 106.0f, 0.0f);
				m_pEditR->setSize(PointF{ 50.0f, 21.0f });
				m_pEditR->setTabOrder(11);
				m_pEditR->setText(UTF8ToString("0"));
				m_pEditR->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditR_OnKillFocus(sender); };
				m_pEditR->OnChange = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditR_OnChange(sender); };

				m_pLabelG->setName(L"LabelG");
				m_pLabelG->getTransform()->Translate(356.0f, 134.0f, 0.0f);
				m_pLabelG->setCaption(UTF8ToString("G:"));

				m_pEditG->setName(L"EditG");
				m_pEditG->getTransform()->Translate(374.0f, 130.0f, 0.0f);
				m_pEditG->setSize(PointF{ 50.0f, 21.0f });
				m_pEditG->setTabOrder(13);
				m_pEditG->setText(UTF8ToString("0"));
				m_pEditG->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditG_OnKillFocus(sender); };
				m_pEditG->OnChange = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditG_OnChange(sender); };

				m_pLabelB->setName(L"LabelB");
				m_pLabelB->getTransform()->Translate(356.0f, 158.0f, 0.0f);
				m_pLabelB->setCaption(UTF8ToString("B:"));

				m_pEditB->setName(L"EditB");
				m_pEditB->getTransform()->Translate(374.0f, 154.0f, 0.0f);
				m_pEditB->setSize(PointF{ 50.0f, 21.0f });
				m_pEditB->setTabOrder(15);
				m_pEditB->setText(UTF8ToString("0"));
				m_pEditB->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditB_OnKillFocus(sender); };
				m_pEditB->OnChange = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditB_OnChange(sender); };

				m_pLabelA->setName(L"LabelA");
				m_pLabelA->getTransform()->Translate(356.0f, 182.0f, 0.0f);
				m_pLabelA->setCaption(UTF8ToString("A:"));

				m_pEditA->setName(L"EditA");
				m_pEditA->getTransform()->Translate(374.0f, 178.0f, 0.0f);
				m_pEditA->setSize(PointF{ 50.0f, 21.0f });
				m_pEditA->setTabOrder(17);
				m_pEditA->setText(UTF8ToString("0"));
				m_pEditA->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditA_OnKillFocus(sender); };
				m_pEditA->OnChange = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->EditA_OnChange(sender); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(356.0f, 212.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(18);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(356.0f, 240.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(19);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxColorProto*, false>(sender)->ButtonCancel_OnClick(sender); };


			}

		public:
			IDialogBoxColorProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxColorProtoService(this)),
				m_pHSVPlane{ nullptr },
				m_pHSVBar{ nullptr },
				m_pAlphaBar{ nullptr },
				m_pLabelHue{ nullptr },
				m_pEditHue{ nullptr },
				m_pLabelSaturation{ nullptr },
				m_pEditSaturation{ nullptr },
				m_pLabelValue{ nullptr },
				m_pEditValue{ nullptr },
				m_pLabelR{ nullptr },
				m_pEditR{ nullptr },
				m_pLabelG{ nullptr },
				m_pEditG{ nullptr },
				m_pLabelB{ nullptr },
				m_pEditB{ nullptr },
				m_pLabelA{ nullptr },
				m_pEditA{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxColorProto");
				setCaption(UTF8ToString("Select Color"));
				setClientSize(Point{ 432, 272 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
				OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxColorProto*>(sender)->FormColorProto_OnKeyUp(sender, m, processed); };
			}

			IComponent *getComponent(const String &name)
			{
				return nullptr;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"HSVPlane" && m_pHSVPlane != exclude)
					return m_pHSVPlane;
				if (name == L"HSVBar" && m_pHSVBar != exclude)
					return m_pHSVBar;
				if (name == L"AlphaBar" && m_pAlphaBar != exclude)
					return m_pAlphaBar;
				if (name == L"LabelHue" && m_pLabelHue != exclude)
					return m_pLabelHue;
				if (name == L"EditHue" && m_pEditHue != exclude)
					return m_pEditHue;
				if (name == L"LabelSaturation" && m_pLabelSaturation != exclude)
					return m_pLabelSaturation;
				if (name == L"EditSaturation" && m_pEditSaturation != exclude)
					return m_pEditSaturation;
				if (name == L"LabelValue" && m_pLabelValue != exclude)
					return m_pLabelValue;
				if (name == L"EditValue" && m_pEditValue != exclude)
					return m_pEditValue;
				if (name == L"LabelR" && m_pLabelR != exclude)
					return m_pLabelR;
				if (name == L"EditR" && m_pEditR != exclude)
					return m_pEditR;
				if (name == L"LabelG" && m_pLabelG != exclude)
					return m_pLabelG;
				if (name == L"EditG" && m_pEditG != exclude)
					return m_pEditG;
				if (name == L"LabelB" && m_pLabelB != exclude)
					return m_pLabelB;
				if (name == L"EditB" && m_pEditB != exclude)
					return m_pEditB;
				if (name == L"LabelA" && m_pLabelA != exclude)
					return m_pLabelA;
				if (name == L"EditA" && m_pEditA != exclude)
					return m_pEditA;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				return nullptr;
			}

		};
	}
}

