// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 14:17:06

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormMain.h:
//         #include "IFormMain.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace app
//             {
//                 class CFormMain : public IFormMain // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormMain(); // Declare constructor
//                 };
//             }
//         }
//
//     FormMain.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormMain.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace app
//             {
//                 CFormMain::CFormMain(): // Implement constructor of your form
//                     IFormMain(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormMain::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Charts/Controls/BarChart/BarChart.h"
#include "Charts/Controls/SplineChart/SplineChart.h"
#include "Charts/Core/BarChartRenderer.h"
#include "Charts/Core/ChartDataSet.h"
#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Image/ColorArray.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/FloatArray.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointB.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/Container/Container.h"
#include "Standard/Controls/Edit/Edit.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/UpDown/UpDown.h"
#include "Standard/Controls/UpDownEx/UpDownEx.h"

namespace nitisa
{
	class IControl;

	namespace standard
	{
		class IEdit;
	}

	class IForm;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace app
	{
		class IFormMain : public CForm
		{
		protected:
			// Controls
			standard::CContainer *m_pContainer1;
			standard::CLabel *m_pLabel1;
			standard::CEdit *m_pEditPopulation;
			standard::CUpDown *m_pUpDownPopulation;
			standard::CLabel *m_pLabel2;
			standard::CEdit *m_pEditInfected;
			standard::CUpDown *m_pUpDownInfected;
			standard::CLabel *m_pLabel3;
			standard::CEdit *m_pEditInfectious;
			standard::CUpDownEx *m_pUpDownExInfectious;
			standard::CLabel *m_pLabel4;
			standard::CEdit *m_pEditDays;
			standard::CUpDown *m_pUpDownDays;
			standard::CButton *m_pButtonCalculate;
			standard::CLabel *m_pLabel5;
			standard::CEdit *m_pEditTotalCases;
			standard::CLabel *m_pLabel6;
			standard::CEdit *m_pEditMaxSick;
			standard::CLabel *m_pLabel7;
			standard::CEdit *m_pEditMaxDaily;
			charts::CSplineChart *m_pSplineChartMain;
			charts::CSplineChart *m_pSplineChartInfectious;
			charts::CBarChart *m_pBarChartCases;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormMain_OnResize(IForm *sender) = 0;
			virtual void ButtonCalculate_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pContainer1 = new standard::CContainer(this);
				m_pContainer1->setName(L"Container1");
				m_pLabel1 = new standard::CLabel(m_pContainer1);
				m_pLabel1->setName(L"Label1");
				m_pEditPopulation = new standard::CEdit(m_pContainer1);
				m_pEditPopulation->setName(L"EditPopulation");
				m_pUpDownPopulation = new standard::CUpDown(m_pContainer1);
				m_pUpDownPopulation->setName(L"UpDownPopulation");
				m_pLabel2 = new standard::CLabel(m_pContainer1);
				m_pLabel2->setName(L"Label2");
				m_pEditInfected = new standard::CEdit(m_pContainer1);
				m_pEditInfected->setName(L"EditInfected");
				m_pUpDownInfected = new standard::CUpDown(m_pContainer1);
				m_pUpDownInfected->setName(L"UpDownInfected");
				m_pLabel3 = new standard::CLabel(m_pContainer1);
				m_pLabel3->setName(L"Label3");
				m_pEditInfectious = new standard::CEdit(m_pContainer1);
				m_pEditInfectious->setName(L"EditInfectious");
				m_pUpDownExInfectious = new standard::CUpDownEx(m_pContainer1);
				m_pUpDownExInfectious->setName(L"UpDownExInfectious");
				m_pLabel4 = new standard::CLabel(m_pContainer1);
				m_pLabel4->setName(L"Label4");
				m_pEditDays = new standard::CEdit(m_pContainer1);
				m_pEditDays->setName(L"EditDays");
				m_pUpDownDays = new standard::CUpDown(m_pContainer1);
				m_pUpDownDays->setName(L"UpDownDays");
				m_pButtonCalculate = new standard::CButton(m_pContainer1);
				m_pButtonCalculate->setName(L"ButtonCalculate");
				m_pLabel5 = new standard::CLabel(m_pContainer1);
				m_pLabel5->setName(L"Label5");
				m_pEditTotalCases = new standard::CEdit(m_pContainer1);
				m_pEditTotalCases->setName(L"EditTotalCases");
				m_pLabel6 = new standard::CLabel(m_pContainer1);
				m_pLabel6->setName(L"Label6");
				m_pEditMaxSick = new standard::CEdit(m_pContainer1);
				m_pEditMaxSick->setName(L"EditMaxSick");
				m_pLabel7 = new standard::CLabel(m_pContainer1);
				m_pLabel7->setName(L"Label7");
				m_pEditMaxDaily = new standard::CEdit(m_pContainer1);
				m_pEditMaxDaily->setName(L"EditMaxDaily");
				m_pSplineChartMain = new charts::CSplineChart(this);
				m_pSplineChartMain->setName(L"SplineChartMain");
				m_pSplineChartInfectious = new charts::CSplineChart(this);
				m_pSplineChartInfectious->setName(L"SplineChartInfectious");
				m_pBarChartCases = new charts::CBarChart(this);
				m_pBarChartCases->setName(L"BarChartCases");

				// Initialize controls
				m_pContainer1->setName(L"Container1");
				m_pContainer1->getTransform()->Translate(651.0f, 0.0f, 0.0f);
				m_pContainer1->setSize(PointF{ 185.0f, 609.0f });
				m_pContainer1->setAlign(Align::Right);

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(10.0f, 14.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("Population:"));

				m_pEditPopulation->setName(L"EditPopulation");
				m_pEditPopulation->getTransform()->Translate(80.0f, 10.0f, 0.0f);
				m_pEditPopulation->setSize(PointF{ 80.0f, 21.0f });
				m_pEditPopulation->setTabOrder(3);
				m_pEditPopulation->setText(UTF8ToString("1000000"));

				m_pUpDownPopulation->setName(L"UpDownPopulation");
				m_pUpDownPopulation->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownPopulation->setMin(10000);
				m_pUpDownPopulation->setMax(50000000);
				m_pUpDownPopulation->setValue(1000000);
				m_pUpDownPopulation->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditPopulation")));
				m_pUpDownPopulation->getTransform()->Translate(160.0f, 10.0f, 0.0f);

				m_pLabel2->setName(L"Label2");
				m_pLabel2->getTransform()->Translate(10.0f, 44.0f, 0.0f);
				m_pLabel2->setCaption(UTF8ToString("Infected:"));

				m_pEditInfected->setName(L"EditInfected");
				m_pEditInfected->getTransform()->Translate(80.0f, 40.0f, 0.0f);
				m_pEditInfected->setSize(PointF{ 80.0f, 21.0f });
				m_pEditInfected->setTabOrder(6);
				m_pEditInfected->setText(UTF8ToString("1"));

				m_pUpDownInfected->setName(L"UpDownInfected");
				m_pUpDownInfected->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownInfected->setMin(1);
				m_pUpDownInfected->setMax(1000000);
				m_pUpDownInfected->setValue(1);
				m_pUpDownInfected->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditInfected")));
				m_pUpDownInfected->getTransform()->Translate(160.0f, 40.0f, 0.0f);

				m_pLabel3->setName(L"Label3");
				m_pLabel3->getTransform()->Translate(10.0f, 74.0f, 0.0f);
				m_pLabel3->setCaption(UTF8ToString("Infectious:"));

				m_pEditInfectious->setName(L"EditInfectious");
				m_pEditInfectious->getTransform()->Translate(80.0f, 70.0f, 0.0f);
				m_pEditInfectious->setSize(PointF{ 80.0f, 21.0f });
				m_pEditInfectious->setTabOrder(9);
				m_pEditInfectious->setText(UTF8ToString("3.00"));

				m_pUpDownExInfectious->setName(L"UpDownExInfectious");
				m_pUpDownExInfectious->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownExInfectious->setMin(1.0f);
				m_pUpDownExInfectious->setMax(10.0f);
				m_pUpDownExInfectious->setValue(3.0f);
				m_pUpDownExInfectious->setStep(0.01f);
				m_pUpDownExInfectious->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditInfectious")));
				m_pUpDownExInfectious->getTransform()->Translate(160.0f, 70.0f, 0.0f);
				m_pUpDownExInfectious->setSigns(2);

				m_pLabel4->setName(L"Label4");
				m_pLabel4->getTransform()->Translate(10.0f, 104.0f, 0.0f);
				m_pLabel4->setCaption(UTF8ToString("Days:"));

				m_pEditDays->setName(L"EditDays");
				m_pEditDays->getTransform()->Translate(80.0f, 100.0f, 0.0f);
				m_pEditDays->setSize(PointF{ 80.0f, 21.0f });
				m_pEditDays->setTabOrder(12);
				m_pEditDays->setText(UTF8ToString("180"));

				m_pUpDownDays->setName(L"UpDownDays");
				m_pUpDownDays->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownDays->setMin(10);
				m_pUpDownDays->setMax(3000);
				m_pUpDownDays->setValue(180);
				m_pUpDownDays->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditDays")));
				m_pUpDownDays->getTransform()->Translate(160.0f, 100.0f, 0.0f);

				m_pButtonCalculate->setName(L"ButtonCalculate");
				m_pButtonCalculate->getTransform()->Translate(10.0f, 160.0f, 0.0f);
				m_pButtonCalculate->setSize(PointF{ 167.0f, 23.0f });
				m_pButtonCalculate->setTabOrder(14);
				m_pButtonCalculate->setCaption(UTF8ToString("Calculate"));
				m_pButtonCalculate->OnClick = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->ButtonCalculate_OnClick(sender); };

				m_pLabel5->setName(L"Label5");
				m_pLabel5->getTransform()->Translate(10.0f, 224.0f, 0.0f);
				m_pLabel5->setCaption(UTF8ToString("Total cases:"));

				m_pEditTotalCases->setName(L"EditTotalCases");
				m_pEditTotalCases->getTransform()->Translate(80.0f, 220.0f, 0.0f);
				m_pEditTotalCases->setSize(PointF{ 100.0f, 21.0f });
				m_pEditTotalCases->setTabOrder(19);
				m_pEditTotalCases->setText(UTF8ToString(""));
				m_pEditTotalCases->setReadOnly(true);

				m_pLabel6->setName(L"Label6");
				m_pLabel6->getTransform()->Translate(10.0f, 254.0f, 0.0f);
				m_pLabel6->setCaption(UTF8ToString("Max sick:"));

				m_pEditMaxSick->setName(L"EditMaxSick");
				m_pEditMaxSick->getTransform()->Translate(80.0f, 250.0f, 0.0f);
				m_pEditMaxSick->setSize(PointF{ 100.0f, 21.0f });
				m_pEditMaxSick->setTabOrder(21);
				m_pEditMaxSick->setText(UTF8ToString(""));
				m_pEditMaxSick->setReadOnly(true);

				m_pLabel7->setName(L"Label7");
				m_pLabel7->getTransform()->Translate(10.0f, 284.0f, 0.0f);
				m_pLabel7->setCaption(UTF8ToString("Max daily:"));

				m_pEditMaxDaily->setName(L"EditMaxDaily");
				m_pEditMaxDaily->getTransform()->Translate(80.0f, 280.0f, 0.0f);
				m_pEditMaxDaily->setSize(PointF{ 100.0f, 21.0f });
				m_pEditMaxDaily->setTabOrder(23);
				m_pEditMaxDaily->setText(UTF8ToString(""));
				m_pEditMaxDaily->setReadOnly(true);

				m_pSplineChartMain->setName(L"SplineChartMain");
				m_pSplineChartMain->setSize(PointF{ 651.0f, 210.0f });
				m_pSplineChartMain->setAlign(Align::Top);
				{
					charts::CChartDataSet *dataset{ new charts::CChartDataSet() };
					m_pSplineChartMain->setDataSet(dataset, true);
				}
				m_pSplineChartMain->setLabelPadding(PointF{ 64.0f, 16.0f });
				m_pSplineChartMain->setChartNormalPointSizes(FloatArray{ 0.0f });
				m_pSplineChartMain->setChartActivePointSizes(FloatArray{ 0.0f });
				m_pSplineChartMain->setChartLineColors(ColorArray{ Color{ 128, 128, 128, 255 }, Color{ 255, 0, 0, 255 }, Color{ 0, 128, 0, 255 }, Color{ 88, 255, 196, 200 }, Color{ 220, 20, 60, 200 }, Color{ 160, 113, 255, 200 }, Color{ 205, 206, 210, 200 }, Color{ 255, 166, 77, 200 } });

				m_pSplineChartInfectious->setName(L"SplineChartInfectious");
				m_pSplineChartInfectious->getTransform()->Translate(0.0f, 399.0f, 0.0f);
				m_pSplineChartInfectious->setSize(PointF{ 651.0f, 210.0f });
				m_pSplineChartInfectious->setAlign(Align::Bottom);
				m_pSplineChartInfectious->setAutoRange(PointB{ true, false });
				{
					charts::CChartDataSet *dataset{ new charts::CChartDataSet() };
					m_pSplineChartInfectious->setDataSet(dataset, true);
				}
				m_pSplineChartInfectious->setLabelPadding(PointF{ 64.0f, 16.0f });
				m_pSplineChartInfectious->setLabelSigns(Point{ 0, 2 });
				m_pSplineChartInfectious->setChartNormalPointSizes(FloatArray{ 0.0f });
				m_pSplineChartInfectious->setChartActivePointSizes(FloatArray{ 0.0f });

				m_pBarChartCases->setName(L"BarChartCases");
				m_pBarChartCases->getTransform()->Translate(0.0f, 210.0f, 0.0f);
				m_pBarChartCases->setSize(PointF{ 651.0f, 189.0f });
				m_pBarChartCases->setAlign(Align::Client);
				{
					charts::CChartDataSet *dataset{ new charts::CChartDataSet() };
					m_pBarChartCases->setDataSet(dataset, true);
				}
				m_pBarChartCases->setLabelPadding(PointF{ 64.0f, 16.0f });
				m_pBarChartCases->setBorderWidth(charts::CBarChartRenderer::PointState::Normal, 1.0f);
				m_pBarChartCases->setBorderWidth(charts::CBarChartRenderer::PointState::Active, 1.0f);
				m_pBarChartCases->setBarWidth(3.0f);


			}

		public:
			IFormMain(IWindow *window, IRenderer *renderer, const String &class_name = L"FormMain", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pContainer1{ nullptr },
				m_pLabel1{ nullptr },
				m_pEditPopulation{ nullptr },
				m_pUpDownPopulation{ nullptr },
				m_pLabel2{ nullptr },
				m_pEditInfected{ nullptr },
				m_pUpDownInfected{ nullptr },
				m_pLabel3{ nullptr },
				m_pEditInfectious{ nullptr },
				m_pUpDownExInfectious{ nullptr },
				m_pLabel4{ nullptr },
				m_pEditDays{ nullptr },
				m_pUpDownDays{ nullptr },
				m_pButtonCalculate{ nullptr },
				m_pLabel5{ nullptr },
				m_pEditTotalCases{ nullptr },
				m_pLabel6{ nullptr },
				m_pEditMaxSick{ nullptr },
				m_pLabel7{ nullptr },
				m_pEditMaxDaily{ nullptr },
				m_pSplineChartMain{ nullptr },
				m_pSplineChartInfectious{ nullptr },
				m_pBarChartCases{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormMain");
					setCaption(UTF8ToString("COVID-19 modeling"));
					setClientSize(Point{ 836, 609 });
					setState(WindowState::Maximized);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
					OnResize = [](IForm *sender)->void { cast<IFormMain*>(sender)->FormMain_OnResize(sender); };
				}
			}
		};
	}
}
