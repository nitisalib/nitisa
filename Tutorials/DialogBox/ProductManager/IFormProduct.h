// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 14:45:53

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormProduct.h:
//         #include "IFormProduct.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace app
//             {
//                 class CFormProduct : public IFormProduct // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormProduct(); // Declare constructor
//                 };
//             }
//         }
//
//     FormProduct.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormProduct.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace app
//             {
//                 CFormProduct::CFormProduct(): // Implement constructor of your form
//                     IFormProduct(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormProduct::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/Edit/Edit.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/UpDown/UpDown.h"
#include "Standard/Controls/UpDownEx/UpDownEx.h"

namespace nitisa
{
	class IControl;

	namespace standard
	{
		class IEdit;
	}

	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace app
	{
		class IFormProduct : public CForm
		{
		protected:
			// Controls
			standard::CLabel *m_pLabel1;
			standard::CLabel *m_pLabel2;
			standard::CLabel *m_pLabel3;
			standard::CEdit *m_pEditName;
			standard::CEdit *m_pEditPrice;
			standard::CEdit *m_pEditQuantity;
			standard::CUpDownEx *m_pUpDownExPrice;
			standard::CUpDown *m_pUpDownQuantity;
			standard::CButton *m_pButtonOk;
			standard::CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pLabel1 = new standard::CLabel(this);
				m_pLabel1->setName(L"Label1");
				m_pLabel2 = new standard::CLabel(this);
				m_pLabel2->setName(L"Label2");
				m_pLabel3 = new standard::CLabel(this);
				m_pLabel3->setName(L"Label3");
				m_pEditName = new standard::CEdit(this);
				m_pEditName->setName(L"EditName");
				m_pEditPrice = new standard::CEdit(this);
				m_pEditPrice->setName(L"EditPrice");
				m_pEditQuantity = new standard::CEdit(this);
				m_pEditQuantity->setName(L"EditQuantity");
				m_pUpDownExPrice = new standard::CUpDownEx(this);
				m_pUpDownExPrice->setName(L"UpDownExPrice");
				m_pUpDownQuantity = new standard::CUpDown(this);
				m_pUpDownQuantity->setName(L"UpDownQuantity");
				m_pButtonOk = new standard::CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new standard::CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(8.0f, 12.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("Name:"));

				m_pLabel2->setName(L"Label2");
				m_pLabel2->getTransform()->Translate(8.0f, 36.0f, 0.0f);
				m_pLabel2->setCaption(UTF8ToString("Price:"));

				m_pLabel3->setName(L"Label3");
				m_pLabel3->getTransform()->Translate(8.0f, 60.0f, 0.0f);
				m_pLabel3->setCaption(UTF8ToString("Quantity:"));

				m_pEditName->setName(L"EditName");
				m_pEditName->getTransform()->Translate(88.0f, 8.0f, 0.0f);
				m_pEditName->setSize(PointF{ 136.0f, 21.0f });
				m_pEditName->setTabOrder(4);
				m_pEditName->setText(UTF8ToString("Edit1"));

				m_pEditPrice->setName(L"EditPrice");
				m_pEditPrice->getTransform()->Translate(88.0f, 32.0f, 0.0f);
				m_pEditPrice->setTabOrder(5);
				m_pEditPrice->setText(UTF8ToString("1.00"));

				m_pEditQuantity->setName(L"EditQuantity");
				m_pEditQuantity->getTransform()->Translate(88.0f, 56.0f, 0.0f);
				m_pEditQuantity->setTabOrder(6);
				m_pEditQuantity->setText(UTF8ToString("0"));

				m_pUpDownExPrice->setName(L"UpDownExPrice");
				m_pUpDownExPrice->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownExPrice->setMax(1000.0f);
				m_pUpDownExPrice->setValue(1.0f);
				m_pUpDownExPrice->setStep(0.5f);
				m_pUpDownExPrice->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditPrice")));
				m_pUpDownExPrice->getTransform()->Translate(208.0f, 32.0f, 0.0f);
				m_pUpDownExPrice->setSigns(2);

				m_pUpDownQuantity->setName(L"UpDownQuantity");
				m_pUpDownQuantity->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownQuantity->setMax(1000);
				m_pUpDownQuantity->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditQuantity")));
				m_pUpDownQuantity->getTransform()->Translate(208.0f, 56.0f, 0.0f);

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(8.0f, 88.0f, 0.0f);
				m_pButtonOk->setTabOrder(9);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { cast<IFormProduct*>(sender->getForm())->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(120.0f, 88.0f, 0.0f);
				m_pButtonCancel->setTabOrder(10);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { cast<IFormProduct*>(sender->getForm())->ButtonCancel_OnClick(sender); };


			}

		public:
			IFormProduct(IWindow *window, IRenderer *renderer, const String &class_name = L"FormProduct", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pLabel1{ nullptr },
				m_pLabel2{ nullptr },
				m_pLabel3{ nullptr },
				m_pEditName{ nullptr },
				m_pEditPrice{ nullptr },
				m_pEditQuantity{ nullptr },
				m_pUpDownExPrice{ nullptr },
				m_pUpDownQuantity{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
				setName(L"FormProduct");
				setClientSize(Point{ 233, 119 });
				setState(WindowState::Hidden);
				setWindowPosition(WindowPosition::MainFormCenter);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
				}
			}
		};
	}
}
