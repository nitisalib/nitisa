// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 11:28:56

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormLineInterpolationPositionArrayProto.h:
//         #include "IFormLineInterpolationPositionArrayProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace charts
//             {
//                 class CFormLineInterpolationPositionArrayProto : public IFormLineInterpolationPositionArrayProto // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormLineInterpolationPositionArrayProto(); // Declare constructor
//                 };
//             }
//         }
//
//     FormLineInterpolationPositionArrayProto.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormLineInterpolationPositionArrayProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace charts
//             {
//                 CFormLineInterpolationPositionArrayProto::CFormLineInterpolationPositionArrayProto(): // Implement constructor of your form
//                     IFormLineInterpolationPositionArrayProto(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormLineInterpolationPositionArrayProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/ListBox/CustomListBox.h"
#include "Standard/Controls/ListBox/ListBox.h"
#include "Standard/Controls/ListBox/ListBoxListItem.h"
#include "Standard/Controls/RadioButton/RadioButton.h"

namespace nitisa
{
	class IControl;
	class IForm;
	class IListItem;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace charts
	{
		class IFormLineInterpolationPositionArrayProto : public CForm
		{
		protected:
			// Controls
			standard::CListBox *m_pListBoxArray;
			standard::CRadioButton *m_pRadioButtonBefore;
			standard::CRadioButton *m_pRadioButtonMiddle;
			standard::CButton *m_pButtonAdd;
			standard::CButton *m_pButtonUpdate;
			standard::CButton *m_pButtonDelete;
			standard::CButton *m_pButtonClear;
			standard::CLabel *m_pLabel1;
			standard::CLabel *m_pLabelMinCount;
			standard::CButton *m_pButtonOk;
			standard::CButton *m_pButtonCancel;
			standard::CRadioButton *m_pRadioButtonAfter;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormLineInterpolationPositionArrayProto_OnKeyUp(IForm *sender, const MessageKey &m) = 0;
			virtual void ListBoxArray_OnSelect(IControl *sender, IListItem *item) = 0;
			virtual void ButtonAdd_OnClick(IControl *sender) = 0;
			virtual void ButtonUpdate_OnClick(IControl *sender) = 0;
			virtual void ButtonDelete_OnClick(IControl *sender) = 0;
			virtual void ButtonClear_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pListBoxArray = new standard::CListBox(this);
				m_pListBoxArray->setName(L"ListBoxArray");
				m_pRadioButtonBefore = new standard::CRadioButton(this);
				m_pRadioButtonBefore->setName(L"RadioButtonBefore");
				m_pRadioButtonMiddle = new standard::CRadioButton(this);
				m_pRadioButtonMiddle->setName(L"RadioButtonMiddle");
				m_pButtonAdd = new standard::CButton(this);
				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonUpdate = new standard::CButton(this);
				m_pButtonUpdate->setName(L"ButtonUpdate");
				m_pButtonDelete = new standard::CButton(this);
				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonClear = new standard::CButton(this);
				m_pButtonClear->setName(L"ButtonClear");
				m_pLabel1 = new standard::CLabel(this);
				m_pLabel1->setName(L"Label1");
				m_pLabelMinCount = new standard::CLabel(this);
				m_pLabelMinCount->setName(L"LabelMinCount");
				m_pButtonOk = new standard::CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new standard::CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");
				m_pRadioButtonAfter = new standard::CRadioButton(this);
				m_pRadioButtonAfter->setName(L"RadioButtonAfter");

				// Initialize controls
				m_pListBoxArray->setName(L"ListBoxArray");
				m_pListBoxArray->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pListBoxArray->setSize(PointF{ 177.0f, 313.0f });
				m_pListBoxArray->setTabOrder(1);
				m_pListBoxArray->setMultiselect(false);
				m_pListBoxArray->OnSelect = [](IControl *sender, IListItem *item)->void { cast<IFormLineInterpolationPositionArrayProto*>(sender->getForm())->ListBoxArray_OnSelect(sender, item); };

				m_pRadioButtonBefore->setName(L"RadioButtonBefore");
				m_pRadioButtonBefore->getTransform()->Translate(192.0f, 16.0f, 0.0f);
				m_pRadioButtonBefore->setTabOrder(2);
				m_pRadioButtonBefore->setCaption(UTF8ToString("Before"));
				m_pRadioButtonBefore->setChecked(true);

				m_pRadioButtonMiddle->setName(L"RadioButtonMiddle");
				m_pRadioButtonMiddle->getTransform()->Translate(248.0f, 16.0f, 0.0f);
				m_pRadioButtonMiddle->setTabOrder(3);
				m_pRadioButtonMiddle->setCaption(UTF8ToString("Middle"));

				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonAdd->getTransform()->Translate(240.0f, 40.0f, 0.0f);
				m_pButtonAdd->setTabOrder(4);
				m_pButtonAdd->setCaption(UTF8ToString("Add"));
				m_pButtonAdd->OnClick = [](IControl *sender)->void { cast<IFormLineInterpolationPositionArrayProto*>(sender->getForm())->ButtonAdd_OnClick(sender); };

				m_pButtonUpdate->setName(L"ButtonUpdate");
				m_pButtonUpdate->getTransform()->Translate(240.0f, 64.0f, 0.0f);
				m_pButtonUpdate->setTabOrder(5);
				m_pButtonUpdate->setEnabled(false);
				m_pButtonUpdate->setCaption(UTF8ToString("Update"));
				m_pButtonUpdate->OnClick = [](IControl *sender)->void { cast<IFormLineInterpolationPositionArrayProto*>(sender->getForm())->ButtonUpdate_OnClick(sender); };

				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonDelete->getTransform()->Translate(240.0f, 96.0f, 0.0f);
				m_pButtonDelete->setTabOrder(6);
				m_pButtonDelete->setEnabled(false);
				m_pButtonDelete->setCaption(UTF8ToString("Delete"));
				m_pButtonDelete->OnClick = [](IControl *sender)->void { cast<IFormLineInterpolationPositionArrayProto*>(sender->getForm())->ButtonDelete_OnClick(sender); };

				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonClear->getTransform()->Translate(240.0f, 120.0f, 0.0f);
				m_pButtonClear->setTabOrder(7);
				m_pButtonClear->setEnabled(false);
				m_pButtonClear->setCaption(UTF8ToString("Clear"));
				m_pButtonClear->OnClick = [](IControl *sender)->void { cast<IFormLineInterpolationPositionArrayProto*>(sender->getForm())->ButtonClear_OnClick(sender); };

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(192.0f, 304.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("Min count:"));

				m_pLabelMinCount->setName(L"LabelMinCount");
				m_pLabelMinCount->getTransform()->Translate(256.0f, 304.0f, 0.0f);
				m_pLabelMinCount->setCaption(UTF8ToString("0"));

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(8.0f, 328.0f, 0.0f);
				m_pButtonOk->setTabOrder(8);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { cast<IFormLineInterpolationPositionArrayProto*>(sender->getForm())->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(120.0f, 328.0f, 0.0f);
				m_pButtonCancel->setTabOrder(9);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { cast<IFormLineInterpolationPositionArrayProto*>(sender->getForm())->ButtonCancel_OnClick(sender); };

				m_pRadioButtonAfter->setName(L"RadioButtonAfter");
				m_pRadioButtonAfter->getTransform()->Translate(304.0f, 16.0f, 0.0f);
				m_pRadioButtonAfter->setTabOrder(12);
				m_pRadioButtonAfter->setCaption(UTF8ToString("After"));


			}

		public:
			IFormLineInterpolationPositionArrayProto(IWindow *window, IRenderer *renderer, const String &class_name = L"FormLineInterpolationPositionArrayProto", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pListBoxArray{ nullptr },
				m_pRadioButtonBefore{ nullptr },
				m_pRadioButtonMiddle{ nullptr },
				m_pButtonAdd{ nullptr },
				m_pButtonUpdate{ nullptr },
				m_pButtonDelete{ nullptr },
				m_pButtonClear{ nullptr },
				m_pLabel1{ nullptr },
				m_pLabelMinCount{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr },
				m_pRadioButtonAfter{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormLineInterpolationPositionArrayProto");
					setCaption(UTF8ToString("Manage line interpolation position array"));
					setClientSize(Point{ 353, 360 });
					setState(WindowState::Hidden);
					setWindowPosition(WindowPosition::MainFormCenter);
					setHasMaximizeBox(false);
					setHasMinimizeBox(false);
					setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
					OnKeyUp = [](IForm *sender, const MessageKey &m)->void { cast<IFormLineInterpolationPositionArrayProto*>(sender)->FormLineInterpolationPositionArrayProto_OnKeyUp(sender, m); };
				}
			}
		};
	}
}
