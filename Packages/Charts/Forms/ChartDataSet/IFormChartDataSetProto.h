// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 11:28:36

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormChartDataSetProto.h:
//         #include "IFormChartDataSetProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace charts
//             {
//                 class CFormChartDataSetProto : public IFormChartDataSetProto // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormChartDataSetProto(); // Declare constructor
//                 };
//             }
//         }
//
//     FormChartDataSetProto.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormChartDataSetProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace charts
//             {
//                 CFormChartDataSetProto::CFormChartDataSetProto(): // Implement constructor of your form
//                     IFormChartDataSetProto(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormChartDataSetProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/Edit/Edit.h"
#include "Standard/Controls/GroupBox/GroupBox.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/ListBox/CustomListBox.h"
#include "Standard/Controls/ListBox/ListBox.h"
#include "Standard/Controls/ListBox/ListBoxListItem.h"

namespace nitisa
{
	class IControl;
	class IListItem;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace charts
	{
		class IFormChartDataSetProto : public CForm
		{
		protected:
			// Controls
			standard::CGroupBox *m_pGroupBox1;
			standard::CButton *m_pButtonAddData;
			standard::CEdit *m_pEditDataName;
			standard::CButton *m_pButtonDeleteData;
			standard::CListBox *m_pListBoxDatas;
			standard::CButton *m_pButtonUpdateData;
			standard::CButton *m_pButtonClearDatas;
			standard::CGroupBox *m_pGroupBox2;
			standard::CListBox *m_pListBoxPoints;
			standard::CLabel *m_pLabel1;
			standard::CLabel *m_pLabel2;
			standard::CLabel *m_pLabel3;
			standard::CEdit *m_pEditX;
			standard::CEdit *m_pEditY;
			standard::CEdit *m_pEditLabel;
			standard::CButton *m_pButtonAddPoint;
			standard::CButton *m_pButtonUpdatePoint;
			standard::CButton *m_pButtonDeletePoint;
			standard::CButton *m_pButtonClearPoints;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void ButtonAddData_OnClick(IControl *sender) = 0;
			virtual void ButtonDeleteData_OnClick(IControl *sender) = 0;
			virtual void ListBoxDatas_OnSelect(IControl *sender, IListItem *item) = 0;
			virtual void ListBoxDatas_OnDeselect(IControl *sender, IListItem *item) = 0;
			virtual void ButtonUpdateData_OnClick(IControl *sender) = 0;
			virtual void ButtonClearDatas_OnClick(IControl *sender) = 0;
			virtual void ListBoxPoints_OnSelect(IControl *sender, IListItem *item) = 0;
			virtual void ListBoxPoints_OnDeselect(IControl *sender, IListItem *item) = 0;
			virtual void ButtonAddPoint_OnClick(IControl *sender) = 0;
			virtual void ButtonUpdatePoint_OnClick(IControl *sender) = 0;
			virtual void ButtonDeletePoint_OnClick(IControl *sender) = 0;
			virtual void ButtonClearPoints_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pGroupBox1 = new standard::CGroupBox(this);
				m_pGroupBox1->setName(L"GroupBox1");
				m_pButtonAddData = new standard::CButton(m_pGroupBox1);
				m_pButtonAddData->setName(L"ButtonAddData");
				m_pEditDataName = new standard::CEdit(m_pGroupBox1);
				m_pEditDataName->setName(L"EditDataName");
				m_pButtonDeleteData = new standard::CButton(m_pGroupBox1);
				m_pButtonDeleteData->setName(L"ButtonDeleteData");
				m_pListBoxDatas = new standard::CListBox(m_pGroupBox1);
				m_pListBoxDatas->setName(L"ListBoxDatas");
				m_pButtonUpdateData = new standard::CButton(m_pGroupBox1);
				m_pButtonUpdateData->setName(L"ButtonUpdateData");
				m_pButtonClearDatas = new standard::CButton(m_pGroupBox1);
				m_pButtonClearDatas->setName(L"ButtonClearDatas");
				m_pGroupBox2 = new standard::CGroupBox(this);
				m_pGroupBox2->setName(L"GroupBox2");
				m_pListBoxPoints = new standard::CListBox(m_pGroupBox2);
				m_pListBoxPoints->setName(L"ListBoxPoints");
				m_pLabel1 = new standard::CLabel(m_pGroupBox2);
				m_pLabel1->setName(L"Label1");
				m_pLabel2 = new standard::CLabel(m_pGroupBox2);
				m_pLabel2->setName(L"Label2");
				m_pLabel3 = new standard::CLabel(m_pGroupBox2);
				m_pLabel3->setName(L"Label3");
				m_pEditX = new standard::CEdit(m_pGroupBox2);
				m_pEditX->setName(L"EditX");
				m_pEditY = new standard::CEdit(m_pGroupBox2);
				m_pEditY->setName(L"EditY");
				m_pEditLabel = new standard::CEdit(m_pGroupBox2);
				m_pEditLabel->setName(L"EditLabel");
				m_pButtonAddPoint = new standard::CButton(m_pGroupBox2);
				m_pButtonAddPoint->setName(L"ButtonAddPoint");
				m_pButtonUpdatePoint = new standard::CButton(m_pGroupBox2);
				m_pButtonUpdatePoint->setName(L"ButtonUpdatePoint");
				m_pButtonDeletePoint = new standard::CButton(m_pGroupBox2);
				m_pButtonDeletePoint->setName(L"ButtonDeletePoint");
				m_pButtonClearPoints = new standard::CButton(m_pGroupBox2);
				m_pButtonClearPoints->setName(L"ButtonClearPoints");

				// Initialize controls
				m_pGroupBox1->setName(L"GroupBox1");
				m_pGroupBox1->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pGroupBox1->setSize(PointF{ 305.0f, 425.0f });
				m_pGroupBox1->setCaption(UTF8ToString("Datas"));
				m_pGroupBox1->setUseMask(false);

				m_pButtonAddData->setName(L"ButtonAddData");
				m_pButtonAddData->getTransform()->Translate(8.0f, 24.0f, 0.0f);
				m_pButtonAddData->setTabOrder(2);
				m_pButtonAddData->setEnabled(false);
				m_pButtonAddData->setCaption(UTF8ToString("Add"));
				m_pButtonAddData->OnClick = [](IControl *sender)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ButtonAddData_OnClick(sender); };

				m_pEditDataName->setName(L"EditDataName");
				m_pEditDataName->getTransform()->Translate(120.0f, 24.0f, 0.0f);
				m_pEditDataName->setSize(PointF{ 176.0f, 21.0f });
				m_pEditDataName->setTabOrder(3);
				m_pEditDataName->setEnabled(false);
				m_pEditDataName->setText(UTF8ToString("Data #1"));
				m_pEditDataName->setPlaceholder(UTF8ToString("Data name"));

				m_pButtonDeleteData->setName(L"ButtonDeleteData");
				m_pButtonDeleteData->getTransform()->Translate(8.0f, 80.0f, 0.0f);
				m_pButtonDeleteData->setTabOrder(4);
				m_pButtonDeleteData->setEnabled(false);
				m_pButtonDeleteData->setCaption(UTF8ToString("Delete"));
				m_pButtonDeleteData->OnClick = [](IControl *sender)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ButtonDeleteData_OnClick(sender); };

				m_pListBoxDatas->setName(L"ListBoxDatas");
				m_pListBoxDatas->getTransform()->Translate(120.0f, 48.0f, 0.0f);
				m_pListBoxDatas->setSize(PointF{ 177.0f, 369.0f });
				m_pListBoxDatas->setTabOrder(5);
				m_pListBoxDatas->setMultiselect(false);
				m_pListBoxDatas->OnSelect = [](IControl *sender, IListItem *item)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ListBoxDatas_OnSelect(sender, item); };
				m_pListBoxDatas->OnDeselect = [](IControl *sender, IListItem *item)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ListBoxDatas_OnDeselect(sender, item); };

				m_pButtonUpdateData->setName(L"ButtonUpdateData");
				m_pButtonUpdateData->getTransform()->Translate(8.0f, 48.0f, 0.0f);
				m_pButtonUpdateData->setTabOrder(6);
				m_pButtonUpdateData->setEnabled(false);
				m_pButtonUpdateData->setCaption(UTF8ToString("Update"));
				m_pButtonUpdateData->OnClick = [](IControl *sender)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ButtonUpdateData_OnClick(sender); };

				m_pButtonClearDatas->setName(L"ButtonClearDatas");
				m_pButtonClearDatas->getTransform()->Translate(8.0f, 104.0f, 0.0f);
				m_pButtonClearDatas->setTabOrder(18);
				m_pButtonClearDatas->setEnabled(false);
				m_pButtonClearDatas->setCaption(UTF8ToString("Clear"));
				m_pButtonClearDatas->OnClick = [](IControl *sender)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ButtonClearDatas_OnClick(sender); };

				m_pGroupBox2->setName(L"GroupBox2");
				m_pGroupBox2->getTransform()->Translate(320.0f, 8.0f, 0.0f);
				m_pGroupBox2->setSize(PointF{ 593.0f, 425.0f });
				m_pGroupBox2->setCaption(UTF8ToString("Points"));
				m_pGroupBox2->setUseMask(false);

				m_pListBoxPoints->setName(L"ListBoxPoints");
				m_pListBoxPoints->getTransform()->Translate(8.0f, 24.0f, 0.0f);
				m_pListBoxPoints->setSize(PointF{ 353.0f, 393.0f });
				m_pListBoxPoints->setTabOrder(8);
				m_pListBoxPoints->setMultiselect(false);
				m_pListBoxPoints->OnSelect = [](IControl *sender, IListItem *item)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ListBoxPoints_OnSelect(sender, item); };
				m_pListBoxPoints->OnDeselect = [](IControl *sender, IListItem *item)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ListBoxPoints_OnDeselect(sender, item); };

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(368.0f, 28.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("X:"));

				m_pLabel2->setName(L"Label2");
				m_pLabel2->getTransform()->Translate(368.0f, 52.0f, 0.0f);
				m_pLabel2->setCaption(UTF8ToString("Y:"));

				m_pLabel3->setName(L"Label3");
				m_pLabel3->getTransform()->Translate(368.0f, 76.0f, 0.0f);
				m_pLabel3->setCaption(UTF8ToString("Label:"));

				m_pEditX->setName(L"EditX");
				m_pEditX->getTransform()->Translate(408.0f, 24.0f, 0.0f);
				m_pEditX->setSize(PointF{ 176.0f, 21.0f });
				m_pEditX->setTabOrder(12);
				m_pEditX->setEnabled(false);
				m_pEditX->setText(UTF8ToString("0"));
				m_pEditX->setPlaceholder(UTF8ToString("X coordinate"));

				m_pEditY->setName(L"EditY");
				m_pEditY->getTransform()->Translate(408.0f, 48.0f, 0.0f);
				m_pEditY->setSize(PointF{ 176.0f, 21.0f });
				m_pEditY->setTabOrder(13);
				m_pEditY->setEnabled(false);
				m_pEditY->setText(UTF8ToString("0"));
				m_pEditY->setPlaceholder(UTF8ToString("Y coordinate"));

				m_pEditLabel->setName(L"EditLabel");
				m_pEditLabel->getTransform()->Translate(408.0f, 72.0f, 0.0f);
				m_pEditLabel->setSize(PointF{ 176.0f, 21.0f });
				m_pEditLabel->setTabOrder(14);
				m_pEditLabel->setEnabled(false);
				m_pEditLabel->setText(UTF8ToString("Item #0"));
				m_pEditLabel->setPlaceholder(UTF8ToString("Point label"));

				m_pButtonAddPoint->setName(L"ButtonAddPoint");
				m_pButtonAddPoint->getTransform()->Translate(480.0f, 96.0f, 0.0f);
				m_pButtonAddPoint->setTabOrder(15);
				m_pButtonAddPoint->setEnabled(false);
				m_pButtonAddPoint->setCaption(UTF8ToString("Add"));
				m_pButtonAddPoint->OnClick = [](IControl *sender)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ButtonAddPoint_OnClick(sender); };

				m_pButtonUpdatePoint->setName(L"ButtonUpdatePoint");
				m_pButtonUpdatePoint->getTransform()->Translate(480.0f, 120.0f, 0.0f);
				m_pButtonUpdatePoint->setTabOrder(16);
				m_pButtonUpdatePoint->setEnabled(false);
				m_pButtonUpdatePoint->setCaption(UTF8ToString("Update"));
				m_pButtonUpdatePoint->OnClick = [](IControl *sender)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ButtonUpdatePoint_OnClick(sender); };

				m_pButtonDeletePoint->setName(L"ButtonDeletePoint");
				m_pButtonDeletePoint->getTransform()->Translate(480.0f, 152.0f, 0.0f);
				m_pButtonDeletePoint->setTabOrder(17);
				m_pButtonDeletePoint->setEnabled(false);
				m_pButtonDeletePoint->setCaption(UTF8ToString("Delete"));
				m_pButtonDeletePoint->OnClick = [](IControl *sender)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ButtonDeletePoint_OnClick(sender); };

				m_pButtonClearPoints->setName(L"ButtonClearPoints");
				m_pButtonClearPoints->getTransform()->Translate(480.0f, 176.0f, 0.0f);
				m_pButtonClearPoints->setTabOrder(19);
				m_pButtonClearPoints->setEnabled(false);
				m_pButtonClearPoints->setCaption(UTF8ToString("Clear"));
				m_pButtonClearPoints->OnClick = [](IControl *sender)->void { cast<IFormChartDataSetProto*>(sender->getForm())->ButtonClearPoints_OnClick(sender); };


			}

		public:
			IFormChartDataSetProto(IWindow *window, IRenderer *renderer, const String &class_name = L"FormChartDataSetProto", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pGroupBox1{ nullptr },
				m_pButtonAddData{ nullptr },
				m_pEditDataName{ nullptr },
				m_pButtonDeleteData{ nullptr },
				m_pListBoxDatas{ nullptr },
				m_pButtonUpdateData{ nullptr },
				m_pButtonClearDatas{ nullptr },
				m_pGroupBox2{ nullptr },
				m_pListBoxPoints{ nullptr },
				m_pLabel1{ nullptr },
				m_pLabel2{ nullptr },
				m_pLabel3{ nullptr },
				m_pEditX{ nullptr },
				m_pEditY{ nullptr },
				m_pEditLabel{ nullptr },
				m_pButtonAddPoint{ nullptr },
				m_pButtonUpdatePoint{ nullptr },
				m_pButtonDeletePoint{ nullptr },
				m_pButtonClearPoints{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormChartDataSetProto");
					setCaption(UTF8ToString("Manage Chart Dataset"));
					setClientSize(Point{ 922, 442 });
					setState(WindowState::Hidden);
					setWindowPosition(WindowPosition::ScreenCenter);
					setHasMaximizeBox(false);
					setHasMinimizeBox(false);
					setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
				}
			}
		};
	}
}
