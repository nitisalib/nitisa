// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 11:28:23

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxLineInterpolationPositionArrayProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxLineInterpolationPositionArrayProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace charts
//             {
//                 class CDialogBoxLineInterpolationPositionArrayProto : public IDialogBoxLineInterpolationPositionArrayProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxLineInterpolationPositionArrayProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxLineInterpolationPositionArrayProto.cpp:
//         #include "DialogBoxLineInterpolationPositionArrayProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace charts
//             {
//                 CDialogBoxLineInterpolationPositionArrayProto::CDialogBoxLineInterpolationPositionArrayProto(): // Implement constructor of your widget
//                     IDialogBoxLineInterpolationPositionArrayProto(L"DialogBoxLineInterpolationPositionArrayProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxLineInterpolationPositionArrayProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxLineInterpolationPositionArrayProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/DialogBoxEx/DialogBoxEx.h"
#include "Standard/Controls/DialogBoxEx/DialogBoxExService.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/ListBox/CustomListBox.h"
#include "Standard/Controls/ListBox/ListBox.h"
#include "Standard/Controls/ListBox/ListBoxListItem.h"
#include "Standard/Controls/RadioButton/RadioButton.h"

namespace nitisa
{
	class IControl;
	class IDialogBoxService;
	class IForm;
	class IListItem;

	namespace charts
	{
		class IDialogBoxLineInterpolationPositionArrayProto : public standard::CDialogBoxEx
		{
		public:
			class IDialogBoxLineInterpolationPositionArrayProtoService: public standard::CDialogBoxExService
			{
			private:
				IDialogBoxLineInterpolationPositionArrayProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					standard::CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
					}
				}

				void NotifyOnDetaching() override
				{
					standard::CDialogBoxExService::NotifyOnDetaching();
				}

				IDialogBoxLineInterpolationPositionArrayProtoService(IDialogBoxLineInterpolationPositionArrayProto *control) : standard::CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Controls
			standard::CListBox *m_pListBoxArray;
			standard::CRadioButton *m_pRadioButtonBefore;
			standard::CRadioButton *m_pRadioButtonMiddle;
			standard::CButton *m_pButtonAdd;
			standard::CButton *m_pButtonUpdate;
			standard::CButton *m_pButtonDelete;
			standard::CButton *m_pButtonClear;
			standard::CLabel *m_pLabel1;
			standard::CLabel *m_pLabelMinCount;
			standard::CButton *m_pButtonOk;
			standard::CButton *m_pButtonCancel;
			standard::CRadioButton *m_pRadioButtonAfter;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormLineInterpolationPositionArrayProto_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void ListBoxArray_OnSelect(IControl *sender, IListItem *item) = 0;
			virtual void ButtonAdd_OnClick(IControl *sender) = 0;
			virtual void ButtonUpdate_OnClick(IControl *sender) = 0;
			virtual void ButtonDelete_OnClick(IControl *sender) = 0;
			virtual void ButtonClear_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pListBoxArray = new standard::CListBox(this);
				m_pListBoxArray->setName(L"ListBoxArray");
				m_pRadioButtonBefore = new standard::CRadioButton(this);
				m_pRadioButtonBefore->setName(L"RadioButtonBefore");
				m_pRadioButtonMiddle = new standard::CRadioButton(this);
				m_pRadioButtonMiddle->setName(L"RadioButtonMiddle");
				m_pButtonAdd = new standard::CButton(this);
				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonUpdate = new standard::CButton(this);
				m_pButtonUpdate->setName(L"ButtonUpdate");
				m_pButtonDelete = new standard::CButton(this);
				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonClear = new standard::CButton(this);
				m_pButtonClear->setName(L"ButtonClear");
				m_pLabel1 = new standard::CLabel(this);
				m_pLabel1->setName(L"Label1");
				m_pLabelMinCount = new standard::CLabel(this);
				m_pLabelMinCount->setName(L"LabelMinCount");
				m_pButtonOk = new standard::CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new standard::CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");
				m_pRadioButtonAfter = new standard::CRadioButton(this);
				m_pRadioButtonAfter->setName(L"RadioButtonAfter");

				// Initialize controls
				m_pListBoxArray->setName(L"ListBoxArray");
				m_pListBoxArray->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pListBoxArray->setSize(PointF{ 177.0f, 313.0f });
				m_pListBoxArray->setTabOrder(1);
				m_pListBoxArray->setMultiselect(false);
				m_pListBoxArray->OnSelect = [](IControl *sender, IListItem *item)->void { parent<IDialogBoxLineInterpolationPositionArrayProto*, false>(sender)->ListBoxArray_OnSelect(sender, item); };

				m_pRadioButtonBefore->setName(L"RadioButtonBefore");
				m_pRadioButtonBefore->getTransform()->Translate(192.0f, 16.0f, 0.0f);
				m_pRadioButtonBefore->setTabOrder(2);
				m_pRadioButtonBefore->setCaption(UTF8ToString("Before"));
				m_pRadioButtonBefore->setChecked(true);

				m_pRadioButtonMiddle->setName(L"RadioButtonMiddle");
				m_pRadioButtonMiddle->getTransform()->Translate(248.0f, 16.0f, 0.0f);
				m_pRadioButtonMiddle->setTabOrder(3);
				m_pRadioButtonMiddle->setCaption(UTF8ToString("Middle"));

				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonAdd->getTransform()->Translate(240.0f, 40.0f, 0.0f);
				m_pButtonAdd->setTabOrder(4);
				m_pButtonAdd->setCaption(UTF8ToString("Add"));
				m_pButtonAdd->OnClick = [](IControl *sender)->void { parent<IDialogBoxLineInterpolationPositionArrayProto*, false>(sender)->ButtonAdd_OnClick(sender); };

				m_pButtonUpdate->setName(L"ButtonUpdate");
				m_pButtonUpdate->getTransform()->Translate(240.0f, 64.0f, 0.0f);
				m_pButtonUpdate->setTabOrder(5);
				m_pButtonUpdate->setEnabled(false);
				m_pButtonUpdate->setCaption(UTF8ToString("Update"));
				m_pButtonUpdate->OnClick = [](IControl *sender)->void { parent<IDialogBoxLineInterpolationPositionArrayProto*, false>(sender)->ButtonUpdate_OnClick(sender); };

				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonDelete->getTransform()->Translate(240.0f, 96.0f, 0.0f);
				m_pButtonDelete->setTabOrder(6);
				m_pButtonDelete->setEnabled(false);
				m_pButtonDelete->setCaption(UTF8ToString("Delete"));
				m_pButtonDelete->OnClick = [](IControl *sender)->void { parent<IDialogBoxLineInterpolationPositionArrayProto*, false>(sender)->ButtonDelete_OnClick(sender); };

				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonClear->getTransform()->Translate(240.0f, 120.0f, 0.0f);
				m_pButtonClear->setTabOrder(7);
				m_pButtonClear->setEnabled(false);
				m_pButtonClear->setCaption(UTF8ToString("Clear"));
				m_pButtonClear->OnClick = [](IControl *sender)->void { parent<IDialogBoxLineInterpolationPositionArrayProto*, false>(sender)->ButtonClear_OnClick(sender); };

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(192.0f, 304.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("Min count:"));

				m_pLabelMinCount->setName(L"LabelMinCount");
				m_pLabelMinCount->getTransform()->Translate(256.0f, 304.0f, 0.0f);
				m_pLabelMinCount->setCaption(UTF8ToString("0"));

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(8.0f, 328.0f, 0.0f);
				m_pButtonOk->setTabOrder(8);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxLineInterpolationPositionArrayProto*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(120.0f, 328.0f, 0.0f);
				m_pButtonCancel->setTabOrder(9);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxLineInterpolationPositionArrayProto*, false>(sender)->ButtonCancel_OnClick(sender); };

				m_pRadioButtonAfter->setName(L"RadioButtonAfter");
				m_pRadioButtonAfter->getTransform()->Translate(304.0f, 16.0f, 0.0f);
				m_pRadioButtonAfter->setTabOrder(12);
				m_pRadioButtonAfter->setCaption(UTF8ToString("After"));


			}

		public:
			IDialogBoxLineInterpolationPositionArrayProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				standard::CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxLineInterpolationPositionArrayProtoService(this)),
				m_pListBoxArray{ nullptr },
				m_pRadioButtonBefore{ nullptr },
				m_pRadioButtonMiddle{ nullptr },
				m_pButtonAdd{ nullptr },
				m_pButtonUpdate{ nullptr },
				m_pButtonDelete{ nullptr },
				m_pButtonClear{ nullptr },
				m_pLabel1{ nullptr },
				m_pLabelMinCount{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr },
				m_pRadioButtonAfter{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxLineInterpolationPositionArrayProto");
				setCaption(UTF8ToString("Manage line interpolation position array"));
				setClientSize(Point{ 353, 360 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
				OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxLineInterpolationPositionArrayProto*>(sender)->FormLineInterpolationPositionArrayProto_OnKeyUp(sender, m, processed); };
			}

			IComponent *getComponent(const String &name)
			{
				return nullptr;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"ListBoxArray" && m_pListBoxArray != exclude)
					return m_pListBoxArray;
				if (name == L"RadioButtonBefore" && m_pRadioButtonBefore != exclude)
					return m_pRadioButtonBefore;
				if (name == L"RadioButtonMiddle" && m_pRadioButtonMiddle != exclude)
					return m_pRadioButtonMiddle;
				if (name == L"ButtonAdd" && m_pButtonAdd != exclude)
					return m_pButtonAdd;
				if (name == L"ButtonUpdate" && m_pButtonUpdate != exclude)
					return m_pButtonUpdate;
				if (name == L"ButtonDelete" && m_pButtonDelete != exclude)
					return m_pButtonDelete;
				if (name == L"ButtonClear" && m_pButtonClear != exclude)
					return m_pButtonClear;
				if (name == L"Label1" && m_pLabel1 != exclude)
					return m_pLabel1;
				if (name == L"LabelMinCount" && m_pLabelMinCount != exclude)
					return m_pLabelMinCount;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				if (name == L"RadioButtonAfter" && m_pRadioButtonAfter != exclude)
					return m_pRadioButtonAfter;
				return nullptr;
			}

		};
	}
}

