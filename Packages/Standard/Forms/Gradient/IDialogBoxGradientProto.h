// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:29:23

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxGradientProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxGradientProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CDialogBoxGradientProto : public IDialogBoxGradientProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxGradientProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxGradientProto.cpp:
//         #include "DialogBoxGradientProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CDialogBoxGradientProto::CDialogBoxGradientProto(): // Implement constructor of your widget
//                     IDialogBoxGradientProto(L"DialogBoxGradientProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxGradientProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxGradientProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/BuiltInControls/DropDown/BuiltInDropDown.h"
#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/CursorType.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TextAlign.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Components/ColorDialog/ColorDialog.h"
#include "../../Components/ImageList/ImageList.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/DialogBoxEx/DialogBoxEx.h"
#include "../../Controls/DialogBoxEx/DialogBoxExService.h"
#include "../../Controls/DropDown/CustomDropDown.h"
#include "../../Controls/DropDown/DropDown.h"
#include "../../Controls/Edit/Edit.h"
#include "../../Controls/GradientEditor/GradientEditor.h"
#include "../../Controls/Label/Label.h"
#include "../../Controls/Panel/Panel.h"
#include "../../ListItems/Label/ListItemLabel.h"

namespace nitisa
{
	class IComponent;
	class IControl;
	class IDialogBoxService;
	class IForm;

	namespace standard
	{
		class IDialogBoxGradientProto : public CDialogBoxEx
		{
		public:
			class IDialogBoxGradientProtoService: public CDialogBoxExService
			{
			private:
				IDialogBoxGradientProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
						m_pControl->m_pImageList->setForm(m_pControl->getForm());
						m_pControl->m_pColorDialog1->setForm(m_pControl->getForm());
					}
				}

				void NotifyOnDetaching() override
				{
					CDialogBoxExService::NotifyOnDetaching();
					m_pControl->m_pImageList->setForm(nullptr);
					m_pControl->m_pColorDialog1->setForm(nullptr);
				}

				IDialogBoxGradientProtoService(IDialogBoxGradientProto *control) : CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Components
			CImageList *m_pImageList;
			CColorDialog *m_pColorDialog1;

			// Controls
			CGradientEditor *m_pGradientEditor;
			CPanel *m_pPanel;
			CEdit *m_pEditPosition;
			CButton *m_pButtonPrev;
			CButton *m_pButtonNext;
			CLabel *m_pLabelActive;
			CLabel *m_pLabelType;
			CDropDown *m_pDropDownType;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormGradientProto_OnPaint(IControl *sender, const MessagePaint &m, bool &draw_children) = 0;
			virtual void FormGradientProto_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void ColorDialog1_OnApply(IComponent *sender) = 0;
			virtual void GradientEditor_OnChange(IControl *sender) = 0;
			virtual void Panel_OnLeftMouseButtonUp(IControl *sender, const MessageMouse &m, bool &processed) = 0;
			virtual void EditPosition_OnKillFocus(IControl *sender) = 0;
			virtual void EditPosition_OnChange(IControl *sender) = 0;
			virtual void ButtonPrev_OnClick(IControl *sender) = 0;
			virtual void ButtonNext_OnClick(IControl *sender) = 0;
			virtual void DropDownType_OnSelect(IControl *sender, const int index) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create components
				m_pImageList = new CImageList();
				m_pImageList->setName(L"ImageList");
				m_pColorDialog1 = new CColorDialog();
				m_pColorDialog1->setName(L"ColorDialog1");

				// Create controls
				m_pGradientEditor = new CGradientEditor(this);
				m_pGradientEditor->setName(L"GradientEditor");
				m_pPanel = new CPanel(this);
				m_pPanel->setName(L"Panel");
				m_pEditPosition = new CEdit(this);
				m_pEditPosition->setName(L"EditPosition");
				m_pButtonPrev = new CButton(this);
				m_pButtonPrev->setName(L"ButtonPrev");
				m_pButtonNext = new CButton(this);
				m_pButtonNext->setName(L"ButtonNext");
				m_pLabelActive = new CLabel(this);
				m_pLabelActive->setName(L"LabelActive");
				m_pLabelType = new CLabel(this);
				m_pLabelType->setName(L"LabelType");
				m_pDropDownType = new CDropDown(this);
				m_pDropDownType->setName(L"DropDownType");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize components
				m_pImageList->setName(L"ImageList");

				m_pColorDialog1->setName(L"ColorDialog1");
				m_pColorDialog1->setUseDialogBox(true);
				m_pColorDialog1->Tag = (void*)this;
				m_pColorDialog1->OnApply = [](IComponent *sender)->void { ((IDialogBoxGradientProto*)(void*)sender->Tag)->ColorDialog1_OnApply(sender); };

				// Initialize controls
				m_pGradientEditor->setName(L"GradientEditor");
				m_pGradientEditor->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pGradientEditor->setSize(PointF{ 400.0f, 50.0f });
				m_pGradientEditor->setTabOrder(1);
				m_pGradientEditor->OnChange = [](IControl *sender)->void { parent<IDialogBoxGradientProto*, false>(sender)->GradientEditor_OnChange(sender); };

				m_pPanel->setName(L"Panel");
				m_pPanel->getTransform()->Translate(210.0f, 62.0f, 0.0f);
				m_pPanel->setSize(PointF{ 198.0f, 20.0f });
				m_pPanel->setCursor(CursorType::Hand);
				m_pPanel->setCaption(UTF8ToString(""));
				m_pPanel->setUseMask(false);
				m_pPanel->OnLeftMouseButtonUp = [](IControl *sender, const MessageMouse &m, bool &processed)->void { parent<IDialogBoxGradientProto*, false>(sender)->Panel_OnLeftMouseButtonUp(sender, m, processed); };

				m_pEditPosition->setName(L"EditPosition");
				m_pEditPosition->getTransform()->Translate(210.0f, 86.0f, 0.0f);
				m_pEditPosition->setSize(PointF{ 198.0f, 21.0f });
				m_pEditPosition->setTabOrder(3);
				m_pEditPosition->setText(UTF8ToString(""));
				m_pEditPosition->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxGradientProto*, false>(sender)->EditPosition_OnKillFocus(sender); };
				m_pEditPosition->OnChange = [](IControl *sender)->void { parent<IDialogBoxGradientProto*, false>(sender)->EditPosition_OnChange(sender); };

				m_pButtonPrev->setName(L"ButtonPrev");
				m_pButtonPrev->getTransform()->Translate(210.0f, 110.0f, 0.0f);
				m_pButtonPrev->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonPrev->setTabOrder(4);
				m_pButtonPrev->setCaption(UTF8ToString(""));
				m_pButtonPrev->OnClick = [](IControl *sender)->void { parent<IDialogBoxGradientProto*, false>(sender)->ButtonPrev_OnClick(sender); };

				m_pButtonNext->setName(L"ButtonNext");
				m_pButtonNext->getTransform()->Translate(340.0f, 110.0f, 0.0f);
				m_pButtonNext->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonNext->setTabOrder(5);
				m_pButtonNext->setCaption(UTF8ToString(""));
				m_pButtonNext->OnClick = [](IControl *sender)->void { parent<IDialogBoxGradientProto*, false>(sender)->ButtonNext_OnClick(sender); };

				m_pLabelActive->setName(L"LabelActive");
				m_pLabelActive->getTransform()->Translate(282.0f, 110.0f, 0.0f);
				m_pLabelActive->setSize(PointF{ 54.0f, 20.0f });
				m_pLabelActive->setCaption(UTF8ToString("0/0"));
				m_pLabelActive->setCaptionHorizontalAlign(TextAlign::Center);
				m_pLabelActive->setAutoSize(false);

				m_pLabelType->setName(L"LabelType");
				m_pLabelType->getTransform()->Translate(8.0f, 113.0f, 0.0f);
				m_pLabelType->setCaption(UTF8ToString("Type:"));

				m_pDropDownType->setName(L"DropDownType");
				m_pDropDownType->getTransform()->Translate(61.0f, 110.0f, 0.0f);
				m_pDropDownType->setSize(PointF{ 145.0f, 23.0f });
				m_pDropDownType->setTabOrder(8);
				m_pDropDownType->setEditable(false);
				m_pDropDownType->setOpenDirection(CBuiltInDropDown::OpenDirection::Up);
				m_pDropDownType->OnSelect = [](IControl *sender, const int index)->void { parent<IDialogBoxGradientProto*, false>(sender)->DropDownType_OnSelect(sender, index); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(138.0f, 137.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(9);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxGradientProto*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(210.0f, 137.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(10);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxGradientProto*, false>(sender)->ButtonCancel_OnClick(sender); };


			}

		public:
			IDialogBoxGradientProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxGradientProtoService(this)),
				m_pImageList{ nullptr },
				m_pColorDialog1{ nullptr },
				m_pGradientEditor{ nullptr },
				m_pPanel{ nullptr },
				m_pEditPosition{ nullptr },
				m_pButtonPrev{ nullptr },
				m_pButtonNext{ nullptr },
				m_pLabelActive{ nullptr },
				m_pLabelType{ nullptr },
				m_pDropDownType{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxGradientProto");
				setCaption(UTF8ToString("Edit Gradient"));
				setClientSize(Point{ 416, 168 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
				OnPaint = [](IControl *sender, const MessagePaint &m, bool &draw_children)->void { cast<IDialogBoxGradientProto*>(sender)->FormGradientProto_OnPaint(sender, m, draw_children); };
				OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxGradientProto*>(sender)->FormGradientProto_OnKeyUp(sender, m, processed); };
			}

			~IDialogBoxGradientProto() override
			{
				m_pImageList->Release();
				m_pColorDialog1->Release();
			}

			IComponent *getComponent(const String &name)
			{
				if (name == L"ImageList")
					return m_pImageList;
				if (name == L"ColorDialog1")
					return m_pColorDialog1;
				return nullptr;
			}

			bool hasComponent(IComponent *component) override
			{
				if (component == m_pImageList)
					return true;
				if (component == m_pColorDialog1)
					return true;
				return false;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"GradientEditor" && m_pGradientEditor != exclude)
					return m_pGradientEditor;
				if (name == L"Panel" && m_pPanel != exclude)
					return m_pPanel;
				if (name == L"EditPosition" && m_pEditPosition != exclude)
					return m_pEditPosition;
				if (name == L"ButtonPrev" && m_pButtonPrev != exclude)
					return m_pButtonPrev;
				if (name == L"ButtonNext" && m_pButtonNext != exclude)
					return m_pButtonNext;
				if (name == L"LabelActive" && m_pLabelActive != exclude)
					return m_pLabelActive;
				if (name == L"LabelType" && m_pLabelType != exclude)
					return m_pLabelType;
				if (name == L"DropDownType" && m_pDropDownType != exclude)
					return m_pDropDownType;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				return nullptr;
			}

		};
	}
}

