// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:32:41

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxTransformProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxTransformProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CDialogBoxTransformProto : public IDialogBoxTransformProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxTransformProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxTransformProto.cpp:
//         #include "DialogBoxTransformProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CDialogBoxTransformProto::CDialogBoxTransformProto(): // Implement constructor of your widget
//                     IDialogBoxTransformProto(L"DialogBoxTransformProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxTransformProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxTransformProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/DialogBoxEx/DialogBoxEx.h"
#include "../../Controls/DialogBoxEx/DialogBoxExService.h"
#include "../../Controls/DropDown/CustomDropDown.h"
#include "../../Controls/DropDown/DropDown.h"
#include "../../Controls/Edit/Edit.h"
#include "../../Controls/GroupBox/GroupBox.h"
#include "../../Controls/Label/Label.h"
#include "../../ListItems/Label/ListItemLabel.h"

namespace nitisa
{
	class IControl;
	class IDialogBoxService;
	class IForm;

	namespace standard
	{
		class IDialogBoxTransformProto : public CDialogBoxEx
		{
		public:
			class IDialogBoxTransformProtoService: public CDialogBoxExService
			{
			private:
				IDialogBoxTransformProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
					}
				}

				void NotifyOnDetaching() override
				{
					CDialogBoxExService::NotifyOnDetaching();
				}

				IDialogBoxTransformProtoService(IDialogBoxTransformProto *control) : CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Controls
			CGroupBox *m_pGroupBoxT;
			CLabel *m_pLabelTx;
			CLabel *m_pLabelTy;
			CLabel *m_pLabelTz;
			CEdit *m_pEditTx;
			CEdit *m_pEditTy;
			CEdit *m_pEditTz;
			CGroupBox *m_pGroupBoxS;
			CLabel *m_pLabelSx;
			CLabel *m_pLabelSy;
			CLabel *m_pLabelSz;
			CEdit *m_pEditSx;
			CEdit *m_pEditSy;
			CEdit *m_pEditSz;
			CGroupBox *m_pGroupBoxR;
			CLabel *m_pLabelRx;
			CLabel *m_pLabelRy;
			CLabel *m_pLabelRz;
			CEdit *m_pEditRx;
			CEdit *m_pEditRy;
			CEdit *m_pEditRz;
			CGroupBox *m_pGroupBoxO;
			CLabel *m_pLabelRO;
			CLabel *m_pLabelTO;
			CDropDown *m_pDropDownRO;
			CDropDown *m_pDropDownTO;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormTransformProto_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void EditTx_OnKillFocus(IControl *sender) = 0;
			virtual void EditTy_OnKillFocus(IControl *sender) = 0;
			virtual void EditTz_OnKillFocus(IControl *sender) = 0;
			virtual void EditSx_OnKillFocus(IControl *sender) = 0;
			virtual void EditSy_OnKillFocus(IControl *sender) = 0;
			virtual void EditSz_OnKillFocus(IControl *sender) = 0;
			virtual void EditRx_OnKillFocus(IControl *sender) = 0;
			virtual void EditRy_OnKillFocus(IControl *sender) = 0;
			virtual void EditRz_OnKillFocus(IControl *sender) = 0;
			virtual void DropDownRO_OnSelect(IControl *sender, const int index) = 0;
			virtual void DropDownTO_OnSelect(IControl *sender, const int index) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pGroupBoxT = new CGroupBox(this);
				m_pGroupBoxT->setName(L"GroupBoxT");
				m_pLabelTx = new CLabel(m_pGroupBoxT);
				m_pLabelTx->setName(L"LabelTx");
				m_pLabelTy = new CLabel(m_pGroupBoxT);
				m_pLabelTy->setName(L"LabelTy");
				m_pLabelTz = new CLabel(m_pGroupBoxT);
				m_pLabelTz->setName(L"LabelTz");
				m_pEditTx = new CEdit(m_pGroupBoxT);
				m_pEditTx->setName(L"EditTx");
				m_pEditTy = new CEdit(m_pGroupBoxT);
				m_pEditTy->setName(L"EditTy");
				m_pEditTz = new CEdit(m_pGroupBoxT);
				m_pEditTz->setName(L"EditTz");
				m_pGroupBoxS = new CGroupBox(this);
				m_pGroupBoxS->setName(L"GroupBoxS");
				m_pLabelSx = new CLabel(m_pGroupBoxS);
				m_pLabelSx->setName(L"LabelSx");
				m_pLabelSy = new CLabel(m_pGroupBoxS);
				m_pLabelSy->setName(L"LabelSy");
				m_pLabelSz = new CLabel(m_pGroupBoxS);
				m_pLabelSz->setName(L"LabelSz");
				m_pEditSx = new CEdit(m_pGroupBoxS);
				m_pEditSx->setName(L"EditSx");
				m_pEditSy = new CEdit(m_pGroupBoxS);
				m_pEditSy->setName(L"EditSy");
				m_pEditSz = new CEdit(m_pGroupBoxS);
				m_pEditSz->setName(L"EditSz");
				m_pGroupBoxR = new CGroupBox(this);
				m_pGroupBoxR->setName(L"GroupBoxR");
				m_pLabelRx = new CLabel(m_pGroupBoxR);
				m_pLabelRx->setName(L"LabelRx");
				m_pLabelRy = new CLabel(m_pGroupBoxR);
				m_pLabelRy->setName(L"LabelRy");
				m_pLabelRz = new CLabel(m_pGroupBoxR);
				m_pLabelRz->setName(L"LabelRz");
				m_pEditRx = new CEdit(m_pGroupBoxR);
				m_pEditRx->setName(L"EditRx");
				m_pEditRy = new CEdit(m_pGroupBoxR);
				m_pEditRy->setName(L"EditRy");
				m_pEditRz = new CEdit(m_pGroupBoxR);
				m_pEditRz->setName(L"EditRz");
				m_pGroupBoxO = new CGroupBox(this);
				m_pGroupBoxO->setName(L"GroupBoxO");
				m_pLabelRO = new CLabel(m_pGroupBoxO);
				m_pLabelRO->setName(L"LabelRO");
				m_pLabelTO = new CLabel(m_pGroupBoxO);
				m_pLabelTO->setName(L"LabelTO");
				m_pDropDownRO = new CDropDown(m_pGroupBoxO);
				m_pDropDownRO->setName(L"DropDownRO");
				m_pDropDownTO = new CDropDown(m_pGroupBoxO);
				m_pDropDownTO->setName(L"DropDownTO");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pGroupBoxT->setName(L"GroupBoxT");
				m_pGroupBoxT->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pGroupBoxT->setSize(PointF{ 136.0f, 94.0f });
				m_pGroupBoxT->setCaption(UTF8ToString("Translate"));
				m_pGroupBoxT->setUseMask(false);

				m_pLabelTx->setName(L"LabelTx");
				m_pLabelTx->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pLabelTx->setCaption(UTF8ToString("X:"));

				m_pLabelTy->setName(L"LabelTy");
				m_pLabelTy->getTransform()->Translate(8.0f, 46.0f, 0.0f);
				m_pLabelTy->setCaption(UTF8ToString("Y:"));

				m_pLabelTz->setName(L"LabelTz");
				m_pLabelTz->getTransform()->Translate(8.0f, 70.0f, 0.0f);
				m_pLabelTz->setCaption(UTF8ToString("Z:"));

				m_pEditTx->setName(L"EditTx");
				m_pEditTx->getTransform()->Translate(28.0f, 18.0f, 0.0f);
				m_pEditTx->setSize(PointF{ 100.0f, 21.0f });
				m_pEditTx->setTabOrder(8);
				m_pEditTx->setText(UTF8ToString("0"));
				m_pEditTx->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->EditTx_OnKillFocus(sender); };

				m_pEditTy->setName(L"EditTy");
				m_pEditTy->getTransform()->Translate(28.0f, 44.0f, 0.0f);
				m_pEditTy->setSize(PointF{ 100.0f, 21.0f });
				m_pEditTy->setTabOrder(9);
				m_pEditTy->setText(UTF8ToString("0"));
				m_pEditTy->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->EditTy_OnKillFocus(sender); };

				m_pEditTz->setName(L"EditTz");
				m_pEditTz->getTransform()->Translate(28.0f, 68.0f, 0.0f);
				m_pEditTz->setSize(PointF{ 100.0f, 21.0f });
				m_pEditTz->setTabOrder(10);
				m_pEditTz->setText(UTF8ToString("0"));
				m_pEditTz->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->EditTz_OnKillFocus(sender); };

				m_pGroupBoxS->setName(L"GroupBoxS");
				m_pGroupBoxS->getTransform()->Translate(148.0f, 8.0f, 0.0f);
				m_pGroupBoxS->setSize(PointF{ 136.0f, 94.0f });
				m_pGroupBoxS->setCaption(UTF8ToString("Scale"));
				m_pGroupBoxS->setUseMask(false);

				m_pLabelSx->setName(L"LabelSx");
				m_pLabelSx->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pLabelSx->setCaption(UTF8ToString("X:"));

				m_pLabelSy->setName(L"LabelSy");
				m_pLabelSy->getTransform()->Translate(8.0f, 46.0f, 0.0f);
				m_pLabelSy->setCaption(UTF8ToString("Y:"));

				m_pLabelSz->setName(L"LabelSz");
				m_pLabelSz->getTransform()->Translate(8.0f, 70.0f, 0.0f);
				m_pLabelSz->setCaption(UTF8ToString("Z:"));

				m_pEditSx->setName(L"EditSx");
				m_pEditSx->getTransform()->Translate(28.0f, 18.0f, 0.0f);
				m_pEditSx->setSize(PointF{ 100.0f, 21.0f });
				m_pEditSx->setTabOrder(14);
				m_pEditSx->setText(UTF8ToString("1"));
				m_pEditSx->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->EditSx_OnKillFocus(sender); };

				m_pEditSy->setName(L"EditSy");
				m_pEditSy->getTransform()->Translate(28.0f, 44.0f, 0.0f);
				m_pEditSy->setSize(PointF{ 100.0f, 21.0f });
				m_pEditSy->setTabOrder(15);
				m_pEditSy->setText(UTF8ToString("1"));
				m_pEditSy->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->EditSy_OnKillFocus(sender); };

				m_pEditSz->setName(L"EditSz");
				m_pEditSz->getTransform()->Translate(28.0f, 68.0f, 0.0f);
				m_pEditSz->setSize(PointF{ 100.0f, 21.0f });
				m_pEditSz->setTabOrder(16);
				m_pEditSz->setText(UTF8ToString("1"));
				m_pEditSz->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->EditSz_OnKillFocus(sender); };

				m_pGroupBoxR->setName(L"GroupBoxR");
				m_pGroupBoxR->getTransform()->Translate(288.0f, 8.0f, 0.0f);
				m_pGroupBoxR->setSize(PointF{ 136.0f, 94.0f });
				m_pGroupBoxR->setCaption(UTF8ToString("Rotate"));
				m_pGroupBoxR->setUseMask(false);

				m_pLabelRx->setName(L"LabelRx");
				m_pLabelRx->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pLabelRx->setCaption(UTF8ToString("X:"));

				m_pLabelRy->setName(L"LabelRy");
				m_pLabelRy->getTransform()->Translate(8.0f, 46.0f, 0.0f);
				m_pLabelRy->setCaption(UTF8ToString("Y:"));

				m_pLabelRz->setName(L"LabelRz");
				m_pLabelRz->getTransform()->Translate(8.0f, 70.0f, 0.0f);
				m_pLabelRz->setCaption(UTF8ToString("Z:"));

				m_pEditRx->setName(L"EditRx");
				m_pEditRx->getTransform()->Translate(28.0f, 18.0f, 0.0f);
				m_pEditRx->setSize(PointF{ 100.0f, 21.0f });
				m_pEditRx->setTabOrder(20);
				m_pEditRx->setText(UTF8ToString("0"));
				m_pEditRx->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->EditRx_OnKillFocus(sender); };

				m_pEditRy->setName(L"EditRy");
				m_pEditRy->getTransform()->Translate(28.0f, 44.0f, 0.0f);
				m_pEditRy->setSize(PointF{ 100.0f, 21.0f });
				m_pEditRy->setTabOrder(21);
				m_pEditRy->setText(UTF8ToString("0"));
				m_pEditRy->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->EditRy_OnKillFocus(sender); };

				m_pEditRz->setName(L"EditRz");
				m_pEditRz->getTransform()->Translate(28.0f, 68.0f, 0.0f);
				m_pEditRz->setSize(PointF{ 100.0f, 21.0f });
				m_pEditRz->setTabOrder(22);
				m_pEditRz->setText(UTF8ToString("0"));
				m_pEditRz->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->EditRz_OnKillFocus(sender); };

				m_pGroupBoxO->setName(L"GroupBoxO");
				m_pGroupBoxO->getTransform()->Translate(8.0f, 106.0f, 0.0f);
				m_pGroupBoxO->setSize(PointF{ 416.0f, 46.0f });
				m_pGroupBoxO->setCaption(UTF8ToString("Orders"));
				m_pGroupBoxO->setUseMask(false);

				m_pLabelRO->setName(L"LabelRO");
				m_pLabelRO->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pLabelRO->setCaption(UTF8ToString("Rotate:"));

				m_pLabelTO->setName(L"LabelTO");
				m_pLabelTO->getTransform()->Translate(210.0f, 22.0f, 0.0f);
				m_pLabelTO->setCaption(UTF8ToString("Transform:"));

				m_pDropDownRO->setName(L"DropDownRO");
				m_pDropDownRO->getTransform()->Translate(106.0f, 18.0f, 0.0f);
				m_pDropDownRO->setSize(PointF{ 100.0f, 21.0f });
				m_pDropDownRO->setTabOrder(25);
				m_pDropDownRO->setEditable(false);
				m_pDropDownRO->OnSelect = [](IControl *sender, const int index)->void { parent<IDialogBoxTransformProto*, false>(sender)->DropDownRO_OnSelect(sender, index); };

				m_pDropDownTO->setName(L"DropDownTO");
				m_pDropDownTO->getTransform()->Translate(308.0f, 18.0f, 0.0f);
				m_pDropDownTO->setSize(PointF{ 100.0f, 21.0f });
				m_pDropDownTO->setTabOrder(26);
				m_pDropDownTO->setEditable(false);
				m_pDropDownTO->OnSelect = [](IControl *sender, const int index)->void { parent<IDialogBoxTransformProto*, false>(sender)->DropDownTO_OnSelect(sender, index); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(146.0f, 156.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(27);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(218.0f, 156.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(28);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxTransformProto*, false>(sender)->ButtonCancel_OnClick(sender); };


			}

		public:
			IDialogBoxTransformProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxTransformProtoService(this)),
				m_pGroupBoxT{ nullptr },
				m_pLabelTx{ nullptr },
				m_pLabelTy{ nullptr },
				m_pLabelTz{ nullptr },
				m_pEditTx{ nullptr },
				m_pEditTy{ nullptr },
				m_pEditTz{ nullptr },
				m_pGroupBoxS{ nullptr },
				m_pLabelSx{ nullptr },
				m_pLabelSy{ nullptr },
				m_pLabelSz{ nullptr },
				m_pEditSx{ nullptr },
				m_pEditSy{ nullptr },
				m_pEditSz{ nullptr },
				m_pGroupBoxR{ nullptr },
				m_pLabelRx{ nullptr },
				m_pLabelRy{ nullptr },
				m_pLabelRz{ nullptr },
				m_pEditRx{ nullptr },
				m_pEditRy{ nullptr },
				m_pEditRz{ nullptr },
				m_pGroupBoxO{ nullptr },
				m_pLabelRO{ nullptr },
				m_pLabelTO{ nullptr },
				m_pDropDownRO{ nullptr },
				m_pDropDownTO{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxTransformProto");
				setCaption(UTF8ToString("Transform"));
				setClientSize(Point{ 432, 187 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
				OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxTransformProto*>(sender)->FormTransformProto_OnKeyUp(sender, m, processed); };
			}

			IComponent *getComponent(const String &name)
			{
				return nullptr;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"GroupBoxT" && m_pGroupBoxT != exclude)
					return m_pGroupBoxT;
				if (name == L"LabelTx" && m_pLabelTx != exclude)
					return m_pLabelTx;
				if (name == L"LabelTy" && m_pLabelTy != exclude)
					return m_pLabelTy;
				if (name == L"LabelTz" && m_pLabelTz != exclude)
					return m_pLabelTz;
				if (name == L"EditTx" && m_pEditTx != exclude)
					return m_pEditTx;
				if (name == L"EditTy" && m_pEditTy != exclude)
					return m_pEditTy;
				if (name == L"EditTz" && m_pEditTz != exclude)
					return m_pEditTz;
				if (name == L"GroupBoxS" && m_pGroupBoxS != exclude)
					return m_pGroupBoxS;
				if (name == L"LabelSx" && m_pLabelSx != exclude)
					return m_pLabelSx;
				if (name == L"LabelSy" && m_pLabelSy != exclude)
					return m_pLabelSy;
				if (name == L"LabelSz" && m_pLabelSz != exclude)
					return m_pLabelSz;
				if (name == L"EditSx" && m_pEditSx != exclude)
					return m_pEditSx;
				if (name == L"EditSy" && m_pEditSy != exclude)
					return m_pEditSy;
				if (name == L"EditSz" && m_pEditSz != exclude)
					return m_pEditSz;
				if (name == L"GroupBoxR" && m_pGroupBoxR != exclude)
					return m_pGroupBoxR;
				if (name == L"LabelRx" && m_pLabelRx != exclude)
					return m_pLabelRx;
				if (name == L"LabelRy" && m_pLabelRy != exclude)
					return m_pLabelRy;
				if (name == L"LabelRz" && m_pLabelRz != exclude)
					return m_pLabelRz;
				if (name == L"EditRx" && m_pEditRx != exclude)
					return m_pEditRx;
				if (name == L"EditRy" && m_pEditRy != exclude)
					return m_pEditRy;
				if (name == L"EditRz" && m_pEditRz != exclude)
					return m_pEditRz;
				if (name == L"GroupBoxO" && m_pGroupBoxO != exclude)
					return m_pGroupBoxO;
				if (name == L"LabelRO" && m_pLabelRO != exclude)
					return m_pLabelRO;
				if (name == L"LabelTO" && m_pLabelTO != exclude)
					return m_pLabelTO;
				if (name == L"DropDownRO" && m_pDropDownRO != exclude)
					return m_pDropDownRO;
				if (name == L"DropDownTO" && m_pDropDownTO != exclude)
					return m_pDropDownTO;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				return nullptr;
			}

		};
	}
}

