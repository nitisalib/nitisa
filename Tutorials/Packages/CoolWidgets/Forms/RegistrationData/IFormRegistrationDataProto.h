// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 14:51:04

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormRegistrationDataProto.h:
//         #include "IFormRegistrationDataProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace coolwidgets
//             {
//                 class CFormRegistrationDataProto : public IFormRegistrationDataProto // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormRegistrationDataProto(); // Declare constructor
//                 };
//             }
//         }
//
//     FormRegistrationDataProto.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormRegistrationDataProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace coolwidgets
//             {
//                 CFormRegistrationDataProto::CFormRegistrationDataProto(): // Implement constructor of your form
//                     IFormRegistrationDataProto(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormRegistrationDataProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/Edit/Edit.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/MonthCalendar/MonthCalendar.h"

namespace nitisa
{
	class IControl;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace coolwidgets
	{
		class IFormRegistrationDataProto : public CForm
		{
		protected:
			// Controls
			standard::CLabel *m_pLabel1;
			standard::CLabel *m_pLabel2;
			standard::CLabel *m_pLabel3;
			standard::CEdit *m_pEditFirstName;
			standard::CEdit *m_pEditLastName;
			standard::CMonthCalendar *m_pMonthCalendar;
			standard::CButton *m_pButtonOk;
			standard::CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pLabel1 = new standard::CLabel(this);
				m_pLabel1->setName(L"Label1");
				m_pLabel2 = new standard::CLabel(this);
				m_pLabel2->setName(L"Label2");
				m_pLabel3 = new standard::CLabel(this);
				m_pLabel3->setName(L"Label3");
				m_pEditFirstName = new standard::CEdit(this);
				m_pEditFirstName->setName(L"EditFirstName");
				m_pEditLastName = new standard::CEdit(this);
				m_pEditLastName->setName(L"EditLastName");
				m_pMonthCalendar = new standard::CMonthCalendar(this);
				m_pMonthCalendar->setName(L"MonthCalendar");
				m_pButtonOk = new standard::CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new standard::CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(10.0f, 14.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("First name:"));

				m_pLabel2->setName(L"Label2");
				m_pLabel2->getTransform()->Translate(10.0f, 44.0f, 0.0f);
				m_pLabel2->setCaption(UTF8ToString("Last name:"));

				m_pLabel3->setName(L"Label3");
				m_pLabel3->getTransform()->Translate(10.0f, 74.0f, 0.0f);
				m_pLabel3->setCaption(UTF8ToString("Date of birth:"));

				m_pEditFirstName->setName(L"EditFirstName");
				m_pEditFirstName->getTransform()->Translate(120.0f, 10.0f, 0.0f);
				m_pEditFirstName->setSize(PointF{ 180.0f, 21.0f });
				m_pEditFirstName->setTabOrder(4);
				m_pEditFirstName->setText(UTF8ToString(""));

				m_pEditLastName->setName(L"EditLastName");
				m_pEditLastName->getTransform()->Translate(120.0f, 40.0f, 0.0f);
				m_pEditLastName->setSize(PointF{ 180.0f, 21.0f });
				m_pEditLastName->setTabOrder(5);
				m_pEditLastName->setText(UTF8ToString(""));

				m_pMonthCalendar->setName(L"MonthCalendar");
				m_pMonthCalendar->getTransform()->Translate(120.0f, 70.0f, 0.0f);

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(120.0f, 250.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 84.0f, 23.0f });
				m_pButtonOk->setTabOrder(7);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { cast<IFormRegistrationDataProto*>(sender->getForm())->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(216.0f, 250.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 84.0f, 23.0f });
				m_pButtonCancel->setTabOrder(8);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { cast<IFormRegistrationDataProto*>(sender->getForm())->ButtonCancel_OnClick(sender); };


			}

		public:
			IFormRegistrationDataProto(IWindow *window, IRenderer *renderer, const String &class_name = L"FormRegistrationDataProto", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pLabel1{ nullptr },
				m_pLabel2{ nullptr },
				m_pLabel3{ nullptr },
				m_pEditFirstName{ nullptr },
				m_pEditLastName{ nullptr },
				m_pMonthCalendar{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormRegistrationDataProto");
					setCaption(UTF8ToString("Registration Data"));
					setClientSize(Point{ 311, 283 });
					setState(WindowState::Hidden);
					setWindowPosition(WindowPosition::MainFormCenter);
					setHasMaximizeBox(false);
					setHasMinimizeBox(false);
					setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
				}
			}
		};
	}
}
