// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:34:00

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormHotkeyListProto.h:
//         #include "IFormHotkeyListProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CFormHotkeyListProto : public IFormHotkeyListProto // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormHotkeyListProto(); // Declare constructor
//                 };
//             }
//         }
//
//     FormHotkeyListProto.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormHotkeyListProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CFormHotkeyListProto::CFormHotkeyListProto(): // Implement constructor of your form
//                     IFormHotkeyListProto(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormHotkeyListProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/CheckBox/CheckBox.h"
#include "../../Controls/HotKey/HotKey.h"
#include "../../Controls/Label/Label.h"
#include "../../Controls/ListBox/CustomListBox.h"
#include "../../Controls/ListBox/ListBox.h"
#include "../../Controls/ListBox/ListBoxListItem.h"

namespace nitisa
{
	class IControl;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace standard
	{
		class IFormHotkeyListProto : public CForm
		{
		protected:
			// Controls
			CLabel *m_pLabelList;
			CListBox *m_pListBoxList;
			CLabel *m_pLabelHotkey;
			CHotKey *m_pHotKey;
			CCheckBox *m_pCheckBoxDown;
			CButton *m_pButtonAdd;
			CButton *m_pButtonDelete;
			CButton *m_pButtonClear;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void ButtonAdd_OnClick(IControl *sender) = 0;
			virtual void ButtonDelete_OnClick(IControl *sender) = 0;
			virtual void ButtonClear_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pLabelList = new CLabel(this);
				m_pLabelList->setName(L"LabelList");
				m_pListBoxList = new CListBox(this);
				m_pListBoxList->setName(L"ListBoxList");
				m_pLabelHotkey = new CLabel(this);
				m_pLabelHotkey->setName(L"LabelHotkey");
				m_pHotKey = new CHotKey(this);
				m_pHotKey->setName(L"HotKey");
				m_pCheckBoxDown = new CCheckBox(this);
				m_pCheckBoxDown->setName(L"CheckBoxDown");
				m_pButtonAdd = new CButton(this);
				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonDelete = new CButton(this);
				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonClear = new CButton(this);
				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pLabelList->setName(L"LabelList");
				m_pLabelList->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pLabelList->setCaption(UTF8ToString("Hotkeys"));

				m_pListBoxList->setName(L"ListBoxList");
				m_pListBoxList->getTransform()->Translate(8.0f, 28.0f, 0.0f);
				m_pListBoxList->setSize(PointF{ 150.0f, 200.0f });
				m_pListBoxList->setTabOrder(2);

				m_pLabelHotkey->setName(L"LabelHotkey");
				m_pLabelHotkey->getTransform()->Translate(8.0f, 232.0f, 0.0f);
				m_pLabelHotkey->setCaption(UTF8ToString("Click on field below and press key combination you want"));

				m_pHotKey->setName(L"HotKey");
				m_pHotKey->getTransform()->Translate(8.0f, 252.0f, 0.0f);
				m_pHotKey->setSize(PointF{ 150.0f, 20.0f });
				m_pHotKey->setTabOrder(4);

				m_pCheckBoxDown->setName(L"CheckBoxDown");
				m_pCheckBoxDown->getTransform()->Translate(162.0f, 256.0f, 0.0f);
				m_pCheckBoxDown->setTabOrder(5);
				m_pCheckBoxDown->setCaption(UTF8ToString("Is hotkey down(up otherwise)?"));

				m_pButtonAdd->setName(L"ButtonAdd");
				m_pButtonAdd->getTransform()->Translate(162.0f, 28.0f, 0.0f);
				m_pButtonAdd->setSize(PointF{ 168.0f, 23.0f });
				m_pButtonAdd->setTabOrder(6);
				m_pButtonAdd->setCaption(UTF8ToString("Add"));
				m_pButtonAdd->OnClick = [](IControl *sender)->void { cast<IFormHotkeyListProto*>(sender->getForm())->ButtonAdd_OnClick(sender); };

				m_pButtonDelete->setName(L"ButtonDelete");
				m_pButtonDelete->getTransform()->Translate(162.0f, 55.0f, 0.0f);
				m_pButtonDelete->setSize(PointF{ 168.0f, 23.0f });
				m_pButtonDelete->setTabOrder(7);
				m_pButtonDelete->setCaption(UTF8ToString("Delete"));
				m_pButtonDelete->OnClick = [](IControl *sender)->void { cast<IFormHotkeyListProto*>(sender->getForm())->ButtonDelete_OnClick(sender); };

				m_pButtonClear->setName(L"ButtonClear");
				m_pButtonClear->getTransform()->Translate(162.0f, 82.0f, 0.0f);
				m_pButtonClear->setSize(PointF{ 168.0f, 23.0f });
				m_pButtonClear->setTabOrder(8);
				m_pButtonClear->setCaption(UTF8ToString("Clear"));
				m_pButtonClear->OnClick = [](IControl *sender)->void { cast<IFormHotkeyListProto*>(sender->getForm())->ButtonClear_OnClick(sender); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(162.0f, 117.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 168.0f, 23.0f });
				m_pButtonOk->setTabOrder(9);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { cast<IFormHotkeyListProto*>(sender->getForm())->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(162.0f, 144.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 168.0f, 23.0f });
				m_pButtonCancel->setTabOrder(10);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { cast<IFormHotkeyListProto*>(sender->getForm())->ButtonCancel_OnClick(sender); };


			}

		public:
			IFormHotkeyListProto(IWindow *window, IRenderer *renderer, const String &class_name = L"FormHotkeyListProto", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pLabelList{ nullptr },
				m_pListBoxList{ nullptr },
				m_pLabelHotkey{ nullptr },
				m_pHotKey{ nullptr },
				m_pCheckBoxDown{ nullptr },
				m_pButtonAdd{ nullptr },
				m_pButtonDelete{ nullptr },
				m_pButtonClear{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormHotkeyListProto");
					setCaption(UTF8ToString("Hotkey List"));
					setClientSize(Point{ 338, 280 });
					setState(WindowState::Hidden);
					setWindowPosition(WindowPosition::MainFormCenter);
					setHasMaximizeBox(false);
					setHasMinimizeBox(false);
					setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
				}
			}
		};
	}
}
