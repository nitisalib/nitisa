// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 09:42:59

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxConfiguration.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxConfiguration.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace fb
//             {
//                 class CDialogBoxConfiguration : public IDialogBoxConfiguration // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxConfiguration(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxConfiguration.cpp:
//         #include "DialogBoxConfiguration.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace fb
//             {
//                 CDialogBoxConfiguration::CDialogBoxConfiguration(): // Implement constructor of your widget
//                     IDialogBoxConfiguration(L"DialogBoxConfiguration", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxConfiguration::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxConfiguration::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/BuiltInControls/DropDown/BuiltInDropDown.h"
#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/CursorType.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Components/ColorDialog/ColorDialog.h"
#include "Standard/Controls/Bevel/Bevel.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/CheckBox/CheckBox.h"
#include "Standard/Controls/DialogBoxEx/DialogBoxEx.h"
#include "Standard/Controls/DialogBoxEx/DialogBoxExService.h"
#include "Standard/Controls/DrawGrid/CustomDrawGrid.h"
#include "Standard/Controls/DrawGrid/CustomGrid.h"
#include "Standard/Controls/DropDown/CustomDropDown.h"
#include "Standard/Controls/DropDown/DropDown.h"
#include "Standard/Controls/Edit/Edit.h"
#include "Standard/Controls/GroupBox/GroupBox.h"
#include "Standard/Controls/IBevel.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/Panel/Panel.h"
#include "Standard/Controls/RadioButton/RadioButton.h"
#include "Standard/Controls/StringGrid/CustomStringGrid.h"
#include "Standard/Controls/UpDown/UpDown.h"
#include "Standard/Controls/ValueListEditor/ValueListEditor.h"
#include "Standard/ListItems/Label/ListItemLabel.h"

namespace nitisa
{
	class IComponent;
	class IControl;
	class IDialogBoxService;

	namespace standard
	{
		class IEdit;
	}

	class IForm;

	namespace fb
	{
		class IDialogBoxConfiguration : public standard::CDialogBoxEx
		{
		public:
			class IDialogBoxConfigurationService: public standard::CDialogBoxExService
			{
			private:
				IDialogBoxConfiguration *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					standard::CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
						m_pControl->m_pColorDialog->setForm(m_pControl->getForm());
					}
				}

				void NotifyOnDetaching() override
				{
					standard::CDialogBoxExService::NotifyOnDetaching();
					m_pControl->m_pColorDialog->setForm(nullptr);
				}

				IDialogBoxConfigurationService(IDialogBoxConfiguration *control) : standard::CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Components
			standard::CColorDialog *m_pColorDialog;

			// Controls
			standard::CGroupBox *m_pGroupBox1;
			standard::CCheckBox *m_pCheckBoxXAxis;
			standard::CCheckBox *m_pCheckBoxYAxis;
			standard::CCheckBox *m_pCheckBoxRotate;
			standard::CEdit *m_pEditXAxis;
			standard::CEdit *m_pEditYAxis;
			standard::CEdit *m_pEditRotate;
			standard::CPanel *m_pPanelGridColor;
			standard::CLabel *m_pLabel1;
			standard::CEdit *m_pEditRotateShift;
			standard::CLabel *m_pLabel2;
			standard::CEdit *m_pEditPointSize;
			standard::CLabel *m_pLabel3;
			standard::CButton *m_pButtonOk;
			standard::CButton *m_pButtonCancel;
			standard::CGroupBox *m_pGroupBox2;
			standard::CLabel *m_pLabel4;
			standard::CEdit *m_pEditNamespace;
			standard::CLabel *m_pLabel5;
			standard::CEdit *m_pEditPrefix;
			standard::CLabel *m_pLabel8;
			standard::CDropDown *m_pDropDownWidgetsSection;
			standard::CCheckBox *m_pCheckBoxGenerateGetters;
			standard::CLabel *m_pLabel18;
			standard::CRadioButton *m_pRadioButtonForm;
			standard::CRadioButton *m_pRadioButtonDialogBox;
			standard::CDropDown *m_pDropDownDialogBox;
			standard::CGroupBox *m_pGroupBox3;
			standard::CLabel *m_pLabel6;
			standard::CLabel *m_pLabel7;
			standard::CEdit *m_pEditSelectionPointSize;
			standard::CEdit *m_pEditSelectionBorderWidth;
			standard::CPanel *m_pPanelSelectionBorderColor;
			standard::CPanel *m_pPanelSelectionBackgroundColor;
			standard::CLabel *m_pLabel9;
			standard::CLabel *m_pLabel10;
			standard::CGroupBox *m_pGroupBox4;
			standard::CValueListEditor *m_pValueListEditorOverwriteIncludes;
			standard::CGroupBox *m_pGroupBox5;
			standard::CValueListEditor *m_pValueListEditorOverwriteNamespaces;
			standard::CButton *m_pButtonOkForm;
			standard::CGroupBox *m_pGroupBox6;
			standard::CLabel *m_pLabel11;
			standard::CLabel *m_pLabel12;
			standard::CLabel *m_pLabel13;
			standard::CLabel *m_pLabel14;
			standard::CLabel *m_pLabel15;
			standard::CLabel *m_pLabel16;
			standard::CLabel *m_pLabel17;
			standard::CEdit *m_pEditHighlightBorderWidthLeft;
			standard::CEdit *m_pEditHighlightBorderWidthTop;
			standard::CEdit *m_pEditHighlightBorderWidthRight;
			standard::CEdit *m_pEditHighlightBorderWidthBottom;
			standard::CUpDown *m_pUpDownHighlightBorderWidthLeft;
			standard::CUpDown *m_pUpDownHighlightBorderWidthTop;
			standard::CUpDown *m_pUpDownHighlightBorderWidthRight;
			standard::CUpDown *m_pUpDownHighlightBorderWidthBottom;
			standard::CBevel *m_pBevel1;
			standard::CPanel *m_pPanelHighlightBorderColorLeft;
			standard::CPanel *m_pPanelHighlightBorderColorTop;
			standard::CPanel *m_pPanelHighlightBorderColorRight;
			standard::CPanel *m_pPanelHighlightBorderColorBottom;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormSettings_OnKeyDown(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void ColorDialog_OnApply(IComponent *sender) = 0;
			virtual void PanelGridColor_OnLeftMouseButtonDown(IControl *sender, const MessageMouse &m, bool &processed) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;
			virtual void RadioButtonForm_OnChange(IControl *sender) = 0;
			virtual void RadioButtonDialogBox_OnChange(IControl *sender) = 0;
			virtual void PanelSelectionBorderColor_OnLeftMouseButtonDown(IControl *sender, const MessageMouse &m, bool &processed) = 0;
			virtual void PanelSelectionBackgroundColor_OnLeftMouseButtonDown(IControl *sender, const MessageMouse &m, bool &processed) = 0;
			virtual void ButtonOkForm_OnClick(IControl *sender) = 0;
			virtual void PanelHighlightBorderColorLeft_OnLeftMouseButtonUp(IControl *sender, const MessageMouse &m, bool &processed) = 0;
			virtual void PanelHighlightBorderColorTop_OnLeftMouseButtonUp(IControl *sender, const MessageMouse &m, bool &processed) = 0;
			virtual void PanelHighlightBorderColorRight_OnLeftMouseButtonUp(IControl *sender, const MessageMouse &m, bool &processed) = 0;
			virtual void PanelHighlightBorderColorBottom_OnLeftMouseButtonUp(IControl *sender, const MessageMouse &m, bool &processed) = 0;

		private:
			void Initialize()
			{
				// Create components
				m_pColorDialog = new standard::CColorDialog();
				m_pColorDialog->setName(L"ColorDialog");

				// Create controls
				m_pGroupBox1 = new standard::CGroupBox(this);
				m_pGroupBox1->setName(L"GroupBox1");
				m_pCheckBoxXAxis = new standard::CCheckBox(m_pGroupBox1);
				m_pCheckBoxXAxis->setName(L"CheckBoxXAxis");
				m_pCheckBoxYAxis = new standard::CCheckBox(m_pGroupBox1);
				m_pCheckBoxYAxis->setName(L"CheckBoxYAxis");
				m_pCheckBoxRotate = new standard::CCheckBox(m_pGroupBox1);
				m_pCheckBoxRotate->setName(L"CheckBoxRotate");
				m_pEditXAxis = new standard::CEdit(m_pGroupBox1);
				m_pEditXAxis->setName(L"EditXAxis");
				m_pEditYAxis = new standard::CEdit(m_pGroupBox1);
				m_pEditYAxis->setName(L"EditYAxis");
				m_pEditRotate = new standard::CEdit(m_pGroupBox1);
				m_pEditRotate->setName(L"EditRotate");
				m_pPanelGridColor = new standard::CPanel(m_pGroupBox1);
				m_pPanelGridColor->setName(L"PanelGridColor");
				m_pLabel1 = new standard::CLabel(m_pGroupBox1);
				m_pLabel1->setName(L"Label1");
				m_pEditRotateShift = new standard::CEdit(m_pGroupBox1);
				m_pEditRotateShift->setName(L"EditRotateShift");
				m_pLabel2 = new standard::CLabel(m_pGroupBox1);
				m_pLabel2->setName(L"Label2");
				m_pEditPointSize = new standard::CEdit(m_pGroupBox1);
				m_pEditPointSize->setName(L"EditPointSize");
				m_pLabel3 = new standard::CLabel(m_pGroupBox1);
				m_pLabel3->setName(L"Label3");
				m_pButtonOk = new standard::CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new standard::CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");
				m_pGroupBox2 = new standard::CGroupBox(this);
				m_pGroupBox2->setName(L"GroupBox2");
				m_pLabel4 = new standard::CLabel(m_pGroupBox2);
				m_pLabel4->setName(L"Label4");
				m_pEditNamespace = new standard::CEdit(m_pGroupBox2);
				m_pEditNamespace->setName(L"EditNamespace");
				m_pLabel5 = new standard::CLabel(m_pGroupBox2);
				m_pLabel5->setName(L"Label5");
				m_pEditPrefix = new standard::CEdit(m_pGroupBox2);
				m_pEditPrefix->setName(L"EditPrefix");
				m_pLabel8 = new standard::CLabel(m_pGroupBox2);
				m_pLabel8->setName(L"Label8");
				m_pDropDownWidgetsSection = new standard::CDropDown(m_pGroupBox2);
				m_pDropDownWidgetsSection->setName(L"DropDownWidgetsSection");
				m_pCheckBoxGenerateGetters = new standard::CCheckBox(m_pGroupBox2);
				m_pCheckBoxGenerateGetters->setName(L"CheckBoxGenerateGetters");
				m_pLabel18 = new standard::CLabel(m_pGroupBox2);
				m_pLabel18->setName(L"Label18");
				m_pRadioButtonForm = new standard::CRadioButton(m_pGroupBox2);
				m_pRadioButtonForm->setName(L"RadioButtonForm");
				m_pRadioButtonDialogBox = new standard::CRadioButton(m_pGroupBox2);
				m_pRadioButtonDialogBox->setName(L"RadioButtonDialogBox");
				m_pDropDownDialogBox = new standard::CDropDown(m_pGroupBox2);
				m_pDropDownDialogBox->setName(L"DropDownDialogBox");
				m_pGroupBox3 = new standard::CGroupBox(this);
				m_pGroupBox3->setName(L"GroupBox3");
				m_pLabel6 = new standard::CLabel(m_pGroupBox3);
				m_pLabel6->setName(L"Label6");
				m_pLabel7 = new standard::CLabel(m_pGroupBox3);
				m_pLabel7->setName(L"Label7");
				m_pEditSelectionPointSize = new standard::CEdit(m_pGroupBox3);
				m_pEditSelectionPointSize->setName(L"EditSelectionPointSize");
				m_pEditSelectionBorderWidth = new standard::CEdit(m_pGroupBox3);
				m_pEditSelectionBorderWidth->setName(L"EditSelectionBorderWidth");
				m_pPanelSelectionBorderColor = new standard::CPanel(m_pGroupBox3);
				m_pPanelSelectionBorderColor->setName(L"PanelSelectionBorderColor");
				m_pPanelSelectionBackgroundColor = new standard::CPanel(m_pGroupBox3);
				m_pPanelSelectionBackgroundColor->setName(L"PanelSelectionBackgroundColor");
				m_pLabel9 = new standard::CLabel(m_pGroupBox3);
				m_pLabel9->setName(L"Label9");
				m_pLabel10 = new standard::CLabel(m_pGroupBox3);
				m_pLabel10->setName(L"Label10");
				m_pGroupBox4 = new standard::CGroupBox(this);
				m_pGroupBox4->setName(L"GroupBox4");
				m_pValueListEditorOverwriteIncludes = new standard::CValueListEditor(m_pGroupBox4);
				m_pValueListEditorOverwriteIncludes->setName(L"ValueListEditorOverwriteIncludes");
				m_pGroupBox5 = new standard::CGroupBox(this);
				m_pGroupBox5->setName(L"GroupBox5");
				m_pValueListEditorOverwriteNamespaces = new standard::CValueListEditor(m_pGroupBox5);
				m_pValueListEditorOverwriteNamespaces->setName(L"ValueListEditorOverwriteNamespaces");
				m_pButtonOkForm = new standard::CButton(this);
				m_pButtonOkForm->setName(L"ButtonOkForm");
				m_pGroupBox6 = new standard::CGroupBox(this);
				m_pGroupBox6->setName(L"GroupBox6");
				m_pLabel11 = new standard::CLabel(m_pGroupBox6);
				m_pLabel11->setName(L"Label11");
				m_pLabel12 = new standard::CLabel(m_pGroupBox6);
				m_pLabel12->setName(L"Label12");
				m_pLabel13 = new standard::CLabel(m_pGroupBox6);
				m_pLabel13->setName(L"Label13");
				m_pLabel14 = new standard::CLabel(m_pGroupBox6);
				m_pLabel14->setName(L"Label14");
				m_pLabel15 = new standard::CLabel(m_pGroupBox6);
				m_pLabel15->setName(L"Label15");
				m_pLabel16 = new standard::CLabel(m_pGroupBox6);
				m_pLabel16->setName(L"Label16");
				m_pLabel17 = new standard::CLabel(m_pGroupBox6);
				m_pLabel17->setName(L"Label17");
				m_pEditHighlightBorderWidthLeft = new standard::CEdit(m_pGroupBox6);
				m_pEditHighlightBorderWidthLeft->setName(L"EditHighlightBorderWidthLeft");
				m_pEditHighlightBorderWidthTop = new standard::CEdit(m_pGroupBox6);
				m_pEditHighlightBorderWidthTop->setName(L"EditHighlightBorderWidthTop");
				m_pEditHighlightBorderWidthRight = new standard::CEdit(m_pGroupBox6);
				m_pEditHighlightBorderWidthRight->setName(L"EditHighlightBorderWidthRight");
				m_pEditHighlightBorderWidthBottom = new standard::CEdit(m_pGroupBox6);
				m_pEditHighlightBorderWidthBottom->setName(L"EditHighlightBorderWidthBottom");
				m_pUpDownHighlightBorderWidthLeft = new standard::CUpDown(m_pGroupBox6);
				m_pUpDownHighlightBorderWidthLeft->setName(L"UpDownHighlightBorderWidthLeft");
				m_pUpDownHighlightBorderWidthTop = new standard::CUpDown(m_pGroupBox6);
				m_pUpDownHighlightBorderWidthTop->setName(L"UpDownHighlightBorderWidthTop");
				m_pUpDownHighlightBorderWidthRight = new standard::CUpDown(m_pGroupBox6);
				m_pUpDownHighlightBorderWidthRight->setName(L"UpDownHighlightBorderWidthRight");
				m_pUpDownHighlightBorderWidthBottom = new standard::CUpDown(m_pGroupBox6);
				m_pUpDownHighlightBorderWidthBottom->setName(L"UpDownHighlightBorderWidthBottom");
				m_pBevel1 = new standard::CBevel(m_pGroupBox6);
				m_pBevel1->setName(L"Bevel1");
				m_pPanelHighlightBorderColorLeft = new standard::CPanel(m_pGroupBox6);
				m_pPanelHighlightBorderColorLeft->setName(L"PanelHighlightBorderColorLeft");
				m_pPanelHighlightBorderColorTop = new standard::CPanel(m_pGroupBox6);
				m_pPanelHighlightBorderColorTop->setName(L"PanelHighlightBorderColorTop");
				m_pPanelHighlightBorderColorRight = new standard::CPanel(m_pGroupBox6);
				m_pPanelHighlightBorderColorRight->setName(L"PanelHighlightBorderColorRight");
				m_pPanelHighlightBorderColorBottom = new standard::CPanel(m_pGroupBox6);
				m_pPanelHighlightBorderColorBottom->setName(L"PanelHighlightBorderColorBottom");

				// Initialize components
				m_pColorDialog->setName(L"ColorDialog");
				m_pColorDialog->setUseDialogBox(true);
				m_pColorDialog->Tag = (void*)this;
				m_pColorDialog->OnApply = [](IComponent *sender)->void { ((IDialogBoxConfiguration*)(void*)sender->Tag)->ColorDialog_OnApply(sender); };

				// Initialize controls
				m_pGroupBox1->setName(L"GroupBox1");
				m_pGroupBox1->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pGroupBox1->setSize(PointF{ 313.0f, 89.0f });
				m_pGroupBox1->setCaption(UTF8ToString("Grid Settings"));
				m_pGroupBox1->setUseMask(false);

				m_pCheckBoxXAxis->setName(L"CheckBoxXAxis");
				m_pCheckBoxXAxis->getTransform()->Translate(8.0f, 20.0f, 0.0f);
				m_pCheckBoxXAxis->setTabOrder(1);
				m_pCheckBoxXAxis->setSize(PointF{ 47.0f, 13.0f });
				m_pCheckBoxXAxis->setCaption(UTF8ToString("X-Axis"));
				m_pCheckBoxXAxis->setAutoSize(false);

				m_pCheckBoxYAxis->setName(L"CheckBoxYAxis");
				m_pCheckBoxYAxis->getTransform()->Translate(8.0f, 43.0f, 0.0f);
				m_pCheckBoxYAxis->setTabOrder(3);
				m_pCheckBoxYAxis->setSize(PointF{ 47.0f, 13.0f });
				m_pCheckBoxYAxis->setCaption(UTF8ToString("Y-Axis"));
				m_pCheckBoxYAxis->setAutoSize(false);

				m_pCheckBoxRotate->setName(L"CheckBoxRotate");
				m_pCheckBoxRotate->getTransform()->Translate(8.0f, 66.0f, 0.0f);
				m_pCheckBoxRotate->setTabOrder(5);
				m_pCheckBoxRotate->setSize(PointF{ 50.0f, 13.0f });
				m_pCheckBoxRotate->setCaption(UTF8ToString("Rotate"));
				m_pCheckBoxRotate->setAutoSize(false);

				m_pEditXAxis->setName(L"EditXAxis");
				m_pEditXAxis->getTransform()->Translate(88.0f, 16.0f, 0.0f);
				m_pEditXAxis->setSize(PointF{ 56.0f, 21.0f });
				m_pEditXAxis->setTabOrder(2);
				m_pEditXAxis->setText(UTF8ToString("Edit1"));

				m_pEditYAxis->setName(L"EditYAxis");
				m_pEditYAxis->getTransform()->Translate(88.0f, 40.0f, 0.0f);
				m_pEditYAxis->setSize(PointF{ 56.0f, 21.0f });
				m_pEditYAxis->setTabOrder(4);
				m_pEditYAxis->setText(UTF8ToString("Edit2"));

				m_pEditRotate->setName(L"EditRotate");
				m_pEditRotate->getTransform()->Translate(88.0f, 64.0f, 0.0f);
				m_pEditRotate->setSize(PointF{ 56.0f, 21.0f });
				m_pEditRotate->setTabOrder(6);
				m_pEditRotate->setText(UTF8ToString("Edit3"));

				m_pPanelGridColor->setName(L"PanelGridColor");
				m_pPanelGridColor->getTransform()->Translate(248.0f, 16.0f, 0.0f);
				m_pPanelGridColor->setSize(PointF{ 57.0f, 21.0f });
				m_pPanelGridColor->setCursor(CursorType::Hand);
				m_pPanelGridColor->setCaption(UTF8ToString(""));
				m_pPanelGridColor->setUseMask(false);
				m_pPanelGridColor->OnLeftMouseButtonDown = [](IControl *sender, const MessageMouse &m, bool &processed)->void { parent<IDialogBoxConfiguration*, false>(sender)->PanelGridColor_OnLeftMouseButtonDown(sender, m, processed); };

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(168.0f, 67.0f, 0.0f);
				m_pLabel1->setSize(PointF{ 26.0f, 13.0f });
				m_pLabel1->setCaption(UTF8ToString("Shift:"));
				m_pLabel1->setAutoSize(false);

				m_pEditRotateShift->setName(L"EditRotateShift");
				m_pEditRotateShift->getTransform()->Translate(248.0f, 64.0f, 0.0f);
				m_pEditRotateShift->setSize(PointF{ 56.0f, 21.0f });
				m_pEditRotateShift->setTabOrder(8);
				m_pEditRotateShift->setText(UTF8ToString("Edit1"));

				m_pLabel2->setName(L"Label2");
				m_pLabel2->getTransform()->Translate(168.0f, 44.0f, 0.0f);
				m_pLabel2->setSize(PointF{ 50.0f, 13.0f });
				m_pLabel2->setCaption(UTF8ToString("Point Size:"));
				m_pLabel2->setAutoSize(false);

				m_pEditPointSize->setName(L"EditPointSize");
				m_pEditPointSize->getTransform()->Translate(248.0f, 40.0f, 0.0f);
				m_pEditPointSize->setSize(PointF{ 56.0f, 21.0f });
				m_pEditPointSize->setTabOrder(7);
				m_pEditPointSize->setText(UTF8ToString("Edit1"));

				m_pLabel3->setName(L"Label3");
				m_pLabel3->getTransform()->Translate(168.0f, 18.0f, 0.0f);
				m_pLabel3->setSize(PointF{ 56.0f, 13.0f });
				m_pLabel3->setCaption(UTF8ToString("Point Color:"));
				m_pLabel3->setAutoSize(false);

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(120.0f, 560.0f, 0.0f);
				m_pButtonOk->setTabOrder(25);
				m_pButtonOk->setCaption(UTF8ToString("Apply globally"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxConfiguration*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(232.0f, 560.0f, 0.0f);
				m_pButtonCancel->setTabOrder(26);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxConfiguration*, false>(sender)->ButtonCancel_OnClick(sender); };

				m_pGroupBox2->setName(L"GroupBox2");
				m_pGroupBox2->getTransform()->Translate(328.0f, 384.0f, 0.0f);
				m_pGroupBox2->setSize(PointF{ 313.0f, 169.0f });
				m_pGroupBox2->setCaption(UTF8ToString("Export"));
				m_pGroupBox2->setUseMask(false);

				m_pLabel4->setName(L"Label4");
				m_pLabel4->getTransform()->Translate(8.0f, 19.0f, 0.0f);
				m_pLabel4->setSize(PointF{ 59.0f, 13.0f });
				m_pLabel4->setCaption(UTF8ToString("Namespace:"));
				m_pLabel4->setAutoSize(false);

				m_pEditNamespace->setName(L"EditNamespace");
				m_pEditNamespace->getTransform()->Translate(168.0f, 16.0f, 0.0f);
				m_pEditNamespace->setSize(PointF{ 136.0f, 20.0f });
				m_pEditNamespace->setTabOrder(17);
				m_pEditNamespace->setText(UTF8ToString("Edit1"));

				m_pLabel5->setName(L"Label5");
				m_pLabel5->getTransform()->Translate(8.0f, 42.0f, 0.0f);
				m_pLabel5->setCaption(UTF8ToString("Widgets prefix:"));

				m_pEditPrefix->setName(L"EditPrefix");
				m_pEditPrefix->getTransform()->Translate(168.0f, 40.0f, 0.0f);
				m_pEditPrefix->setSize(PointF{ 136.0f, 20.0f });
				m_pEditPrefix->setTabOrder(18);
				m_pEditPrefix->setText(UTF8ToString("Edit1"));

				m_pLabel8->setName(L"Label8");
				m_pLabel8->getTransform()->Translate(8.0f, 68.0f, 0.0f);
				m_pLabel8->setCaption(UTF8ToString("Widgets section:"));

				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setName(UTF8ToString("public"));
					item->setActive(true);
					item->setCaption(UTF8ToString("public"));
					m_pDropDownWidgetsSection->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setName(UTF8ToString("protected"));
					item->setCaption(UTF8ToString("protected"));
					m_pDropDownWidgetsSection->AddItem(item);
				}
				{
					standard::CListItemLabel *item{ new standard::CListItemLabel() };
					item->setName(UTF8ToString("private"));
					item->setCaption(UTF8ToString("private"));
					m_pDropDownWidgetsSection->AddItem(item);
				}
				m_pDropDownWidgetsSection->setName(L"DropDownWidgetsSection");
				m_pDropDownWidgetsSection->getTransform()->Translate(168.0f, 64.0f, 0.0f);
				m_pDropDownWidgetsSection->setSize(PointF{ 137.0f, 21.0f });
				m_pDropDownWidgetsSection->setTabOrder(19);
				m_pDropDownWidgetsSection->setText(UTF8ToString("public"));
				m_pDropDownWidgetsSection->setEditable(false);
				m_pDropDownWidgetsSection->setActiveIndex(0);

				m_pCheckBoxGenerateGetters->setName(L"CheckBoxGenerateGetters");
				m_pCheckBoxGenerateGetters->getTransform()->Translate(168.0f, 96.0f, 0.0f);
				m_pCheckBoxGenerateGetters->setTabOrder(20);
				m_pCheckBoxGenerateGetters->setCaption(UTF8ToString("Generate getters"));

				m_pLabel18->setName(L"Label18");
				m_pLabel18->getTransform()->Translate(8.0f, 120.0f, 0.0f);
				m_pLabel18->setCaption(UTF8ToString("Export as:"));

				m_pRadioButtonForm->setName(L"RadioButtonForm");
				m_pRadioButtonForm->getTransform()->Translate(88.0f, 120.0f, 0.0f);
				m_pRadioButtonForm->setTabOrder(21);
				m_pRadioButtonForm->setCaption(UTF8ToString("Form"));
				m_pRadioButtonForm->setChecked(true);
				m_pRadioButtonForm->OnChange = [](IControl *sender)->void { parent<IDialogBoxConfiguration*, false>(sender)->RadioButtonForm_OnChange(sender); };

				m_pRadioButtonDialogBox->setName(L"RadioButtonDialogBox");
				m_pRadioButtonDialogBox->getTransform()->Translate(168.0f, 120.0f, 0.0f);
				m_pRadioButtonDialogBox->setTabOrder(22);
				m_pRadioButtonDialogBox->setCaption(UTF8ToString("DialogBox"));
				m_pRadioButtonDialogBox->OnChange = [](IControl *sender)->void { parent<IDialogBoxConfiguration*, false>(sender)->RadioButtonDialogBox_OnChange(sender); };

				m_pDropDownDialogBox->setName(L"DropDownDialogBox");
				m_pDropDownDialogBox->getTransform()->Translate(168.0f, 144.0f, 0.0f);
				m_pDropDownDialogBox->setSize(PointF{ 137.0f, 21.0f });
				m_pDropDownDialogBox->setTabOrder(23);
				m_pDropDownDialogBox->setEnabled(false);
				m_pDropDownDialogBox->setEditable(false);
				m_pDropDownDialogBox->setOpenDirection(CBuiltInDropDown::OpenDirection::Up);

				m_pGroupBox3->setName(L"GroupBox3");
				m_pGroupBox3->getTransform()->Translate(8.0f, 104.0f, 0.0f);
				m_pGroupBox3->setSize(PointF{ 313.0f, 121.0f });
				m_pGroupBox3->setCaption(UTF8ToString("Selection"));
				m_pGroupBox3->setUseMask(false);

				m_pLabel6->setName(L"Label6");
				m_pLabel6->getTransform()->Translate(8.0f, 16.0f, 0.0f);
				m_pLabel6->setSize(PointF{ 50.0f, 13.0f });
				m_pLabel6->setCaption(UTF8ToString("Point Size:"));
				m_pLabel6->setAutoSize(false);

				m_pLabel7->setName(L"Label7");
				m_pLabel7->getTransform()->Translate(8.0f, 40.0f, 0.0f);
				m_pLabel7->setSize(PointF{ 67.0f, 13.0f });
				m_pLabel7->setCaption(UTF8ToString("Border Width:"));
				m_pLabel7->setAutoSize(false);

				m_pEditSelectionPointSize->setName(L"EditSelectionPointSize");
				m_pEditSelectionPointSize->getTransform()->Translate(168.0f, 16.0f, 0.0f);
				m_pEditSelectionPointSize->setSize(PointF{ 136.0f, 21.0f });
				m_pEditSelectionPointSize->setTabOrder(9);
				m_pEditSelectionPointSize->setText(UTF8ToString("Edit1"));

				m_pEditSelectionBorderWidth->setName(L"EditSelectionBorderWidth");
				m_pEditSelectionBorderWidth->getTransform()->Translate(168.0f, 40.0f, 0.0f);
				m_pEditSelectionBorderWidth->setSize(PointF{ 136.0f, 21.0f });
				m_pEditSelectionBorderWidth->setTabOrder(10);
				m_pEditSelectionBorderWidth->setText(UTF8ToString("Edit2"));

				m_pPanelSelectionBorderColor->setName(L"PanelSelectionBorderColor");
				m_pPanelSelectionBorderColor->getTransform()->Translate(168.0f, 64.0f, 0.0f);
				m_pPanelSelectionBorderColor->setSize(PointF{ 137.0f, 21.0f });
				m_pPanelSelectionBorderColor->setCursor(CursorType::Hand);
				m_pPanelSelectionBorderColor->setCaption(UTF8ToString(""));
				m_pPanelSelectionBorderColor->setUseMask(false);
				m_pPanelSelectionBorderColor->OnLeftMouseButtonDown = [](IControl *sender, const MessageMouse &m, bool &processed)->void { parent<IDialogBoxConfiguration*, false>(sender)->PanelSelectionBorderColor_OnLeftMouseButtonDown(sender, m, processed); };

				m_pPanelSelectionBackgroundColor->setName(L"PanelSelectionBackgroundColor");
				m_pPanelSelectionBackgroundColor->getTransform()->Translate(168.0f, 88.0f, 0.0f);
				m_pPanelSelectionBackgroundColor->setSize(PointF{ 137.0f, 21.0f });
				m_pPanelSelectionBackgroundColor->setCursor(CursorType::Hand);
				m_pPanelSelectionBackgroundColor->setCaption(UTF8ToString(""));
				m_pPanelSelectionBackgroundColor->OnLeftMouseButtonDown = [](IControl *sender, const MessageMouse &m, bool &processed)->void { parent<IDialogBoxConfiguration*, false>(sender)->PanelSelectionBackgroundColor_OnLeftMouseButtonDown(sender, m, processed); };

				m_pLabel9->setName(L"Label9");
				m_pLabel9->getTransform()->Translate(8.0f, 68.0f, 0.0f);
				m_pLabel9->setSize(PointF{ 64.0f, 13.0f });
				m_pLabel9->setCaption(UTF8ToString("Border Color:"));
				m_pLabel9->setAutoSize(false);

				m_pLabel10->setName(L"Label10");
				m_pLabel10->getTransform()->Translate(8.0f, 92.0f, 0.0f);
				m_pLabel10->setSize(PointF{ 88.0f, 13.0f });
				m_pLabel10->setCaption(UTF8ToString("Background Color:"));
				m_pLabel10->setAutoSize(false);

				m_pGroupBox4->setName(L"GroupBox4");
				m_pGroupBox4->getTransform()->Translate(328.0f, 8.0f, 0.0f);
				m_pGroupBox4->setSize(PointF{ 314.0f, 185.0f });
				m_pGroupBox4->setCaption(UTF8ToString("Overwrite includes"));
				m_pGroupBox4->setUseMask(false);

				m_pValueListEditorOverwriteIncludes->setName(L"ValueListEditorOverwriteIncludes");
				m_pValueListEditorOverwriteIncludes->getTransform()->Translate(5.0f, 15.0f, 0.0f);
				m_pValueListEditorOverwriteIncludes->setSize(PointF{ 304.0f, 165.0f });
				m_pValueListEditorOverwriteIncludes->setTabOrder(15);
				m_pValueListEditorOverwriteIncludes->setAlign(Align::Client);
				m_pValueListEditorOverwriteIncludes->setKeyColumnTitle(UTF8ToString("Search"));
				m_pValueListEditorOverwriteIncludes->setValueColumnTitle(UTF8ToString("Replace with"));
				m_pValueListEditorOverwriteIncludes->setKeysEditable(true);
				m_pValueListEditorOverwriteIncludes->setKeysDeletable(true);
				m_pValueListEditorOverwriteIncludes->setKeysAddable(true);

				m_pGroupBox5->setName(L"GroupBox5");
				m_pGroupBox5->getTransform()->Translate(328.0f, 200.0f, 0.0f);
				m_pGroupBox5->setSize(PointF{ 314.0f, 177.0f });
				m_pGroupBox5->setCaption(UTF8ToString("Overwrite namespaces"));
				m_pGroupBox5->setUseMask(false);

				m_pValueListEditorOverwriteNamespaces->setName(L"ValueListEditorOverwriteNamespaces");
				m_pValueListEditorOverwriteNamespaces->getTransform()->Translate(5.0f, 15.0f, 0.0f);
				m_pValueListEditorOverwriteNamespaces->setSize(PointF{ 304.0f, 157.0f });
				m_pValueListEditorOverwriteNamespaces->setTabOrder(16);
				m_pValueListEditorOverwriteNamespaces->setAlign(Align::Client);
				m_pValueListEditorOverwriteNamespaces->setKeyColumnTitle(UTF8ToString("Search"));
				m_pValueListEditorOverwriteNamespaces->setValueColumnTitle(UTF8ToString("Replace with"));
				m_pValueListEditorOverwriteNamespaces->setKeysEditable(true);
				m_pValueListEditorOverwriteNamespaces->setKeysDeletable(true);
				m_pValueListEditorOverwriteNamespaces->setKeysAddable(true);

				m_pButtonOkForm->setName(L"ButtonOkForm");
				m_pButtonOkForm->getTransform()->Translate(8.0f, 560.0f, 0.0f);
				m_pButtonOkForm->setTabOrder(24);
				m_pButtonOkForm->setCaption(UTF8ToString("Apply to form only"));
				m_pButtonOkForm->OnClick = [](IControl *sender)->void { parent<IDialogBoxConfiguration*, false>(sender)->ButtonOkForm_OnClick(sender); };

				m_pGroupBox6->setName(L"GroupBox6");
				m_pGroupBox6->getTransform()->Translate(8.0f, 232.0f, 0.0f);
				m_pGroupBox6->setSize(PointF{ 313.0f, 145.0f });
				m_pGroupBox6->setCaption(UTF8ToString("Form Editor highlight"));
				m_pGroupBox6->setUseMask(false);

				m_pLabel11->setName(L"Label11");
				m_pLabel11->getTransform()->Translate(8.0f, 20.0f, 0.0f);
				m_pLabel11->setCaption(UTF8ToString("Border:"));

				m_pLabel12->setName(L"Label12");
				m_pLabel12->getTransform()->Translate(88.0f, 20.0f, 0.0f);
				m_pLabel12->setCaption(UTF8ToString("Width:"));

				m_pLabel13->setName(L"Label13");
				m_pLabel13->getTransform()->Translate(168.0f, 20.0f, 0.0f);
				m_pLabel13->setCaption(UTF8ToString("Color:"));

				m_pLabel14->setName(L"Label14");
				m_pLabel14->getTransform()->Translate(8.0f, 44.0f, 0.0f);
				m_pLabel14->setCaption(UTF8ToString("Left:"));

				m_pLabel15->setName(L"Label15");
				m_pLabel15->getTransform()->Translate(8.0f, 68.0f, 0.0f);
				m_pLabel15->setCaption(UTF8ToString("Top:"));

				m_pLabel16->setName(L"Label16");
				m_pLabel16->getTransform()->Translate(8.0f, 92.0f, 0.0f);
				m_pLabel16->setCaption(UTF8ToString("Right:"));

				m_pLabel17->setName(L"Label17");
				m_pLabel17->getTransform()->Translate(8.0f, 116.0f, 0.0f);
				m_pLabel17->setCaption(UTF8ToString("Bottom:"));

				m_pEditHighlightBorderWidthLeft->setName(L"EditHighlightBorderWidthLeft");
				m_pEditHighlightBorderWidthLeft->getTransform()->Translate(88.0f, 40.0f, 0.0f);
				m_pEditHighlightBorderWidthLeft->setSize(PointF{ 56.0f, 21.0f });
				m_pEditHighlightBorderWidthLeft->setTabOrder(11);
				m_pEditHighlightBorderWidthLeft->setText(UTF8ToString("1"));

				m_pEditHighlightBorderWidthTop->setName(L"EditHighlightBorderWidthTop");
				m_pEditHighlightBorderWidthTop->getTransform()->Translate(88.0f, 64.0f, 0.0f);
				m_pEditHighlightBorderWidthTop->setSize(PointF{ 56.0f, 21.0f });
				m_pEditHighlightBorderWidthTop->setTabOrder(12);
				m_pEditHighlightBorderWidthTop->setText(UTF8ToString("1"));

				m_pEditHighlightBorderWidthRight->setName(L"EditHighlightBorderWidthRight");
				m_pEditHighlightBorderWidthRight->getTransform()->Translate(88.0f, 88.0f, 0.0f);
				m_pEditHighlightBorderWidthRight->setSize(PointF{ 56.0f, 21.0f });
				m_pEditHighlightBorderWidthRight->setTabOrder(13);
				m_pEditHighlightBorderWidthRight->setText(UTF8ToString("1"));

				m_pEditHighlightBorderWidthBottom->setName(L"EditHighlightBorderWidthBottom");
				m_pEditHighlightBorderWidthBottom->getTransform()->Translate(88.0f, 112.0f, 0.0f);
				m_pEditHighlightBorderWidthBottom->setSize(PointF{ 56.0f, 21.0f });
				m_pEditHighlightBorderWidthBottom->setTabOrder(14);
				m_pEditHighlightBorderWidthBottom->setText(UTF8ToString("1"));

				m_pUpDownHighlightBorderWidthLeft->setName(L"UpDownHighlightBorderWidthLeft");
				m_pUpDownHighlightBorderWidthLeft->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownHighlightBorderWidthLeft->setMax(32);
				m_pUpDownHighlightBorderWidthLeft->setValue(1);
				m_pUpDownHighlightBorderWidthLeft->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditHighlightBorderWidthLeft")));
				m_pUpDownHighlightBorderWidthLeft->getTransform()->Translate(144.0f, 40.0f, 0.0f);

				m_pUpDownHighlightBorderWidthTop->setName(L"UpDownHighlightBorderWidthTop");
				m_pUpDownHighlightBorderWidthTop->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownHighlightBorderWidthTop->setMax(32);
				m_pUpDownHighlightBorderWidthTop->setValue(1);
				m_pUpDownHighlightBorderWidthTop->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditHighlightBorderWidthTop")));
				m_pUpDownHighlightBorderWidthTop->getTransform()->Translate(144.0f, 64.0f, 0.0f);

				m_pUpDownHighlightBorderWidthRight->setName(L"UpDownHighlightBorderWidthRight");
				m_pUpDownHighlightBorderWidthRight->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownHighlightBorderWidthRight->setMax(32);
				m_pUpDownHighlightBorderWidthRight->setValue(1);
				m_pUpDownHighlightBorderWidthRight->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditHighlightBorderWidthRight")));
				m_pUpDownHighlightBorderWidthRight->getTransform()->Translate(144.0f, 88.0f, 0.0f);

				m_pUpDownHighlightBorderWidthBottom->setName(L"UpDownHighlightBorderWidthBottom");
				m_pUpDownHighlightBorderWidthBottom->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownHighlightBorderWidthBottom->setMax(32);
				m_pUpDownHighlightBorderWidthBottom->setValue(1);
				m_pUpDownHighlightBorderWidthBottom->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditHighlightBorderWidthBottom")));
				m_pUpDownHighlightBorderWidthBottom->getTransform()->Translate(144.0f, 112.0f, 0.0f);

				m_pBevel1->setName(L"Bevel1");
				m_pBevel1->getTransform()->Translate(8.0f, 36.0f, 0.0f);
				m_pBevel1->setSize(PointF{ 294.0f, 2.0f });
				m_pBevel1->setBevelKind(standard::IBevel::BevelKind::TopEdge);

				m_pPanelHighlightBorderColorLeft->setName(L"PanelHighlightBorderColorLeft");
				m_pPanelHighlightBorderColorLeft->getTransform()->Translate(168.0f, 40.0f, 0.0f);
				m_pPanelHighlightBorderColorLeft->setSize(PointF{ 136.0f, 21.0f });
				m_pPanelHighlightBorderColorLeft->setCursor(CursorType::Hand);
				m_pPanelHighlightBorderColorLeft->setCaption(UTF8ToString(""));
				m_pPanelHighlightBorderColorLeft->setUseMask(false);
				m_pPanelHighlightBorderColorLeft->OnLeftMouseButtonUp = [](IControl *sender, const MessageMouse &m, bool &processed)->void { parent<IDialogBoxConfiguration*, false>(sender)->PanelHighlightBorderColorLeft_OnLeftMouseButtonUp(sender, m, processed); };

				m_pPanelHighlightBorderColorTop->setName(L"PanelHighlightBorderColorTop");
				m_pPanelHighlightBorderColorTop->getTransform()->Translate(168.0f, 64.0f, 0.0f);
				m_pPanelHighlightBorderColorTop->setSize(PointF{ 136.0f, 21.0f });
				m_pPanelHighlightBorderColorTop->setCursor(CursorType::Hand);
				m_pPanelHighlightBorderColorTop->setCaption(UTF8ToString(""));
				m_pPanelHighlightBorderColorTop->setUseMask(false);
				m_pPanelHighlightBorderColorTop->OnLeftMouseButtonUp = [](IControl *sender, const MessageMouse &m, bool &processed)->void { parent<IDialogBoxConfiguration*, false>(sender)->PanelHighlightBorderColorTop_OnLeftMouseButtonUp(sender, m, processed); };

				m_pPanelHighlightBorderColorRight->setName(L"PanelHighlightBorderColorRight");
				m_pPanelHighlightBorderColorRight->getTransform()->Translate(168.0f, 88.0f, 0.0f);
				m_pPanelHighlightBorderColorRight->setSize(PointF{ 136.0f, 21.0f });
				m_pPanelHighlightBorderColorRight->setCursor(CursorType::Hand);
				m_pPanelHighlightBorderColorRight->setCaption(UTF8ToString(""));
				m_pPanelHighlightBorderColorRight->setUseMask(false);
				m_pPanelHighlightBorderColorRight->OnLeftMouseButtonUp = [](IControl *sender, const MessageMouse &m, bool &processed)->void { parent<IDialogBoxConfiguration*, false>(sender)->PanelHighlightBorderColorRight_OnLeftMouseButtonUp(sender, m, processed); };

				m_pPanelHighlightBorderColorBottom->setName(L"PanelHighlightBorderColorBottom");
				m_pPanelHighlightBorderColorBottom->getTransform()->Translate(168.0f, 112.0f, 0.0f);
				m_pPanelHighlightBorderColorBottom->setSize(PointF{ 136.0f, 21.0f });
				m_pPanelHighlightBorderColorBottom->setCursor(CursorType::Hand);
				m_pPanelHighlightBorderColorBottom->setCaption(UTF8ToString(""));
				m_pPanelHighlightBorderColorBottom->setUseMask(false);
				m_pPanelHighlightBorderColorBottom->OnLeftMouseButtonUp = [](IControl *sender, const MessageMouse &m, bool &processed)->void { parent<IDialogBoxConfiguration*, false>(sender)->PanelHighlightBorderColorBottom_OnLeftMouseButtonUp(sender, m, processed); };


			}

		public:
			IDialogBoxConfiguration(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				standard::CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxConfigurationService(this)),
				m_pColorDialog{ nullptr },
				m_pGroupBox1{ nullptr },
				m_pCheckBoxXAxis{ nullptr },
				m_pCheckBoxYAxis{ nullptr },
				m_pCheckBoxRotate{ nullptr },
				m_pEditXAxis{ nullptr },
				m_pEditYAxis{ nullptr },
				m_pEditRotate{ nullptr },
				m_pPanelGridColor{ nullptr },
				m_pLabel1{ nullptr },
				m_pEditRotateShift{ nullptr },
				m_pLabel2{ nullptr },
				m_pEditPointSize{ nullptr },
				m_pLabel3{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr },
				m_pGroupBox2{ nullptr },
				m_pLabel4{ nullptr },
				m_pEditNamespace{ nullptr },
				m_pLabel5{ nullptr },
				m_pEditPrefix{ nullptr },
				m_pLabel8{ nullptr },
				m_pDropDownWidgetsSection{ nullptr },
				m_pCheckBoxGenerateGetters{ nullptr },
				m_pLabel18{ nullptr },
				m_pRadioButtonForm{ nullptr },
				m_pRadioButtonDialogBox{ nullptr },
				m_pDropDownDialogBox{ nullptr },
				m_pGroupBox3{ nullptr },
				m_pLabel6{ nullptr },
				m_pLabel7{ nullptr },
				m_pEditSelectionPointSize{ nullptr },
				m_pEditSelectionBorderWidth{ nullptr },
				m_pPanelSelectionBorderColor{ nullptr },
				m_pPanelSelectionBackgroundColor{ nullptr },
				m_pLabel9{ nullptr },
				m_pLabel10{ nullptr },
				m_pGroupBox4{ nullptr },
				m_pValueListEditorOverwriteIncludes{ nullptr },
				m_pGroupBox5{ nullptr },
				m_pValueListEditorOverwriteNamespaces{ nullptr },
				m_pButtonOkForm{ nullptr },
				m_pGroupBox6{ nullptr },
				m_pLabel11{ nullptr },
				m_pLabel12{ nullptr },
				m_pLabel13{ nullptr },
				m_pLabel14{ nullptr },
				m_pLabel15{ nullptr },
				m_pLabel16{ nullptr },
				m_pLabel17{ nullptr },
				m_pEditHighlightBorderWidthLeft{ nullptr },
				m_pEditHighlightBorderWidthTop{ nullptr },
				m_pEditHighlightBorderWidthRight{ nullptr },
				m_pEditHighlightBorderWidthBottom{ nullptr },
				m_pUpDownHighlightBorderWidthLeft{ nullptr },
				m_pUpDownHighlightBorderWidthTop{ nullptr },
				m_pUpDownHighlightBorderWidthRight{ nullptr },
				m_pUpDownHighlightBorderWidthBottom{ nullptr },
				m_pBevel1{ nullptr },
				m_pPanelHighlightBorderColorLeft{ nullptr },
				m_pPanelHighlightBorderColorTop{ nullptr },
				m_pPanelHighlightBorderColorRight{ nullptr },
				m_pPanelHighlightBorderColorBottom{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxConfiguration");
				setCaption(UTF8ToString("Configuration"));
				setClientSize(Point{ 649, 593 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
				OnKeyDown = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxConfiguration*>(sender)->FormSettings_OnKeyDown(sender, m, processed); };
			}

			~IDialogBoxConfiguration() override
			{
				m_pColorDialog->Release();
			}

			IComponent *getComponent(const String &name)
			{
				if (name == L"ColorDialog")
					return m_pColorDialog;
				return nullptr;
			}

			bool hasComponent(IComponent *component) override
			{
				if (component == m_pColorDialog)
					return true;
				return false;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"GroupBox1" && m_pGroupBox1 != exclude)
					return m_pGroupBox1;
				if (name == L"CheckBoxXAxis" && m_pCheckBoxXAxis != exclude)
					return m_pCheckBoxXAxis;
				if (name == L"CheckBoxYAxis" && m_pCheckBoxYAxis != exclude)
					return m_pCheckBoxYAxis;
				if (name == L"CheckBoxRotate" && m_pCheckBoxRotate != exclude)
					return m_pCheckBoxRotate;
				if (name == L"EditXAxis" && m_pEditXAxis != exclude)
					return m_pEditXAxis;
				if (name == L"EditYAxis" && m_pEditYAxis != exclude)
					return m_pEditYAxis;
				if (name == L"EditRotate" && m_pEditRotate != exclude)
					return m_pEditRotate;
				if (name == L"PanelGridColor" && m_pPanelGridColor != exclude)
					return m_pPanelGridColor;
				if (name == L"Label1" && m_pLabel1 != exclude)
					return m_pLabel1;
				if (name == L"EditRotateShift" && m_pEditRotateShift != exclude)
					return m_pEditRotateShift;
				if (name == L"Label2" && m_pLabel2 != exclude)
					return m_pLabel2;
				if (name == L"EditPointSize" && m_pEditPointSize != exclude)
					return m_pEditPointSize;
				if (name == L"Label3" && m_pLabel3 != exclude)
					return m_pLabel3;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				if (name == L"GroupBox2" && m_pGroupBox2 != exclude)
					return m_pGroupBox2;
				if (name == L"Label4" && m_pLabel4 != exclude)
					return m_pLabel4;
				if (name == L"EditNamespace" && m_pEditNamespace != exclude)
					return m_pEditNamespace;
				if (name == L"Label5" && m_pLabel5 != exclude)
					return m_pLabel5;
				if (name == L"EditPrefix" && m_pEditPrefix != exclude)
					return m_pEditPrefix;
				if (name == L"Label8" && m_pLabel8 != exclude)
					return m_pLabel8;
				if (name == L"DropDownWidgetsSection" && m_pDropDownWidgetsSection != exclude)
					return m_pDropDownWidgetsSection;
				if (name == L"CheckBoxGenerateGetters" && m_pCheckBoxGenerateGetters != exclude)
					return m_pCheckBoxGenerateGetters;
				if (name == L"Label18" && m_pLabel18 != exclude)
					return m_pLabel18;
				if (name == L"RadioButtonForm" && m_pRadioButtonForm != exclude)
					return m_pRadioButtonForm;
				if (name == L"RadioButtonDialogBox" && m_pRadioButtonDialogBox != exclude)
					return m_pRadioButtonDialogBox;
				if (name == L"DropDownDialogBox" && m_pDropDownDialogBox != exclude)
					return m_pDropDownDialogBox;
				if (name == L"GroupBox3" && m_pGroupBox3 != exclude)
					return m_pGroupBox3;
				if (name == L"Label6" && m_pLabel6 != exclude)
					return m_pLabel6;
				if (name == L"Label7" && m_pLabel7 != exclude)
					return m_pLabel7;
				if (name == L"EditSelectionPointSize" && m_pEditSelectionPointSize != exclude)
					return m_pEditSelectionPointSize;
				if (name == L"EditSelectionBorderWidth" && m_pEditSelectionBorderWidth != exclude)
					return m_pEditSelectionBorderWidth;
				if (name == L"PanelSelectionBorderColor" && m_pPanelSelectionBorderColor != exclude)
					return m_pPanelSelectionBorderColor;
				if (name == L"PanelSelectionBackgroundColor" && m_pPanelSelectionBackgroundColor != exclude)
					return m_pPanelSelectionBackgroundColor;
				if (name == L"Label9" && m_pLabel9 != exclude)
					return m_pLabel9;
				if (name == L"Label10" && m_pLabel10 != exclude)
					return m_pLabel10;
				if (name == L"GroupBox4" && m_pGroupBox4 != exclude)
					return m_pGroupBox4;
				if (name == L"ValueListEditorOverwriteIncludes" && m_pValueListEditorOverwriteIncludes != exclude)
					return m_pValueListEditorOverwriteIncludes;
				if (name == L"GroupBox5" && m_pGroupBox5 != exclude)
					return m_pGroupBox5;
				if (name == L"ValueListEditorOverwriteNamespaces" && m_pValueListEditorOverwriteNamespaces != exclude)
					return m_pValueListEditorOverwriteNamespaces;
				if (name == L"ButtonOkForm" && m_pButtonOkForm != exclude)
					return m_pButtonOkForm;
				if (name == L"GroupBox6" && m_pGroupBox6 != exclude)
					return m_pGroupBox6;
				if (name == L"Label11" && m_pLabel11 != exclude)
					return m_pLabel11;
				if (name == L"Label12" && m_pLabel12 != exclude)
					return m_pLabel12;
				if (name == L"Label13" && m_pLabel13 != exclude)
					return m_pLabel13;
				if (name == L"Label14" && m_pLabel14 != exclude)
					return m_pLabel14;
				if (name == L"Label15" && m_pLabel15 != exclude)
					return m_pLabel15;
				if (name == L"Label16" && m_pLabel16 != exclude)
					return m_pLabel16;
				if (name == L"Label17" && m_pLabel17 != exclude)
					return m_pLabel17;
				if (name == L"EditHighlightBorderWidthLeft" && m_pEditHighlightBorderWidthLeft != exclude)
					return m_pEditHighlightBorderWidthLeft;
				if (name == L"EditHighlightBorderWidthTop" && m_pEditHighlightBorderWidthTop != exclude)
					return m_pEditHighlightBorderWidthTop;
				if (name == L"EditHighlightBorderWidthRight" && m_pEditHighlightBorderWidthRight != exclude)
					return m_pEditHighlightBorderWidthRight;
				if (name == L"EditHighlightBorderWidthBottom" && m_pEditHighlightBorderWidthBottom != exclude)
					return m_pEditHighlightBorderWidthBottom;
				if (name == L"UpDownHighlightBorderWidthLeft" && m_pUpDownHighlightBorderWidthLeft != exclude)
					return m_pUpDownHighlightBorderWidthLeft;
				if (name == L"UpDownHighlightBorderWidthTop" && m_pUpDownHighlightBorderWidthTop != exclude)
					return m_pUpDownHighlightBorderWidthTop;
				if (name == L"UpDownHighlightBorderWidthRight" && m_pUpDownHighlightBorderWidthRight != exclude)
					return m_pUpDownHighlightBorderWidthRight;
				if (name == L"UpDownHighlightBorderWidthBottom" && m_pUpDownHighlightBorderWidthBottom != exclude)
					return m_pUpDownHighlightBorderWidthBottom;
				if (name == L"Bevel1" && m_pBevel1 != exclude)
					return m_pBevel1;
				if (name == L"PanelHighlightBorderColorLeft" && m_pPanelHighlightBorderColorLeft != exclude)
					return m_pPanelHighlightBorderColorLeft;
				if (name == L"PanelHighlightBorderColorTop" && m_pPanelHighlightBorderColorTop != exclude)
					return m_pPanelHighlightBorderColorTop;
				if (name == L"PanelHighlightBorderColorRight" && m_pPanelHighlightBorderColorRight != exclude)
					return m_pPanelHighlightBorderColorRight;
				if (name == L"PanelHighlightBorderColorBottom" && m_pPanelHighlightBorderColorBottom != exclude)
					return m_pPanelHighlightBorderColorBottom;
				return nullptr;
			}

		};
	}
}

