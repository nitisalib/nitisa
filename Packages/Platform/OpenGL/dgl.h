// This file is a part of Nitisa framework
// Copyright © 2021 Nitisa. All rights reserved.
// Author: Dimitry Lysenko
// Site: http://nitisa.com
// Download: http://nitisa.com/downloads
// Documentation: http://nitisa.com/documentation
// License: http://nitisa.com/site/license

#pragma once

#include "ngl.h"

namespace nitisa
{
	class IErrorListener;
}

extern "C"
{
#if defined(_WIN32) || (defined(__linux__) && !defined(__ANDROID__))
	// 1.0
	void APIENTRY dglCullFace(GLenum mode);
	void APIENTRY dglFrontFace(GLenum mode);
	void APIENTRY dglHint(GLenum target, GLenum mode);
	void APIENTRY dglLineWidth(GLfloat width);
	void APIENTRY dglPointSize(GLfloat size);
	void APIENTRY dglPolygonMode(GLenum face, GLenum mode);
	void APIENTRY dglScissor(GLint x, GLint y, GLsizei width, GLsizei height);
	void APIENTRY dglTexParameterf(GLenum target, GLenum pname, GLfloat param);
	void APIENTRY dglTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
	void APIENTRY dglTexParameteri(GLenum target, GLenum pname, GLint param);
	void APIENTRY dglTexParameteriv(GLenum target, GLenum pname, const GLint *params);
	void APIENTRY dglTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
	void APIENTRY dglTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
	void APIENTRY dglDrawBuffer(GLenum buf);
	void APIENTRY dglClear(GLbitfield mask);
	void APIENTRY dglClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void APIENTRY dglClearStencil(GLint s);
	void APIENTRY dglClearDepth(GLdouble depth);
	void APIENTRY dglStencilMask(GLuint mask);
	void APIENTRY dglColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	void APIENTRY dglDepthMask(GLboolean flag);
	void APIENTRY dglDisable(GLenum cap);
	void APIENTRY dglEnable(GLenum cap);
	void APIENTRY dglFinish();
	void APIENTRY dglFlush();
	void APIENTRY dglBlendFunc(GLenum sfactor, GLenum dfactor);
	void APIENTRY dglLogicOp(GLenum opcode);
	void APIENTRY dglStencilFunc(GLenum func, GLint ref, GLuint mask);
	void APIENTRY dglStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
	void APIENTRY dglDepthFunc(GLenum func);
	void APIENTRY dglPixelStoref(GLenum pname, GLfloat param);
	void APIENTRY dglPixelStorei(GLenum pname, GLint param);
	void APIENTRY dglReadBuffer(GLenum src);
	void APIENTRY dglReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
	void APIENTRY dglGetBooleanv(GLenum pname, GLboolean *data);
	void APIENTRY dglGetDoublev(GLenum pname, GLdouble *data);
	void APIENTRY dglGetFloatv(GLenum pname, GLfloat *data);
	void APIENTRY dglGetIntegerv(GLenum pname, GLint *data);
	const GLubyte *APIENTRY dglGetString(GLenum name);
	void APIENTRY dglGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
	void APIENTRY dglGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
	void APIENTRY dglGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
	void APIENTRY dglGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
	void APIENTRY dglGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
	GLboolean APIENTRY dglIsEnabled(GLenum cap);
	void APIENTRY dglDepthRange(GLdouble n, GLdouble f);
	void APIENTRY dglViewport(GLint x, GLint y, GLsizei width, GLsizei height);

	// 1.1
	void APIENTRY dglDrawArrays(GLenum mode, GLint first, GLsizei count);
	void APIENTRY dglDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices);
	void APIENTRY dglGetPointerv(GLenum pname, void **params);
	void APIENTRY dglPolygonOffset(GLfloat factor, GLfloat units);
	void APIENTRY dglCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	void APIENTRY dglCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	void APIENTRY dglCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	void APIENTRY dglCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void APIENTRY dglTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
	void APIENTRY dglTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
	void APIENTRY dglBindTexture(GLenum target, GLuint texture);
	void APIENTRY dglDeleteTextures(GLsizei n, const GLuint *textures);
	void APIENTRY dglGenTextures(GLsizei n, GLuint *textures);
	GLboolean APIENTRY dglIsTexture(GLuint texture);

	// 1.2
	void APIENTRY dglDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
	void APIENTRY dglTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
	void APIENTRY dglTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	void APIENTRY dglCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);

	// 1.3
	void APIENTRY dglActiveTexture(GLenum texture);
	void APIENTRY dglSampleCoverage(GLfloat value, GLboolean invert);
	void APIENTRY dglCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
	void APIENTRY dglCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
	void APIENTRY dglCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
	void APIENTRY dglCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
	void APIENTRY dglCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
	void APIENTRY dglCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
	void APIENTRY dglGetCompressedTexImage(GLenum target, GLint level, void *img);

	// 1.4
	void APIENTRY dglBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	void APIENTRY dglMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
	void APIENTRY dglMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
	void APIENTRY dglPointParameterf(GLenum pname, GLfloat param);
	void APIENTRY dglPointParameterfv(GLenum pname, const GLfloat *params);
	void APIENTRY dglPointParameteri(GLenum pname, GLint param);
	void APIENTRY dglPointParameteriv(GLenum pname, const GLint *params);
	void APIENTRY dglBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void APIENTRY dglBlendEquation(GLenum mode);

	// 1.5
	void APIENTRY dglGenQueries(GLsizei n, GLuint *ids);
	void APIENTRY dglDeleteQueries(GLsizei n, const GLuint *ids);
	GLboolean APIENTRY dglIsQuery(GLuint id);
	void APIENTRY dglBeginQuery(GLenum target, GLuint id);
	void APIENTRY dglEndQuery(GLenum target);
	void APIENTRY dglGetQueryiv(GLenum target, GLenum pname, GLint *params);
	void APIENTRY dglGetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
	void APIENTRY dglGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
	void APIENTRY dglBindBuffer(GLenum target, GLuint buffer);
	void APIENTRY dglDeleteBuffers(GLsizei n, const GLuint *buffers);
	void APIENTRY dglGenBuffers(GLsizei n, GLuint *buffers);
	GLboolean APIENTRY dglIsBuffer(GLuint buffer);
	void APIENTRY dglBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
	void APIENTRY dglBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
	void APIENTRY dglGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
	void *APIENTRY dglMapBuffer(GLenum target, GLenum access);
	GLboolean APIENTRY dglUnmapBuffer(GLenum target);
	void APIENTRY dglGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
	void APIENTRY dglGetBufferPointerv(GLenum target, GLenum pname, void **params);

	// 2.0
	void APIENTRY dglBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
	void APIENTRY dglDrawBuffers(GLsizei n, const GLenum *bufs);
	void APIENTRY dglStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	void APIENTRY dglStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
	void APIENTRY dglStencilMaskSeparate(GLenum face, GLuint mask);
	void APIENTRY dglAttachShader(GLuint program, GLuint shader);
	void APIENTRY dglBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
	void APIENTRY dglCompileShader(GLuint shader);
	GLuint APIENTRY dglCreateProgram();
	GLuint APIENTRY dglCreateShader(GLenum type);
	void APIENTRY dglDeleteProgram(GLuint program);
	void APIENTRY dglDeleteShader(GLuint shader);
	void APIENTRY dglDetachShader(GLuint program, GLuint shader);
	void APIENTRY dglDisableVertexAttribArray(GLuint index);
	void APIENTRY dglEnableVertexAttribArray(GLuint index);
	void APIENTRY dglGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	void APIENTRY dglGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	void APIENTRY dglGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
	GLint APIENTRY dglGetAttribLocation(GLuint program, const GLchar *name);
	void APIENTRY dglGetProgramiv(GLuint program, GLenum pname, GLint *params);
	void APIENTRY dglGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	void APIENTRY dglGetShaderiv(GLuint shader, GLenum pname, GLint *params);
	void APIENTRY dglGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	void APIENTRY dglGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
	GLint APIENTRY dglGetUniformLocation(GLuint program, const GLchar *name);
	void APIENTRY dglGetUniformfv(GLuint program, GLint location, GLfloat *params);
	void APIENTRY dglGetUniformiv(GLuint program, GLint location, GLint *params);
	void APIENTRY dglGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
	void APIENTRY dglGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
	void APIENTRY dglGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
	void APIENTRY dglGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
	GLboolean APIENTRY dglIsProgram(GLuint program);
	GLboolean APIENTRY dglIsShader(GLuint shader);
	void APIENTRY dglLinkProgram(GLuint program);
	void APIENTRY dglShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
	void APIENTRY dglUseProgram(GLuint program);
	void APIENTRY dglUniform1f(GLint location, GLfloat v0);
	void APIENTRY dglUniform2f(GLint location, GLfloat v0, GLfloat v1);
	void APIENTRY dglUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	void APIENTRY dglUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	void APIENTRY dglUniform1i(GLint location, GLint v0);
	void APIENTRY dglUniform2i(GLint location, GLint v0, GLint v1);
	void APIENTRY dglUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
	void APIENTRY dglUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	void APIENTRY dglUniform1fv(GLint location, GLsizei count, const GLfloat *value);
	void APIENTRY dglUniform2fv(GLint location, GLsizei count, const GLfloat *value);
	void APIENTRY dglUniform3fv(GLint location, GLsizei count, const GLfloat *value);
	void APIENTRY dglUniform4fv(GLint location, GLsizei count, const GLfloat *value);
	void APIENTRY dglUniform1iv(GLint location, GLsizei count, const GLint *value);
	void APIENTRY dglUniform2iv(GLint location, GLsizei count, const GLint *value);
	void APIENTRY dglUniform3iv(GLint location, GLsizei count, const GLint *value);
	void APIENTRY dglUniform4iv(GLint location, GLsizei count, const GLint *value);
	void APIENTRY dglUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglValidateProgram(GLuint program);
	void APIENTRY dglVertexAttrib1d(GLuint index, GLdouble x);
	void APIENTRY dglVertexAttrib1dv(GLuint index, const GLdouble *v);
	void APIENTRY dglVertexAttrib1f(GLuint index, GLfloat x);
	void APIENTRY dglVertexAttrib1fv(GLuint index, const GLfloat *v);
	void APIENTRY dglVertexAttrib1s(GLuint index, GLshort x);
	void APIENTRY dglVertexAttrib1sv(GLuint index, const GLshort *v);
	void APIENTRY dglVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
	void APIENTRY dglVertexAttrib2dv(GLuint index, const GLdouble *v);
	void APIENTRY dglVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
	void APIENTRY dglVertexAttrib2fv(GLuint index, const GLfloat *v);
	void APIENTRY dglVertexAttrib2s(GLuint index, GLshort x, GLshort y);
	void APIENTRY dglVertexAttrib2sv(GLuint index, const GLshort *v);
	void APIENTRY dglVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	void APIENTRY dglVertexAttrib3dv(GLuint index, const GLdouble *v);
	void APIENTRY dglVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	void APIENTRY dglVertexAttrib3fv(GLuint index, const GLfloat *v);
	void APIENTRY dglVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
	void APIENTRY dglVertexAttrib3sv(GLuint index, const GLshort *v);
	void APIENTRY dglVertexAttrib4Nbv(GLuint index, const GLbyte *v);
	void APIENTRY dglVertexAttrib4Niv(GLuint index, const GLint *v);
	void APIENTRY dglVertexAttrib4Nsv(GLuint index, const GLshort *v);
	void APIENTRY dglVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	void APIENTRY dglVertexAttrib4Nubv(GLuint index, const GLubyte *v);
	void APIENTRY dglVertexAttrib4Nuiv(GLuint index, const GLuint *v);
	void APIENTRY dglVertexAttrib4Nusv(GLuint index, const GLushort *v);
	void APIENTRY dglVertexAttrib4bv(GLuint index, const GLbyte *v);
	void APIENTRY dglVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void APIENTRY dglVertexAttrib4dv(GLuint index, const GLdouble *v);
	void APIENTRY dglVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void APIENTRY dglVertexAttrib4fv(GLuint index, const GLfloat *v);
	void APIENTRY dglVertexAttrib4iv(GLuint index, const GLint *v);
	void APIENTRY dglVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	void APIENTRY dglVertexAttrib4sv(GLuint index, const GLshort *v);
	void APIENTRY dglVertexAttrib4ubv(GLuint index, const GLubyte *v);
	void APIENTRY dglVertexAttrib4uiv(GLuint index, const GLuint *v);
	void APIENTRY dglVertexAttrib4usv(GLuint index, const GLushort *v);
	void APIENTRY dglVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);

	// 2.1
	void APIENTRY dglUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);

	// 3.0
	void APIENTRY dglColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	void APIENTRY dglGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
	void APIENTRY dglGetIntegeri_v(GLenum target, GLuint index, GLint *data);
	void APIENTRY dglEnablei(GLenum target, GLuint index);
	void APIENTRY dglDisablei(GLenum target, GLuint index);
	GLboolean APIENTRY dglIsEnabledi(GLenum target, GLuint index);
	void APIENTRY dglBeginTransformFeedback(GLenum primitiveMode);
	void APIENTRY dglEndTransformFeedback();
	void APIENTRY dglBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	void APIENTRY dglBindBufferBase(GLenum target, GLuint index, GLuint buffer);
	void APIENTRY dglTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
	void APIENTRY dglGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
	void APIENTRY dglClampColor(GLenum target, GLenum clamp);
	void APIENTRY dglBeginConditionalRender(GLuint id, GLenum mode);
	void APIENTRY dglEndConditionalRender();
	void APIENTRY dglVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	void APIENTRY dglGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
	void APIENTRY dglGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
	void APIENTRY dglVertexAttribI1i(GLuint index, GLint x);
	void APIENTRY dglVertexAttribI2i(GLuint index, GLint x, GLint y);
	void APIENTRY dglVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
	void APIENTRY dglVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
	void APIENTRY dglVertexAttribI1ui(GLuint index, GLuint x);
	void APIENTRY dglVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
	void APIENTRY dglVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
	void APIENTRY dglVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	void APIENTRY dglVertexAttribI1iv(GLuint index, const GLint *v);
	void APIENTRY dglVertexAttribI2iv(GLuint index, const GLint *v);
	void APIENTRY dglVertexAttribI3iv(GLuint index, const GLint *v);
	void APIENTRY dglVertexAttribI4iv(GLuint index, const GLint *v);
	void APIENTRY dglVertexAttribI1uiv(GLuint index, const GLuint *v);
	void APIENTRY dglVertexAttribI2uiv(GLuint index, const GLuint *v);
	void APIENTRY dglVertexAttribI3uiv(GLuint index, const GLuint *v);
	void APIENTRY dglVertexAttribI4uiv(GLuint index, const GLuint *v);
	void APIENTRY dglVertexAttribI4bv(GLuint index, const GLbyte *v);
	void APIENTRY dglVertexAttribI4sv(GLuint index, const GLshort *v);
	void APIENTRY dglVertexAttribI4ubv(GLuint index, const GLubyte *v);
	void APIENTRY dglVertexAttribI4usv(GLuint index, const GLushort *v);
	void APIENTRY dglGetUniformuiv(GLuint program, GLint location, GLuint *params);
	void APIENTRY dglBindFragDataLocation(GLuint program, GLuint color, const GLchar *name);
	GLint APIENTRY dglGetFragDataLocation(GLuint program, const GLchar *name);
	void APIENTRY dglUniform1ui(GLint location, GLuint v0);
	void APIENTRY dglUniform2ui(GLint location, GLuint v0, GLuint v1);
	void APIENTRY dglUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
	void APIENTRY dglUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	void APIENTRY dglUniform1uiv(GLint location, GLsizei count, const GLuint *value);
	void APIENTRY dglUniform2uiv(GLint location, GLsizei count, const GLuint *value);
	void APIENTRY dglUniform3uiv(GLint location, GLsizei count, const GLuint *value);
	void APIENTRY dglUniform4uiv(GLint location, GLsizei count, const GLuint *value);
	void APIENTRY dglTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
	void APIENTRY dglTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
	void APIENTRY dglGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
	void APIENTRY dglGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
	void APIENTRY dglClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
	void APIENTRY dglClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
	void APIENTRY dglClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
	void APIENTRY dglClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	const GLubyte *APIENTRY dglGetStringi(GLenum name, GLuint index);
	GLboolean APIENTRY dglIsRenderbuffer(GLuint renderbuffer);
	void APIENTRY dglBindRenderbuffer(GLenum target, GLuint renderbuffer);
	void APIENTRY dglDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
	void APIENTRY dglGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
	void APIENTRY dglRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	void APIENTRY dglGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
	GLboolean APIENTRY dglIsFramebuffer(GLuint framebuffer);
	void APIENTRY dglBindFramebuffer(GLenum target, GLuint framebuffer);
	void APIENTRY dglDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
	void APIENTRY dglGenFramebuffers(GLsizei n, GLuint *framebuffers);
	GLenum APIENTRY dglCheckFramebufferStatus(GLenum target);
	void APIENTRY dglFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void APIENTRY dglFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void APIENTRY dglFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	void APIENTRY dglFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	void APIENTRY dglGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
	void APIENTRY dglGenerateMipmap(GLenum target);
	void APIENTRY dglBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	void APIENTRY dglRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	void APIENTRY dglFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	void *APIENTRY dglMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	void APIENTRY dglFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
	void APIENTRY dglBindVertexArray(GLuint array);
	void APIENTRY dglDeleteVertexArrays(GLsizei n, const GLuint *arrays);
	void APIENTRY dglGenVertexArrays(GLsizei n, GLuint *arrays);
	GLboolean APIENTRY dglIsVertexArray(GLuint array);

	// 3.1
	void APIENTRY dglDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
	void APIENTRY dglDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
	void APIENTRY dglTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
	void APIENTRY dglPrimitiveRestartIndex(GLuint index);
	void APIENTRY dglCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	void APIENTRY dglGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
	void APIENTRY dglGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
	void APIENTRY dglGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
	GLuint APIENTRY dglGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
	void APIENTRY dglGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
	void APIENTRY dglGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
	void APIENTRY dglUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);

	// 3.2
	void APIENTRY dglDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
	void APIENTRY dglDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
	void APIENTRY dglDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
	void APIENTRY dglMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
	void APIENTRY dglProvokingVertex(GLenum mode);
	GLsync APIENTRY dglFenceSync(GLenum condition, GLbitfield flags);
	GLboolean APIENTRY dglIsSync(GLsync sync);
	void APIENTRY dglDeleteSync(GLsync sync);
	GLenum APIENTRY dglClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
	void APIENTRY dglWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
	void APIENTRY dglGetInteger64v(GLenum pname, GLint64 *data);
	void APIENTRY dglGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
	void APIENTRY dglGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
	void APIENTRY dglGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
	void APIENTRY dglFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
	void APIENTRY dglTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	void APIENTRY dglTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	void APIENTRY dglGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
	void APIENTRY dglSampleMaski(GLuint maskNumber, GLbitfield mask);

	// 3.3
	void APIENTRY dglBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
	GLint APIENTRY dglGetFragDataIndex(GLuint program, const GLchar *name);
	void APIENTRY dglGenSamplers(GLsizei count, GLuint *samplers);
	void APIENTRY dglDeleteSamplers(GLsizei count, const GLuint *samplers);
	GLboolean APIENTRY dglIsSampler(GLuint sampler);
	void APIENTRY dglBindSampler(GLuint unit, GLuint sampler);
	void APIENTRY dglSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
	void APIENTRY dglSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
	void APIENTRY dglSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
	void APIENTRY dglSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
	void APIENTRY dglSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
	void APIENTRY dglSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
	void APIENTRY dglGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
	void APIENTRY dglGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
	void APIENTRY dglGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
	void APIENTRY dglGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
	void APIENTRY dglQueryCounter(GLuint id, GLenum target);
	void APIENTRY dglGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
	void APIENTRY dglGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
	void APIENTRY dglVertexAttribDivisor(GLuint index, GLuint divisor);
	void APIENTRY dglVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	void APIENTRY dglVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	void APIENTRY dglVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	void APIENTRY dglVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	void APIENTRY dglVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	void APIENTRY dglVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	void APIENTRY dglVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
	void APIENTRY dglVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);

	// 4.0
	void APIENTRY dglMinSampleShading(GLfloat value);
	void APIENTRY dglBlendEquationi(GLuint buf, GLenum mode);
	void APIENTRY dglBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	void APIENTRY dglBlendFunci(GLuint buf, GLenum src, GLenum dst);
	void APIENTRY dglBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	void APIENTRY dglDrawArraysIndirect(GLenum mode, const void *indirect);
	void APIENTRY dglDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect);
	void APIENTRY dglUniform1d(GLint location, GLdouble x);
	void APIENTRY dglUniform2d(GLint location, GLdouble x, GLdouble y);
	void APIENTRY dglUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
	void APIENTRY dglUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void APIENTRY dglUniform1dv(GLint location, GLsizei count, const GLdouble *value);
	void APIENTRY dglUniform2dv(GLint location, GLsizei count, const GLdouble *value);
	void APIENTRY dglUniform3dv(GLint location, GLsizei count, const GLdouble *value);
	void APIENTRY dglUniform4dv(GLint location, GLsizei count, const GLdouble *value);
	void APIENTRY dglUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglGetUniformdv(GLuint program, GLint location, GLdouble *params);
	GLint APIENTRY dglGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
	GLuint APIENTRY dglGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
	void APIENTRY dglGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
	void APIENTRY dglGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
	void APIENTRY dglGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
	void APIENTRY dglUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
	void APIENTRY dglGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
	void APIENTRY dglGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
	void APIENTRY dglPatchParameteri(GLenum pname, GLint value);
	void APIENTRY dglPatchParameterfv(GLenum pname, const GLfloat *values);
	void APIENTRY dglBindTransformFeedback(GLenum target, GLuint id);
	void APIENTRY dglDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
	void APIENTRY dglGenTransformFeedbacks(GLsizei n, GLuint *ids);
	GLboolean APIENTRY dglIsTransformFeedback(GLuint id);
	void APIENTRY dglPauseTransformFeedback();
	void APIENTRY dglResumeTransformFeedback();
	void APIENTRY dglDrawTransformFeedback(GLenum mode, GLuint id);
	void APIENTRY dglDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
	void APIENTRY dglBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
	void APIENTRY dglEndQueryIndexed(GLenum target, GLuint index);
	void APIENTRY dglGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);

	// 4.1
	void APIENTRY dglReleaseShaderCompiler();
	void APIENTRY dglShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
	void APIENTRY dglGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
	void APIENTRY dglDepthRangef(GLfloat n, GLfloat f);
	void APIENTRY dglClearDepthf(GLfloat d);
	void APIENTRY dglGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
	void APIENTRY dglProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
	void APIENTRY dglProgramParameteri(GLuint program, GLenum pname, GLint value);
	void APIENTRY dglUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
	void APIENTRY dglActiveShaderProgram(GLuint pipeline, GLuint program);
	GLuint APIENTRY dglCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings);
	void APIENTRY dglBindProgramPipeline(GLuint pipeline);
	void APIENTRY dglDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
	void APIENTRY dglGenProgramPipelines(GLsizei n, GLuint *pipelines);
	GLboolean APIENTRY dglIsProgramPipeline(GLuint pipeline);
	void APIENTRY dglGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
	void APIENTRY dglProgramUniform1i(GLuint program, GLint location, GLint v0);
	void APIENTRY dglProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	void APIENTRY dglProgramUniform1f(GLuint program, GLint location, GLfloat v0);
	void APIENTRY dglProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	void APIENTRY dglProgramUniform1d(GLuint program, GLint location, GLdouble v0);
	void APIENTRY dglProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	void APIENTRY dglProgramUniform1ui(GLuint program, GLint location, GLuint v0);
	void APIENTRY dglProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	void APIENTRY dglProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
	void APIENTRY dglProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	void APIENTRY dglProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
	void APIENTRY dglProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	void APIENTRY dglProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
	void APIENTRY dglProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	void APIENTRY dglProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
	void APIENTRY dglProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	void APIENTRY dglProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	void APIENTRY dglProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	void APIENTRY dglProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	void APIENTRY dglProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	void APIENTRY dglProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
	void APIENTRY dglProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	void APIENTRY dglProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	void APIENTRY dglProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	void APIENTRY dglProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	void APIENTRY dglProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	void APIENTRY dglProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	void APIENTRY dglProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	void APIENTRY dglProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
	void APIENTRY dglProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
	void APIENTRY dglProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	void APIENTRY dglProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	void APIENTRY dglProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void APIENTRY dglProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	void APIENTRY dglValidateProgramPipeline(GLuint pipeline);
	void APIENTRY dglGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	void APIENTRY dglVertexAttribL1d(GLuint index, GLdouble x);
	void APIENTRY dglVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
	void APIENTRY dglVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
	void APIENTRY dglVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void APIENTRY dglVertexAttribL1dv(GLuint index, const GLdouble *v);
	void APIENTRY dglVertexAttribL2dv(GLuint index, const GLdouble *v);
	void APIENTRY dglVertexAttribL3dv(GLuint index, const GLdouble *v);
	void APIENTRY dglVertexAttribL4dv(GLuint index, const GLdouble *v);
	void APIENTRY dglVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	void APIENTRY dglGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
	void APIENTRY dglViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
	void APIENTRY dglViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
	void APIENTRY dglViewportIndexedfv(GLuint index, const GLfloat *v);
	void APIENTRY dglScissorArrayv(GLuint first, GLsizei count, const GLint *v);
	void APIENTRY dglScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
	void APIENTRY dglScissorIndexedv(GLuint index, const GLint *v);
	void APIENTRY dglDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v);
	void APIENTRY dglDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
	void APIENTRY dglGetFloati_v(GLenum target, GLuint index, GLfloat *data);
	void APIENTRY dglGetDoublei_v(GLenum target, GLuint index, GLdouble *data);

	// 4.2
	void APIENTRY dglDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
	void APIENTRY dglDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
	void APIENTRY dglDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
	void APIENTRY dglGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
	void APIENTRY dglGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
	void APIENTRY dglBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
	void APIENTRY dglMemoryBarrier(GLbitfield barriers);
	void APIENTRY dglTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
	void APIENTRY dglTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	void APIENTRY dglTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	void APIENTRY dglDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
	void APIENTRY dglDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);

	// 4.3
	void APIENTRY dglClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
	void APIENTRY dglClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
	void APIENTRY dglDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
	void APIENTRY dglDispatchComputeIndirect(GLintptr indirect);
	void APIENTRY dglCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
	void APIENTRY dglFramebufferParameteri(GLenum target, GLenum pname, GLint param);
	void APIENTRY dglGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
	void APIENTRY dglGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
	void APIENTRY dglInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
	void APIENTRY dglInvalidateTexImage(GLuint texture, GLint level);
	void APIENTRY dglInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
	void APIENTRY dglInvalidateBufferData(GLuint buffer);
	void APIENTRY dglInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
	void APIENTRY dglInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	void APIENTRY dglMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
	void APIENTRY dglMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
	void APIENTRY dglGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
	GLuint APIENTRY dglGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
	void APIENTRY dglGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
	void APIENTRY dglGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
	GLint APIENTRY dglGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
	GLint APIENTRY dglGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name);
	void APIENTRY dglShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
	void APIENTRY dglTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	void APIENTRY dglTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	void APIENTRY dglTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	void APIENTRY dglTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
	void APIENTRY dglBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	void APIENTRY dglVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	void APIENTRY dglVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	void APIENTRY dglVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	void APIENTRY dglVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
	void APIENTRY dglVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
	void APIENTRY dglDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
	void APIENTRY dglDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
	void APIENTRY dglDebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
	GLuint APIENTRY dglGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
	void APIENTRY dglPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
	void APIENTRY dglPopDebugGroup();
	void APIENTRY dglObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
	void APIENTRY dglGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
	void APIENTRY dglObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
	void APIENTRY dglGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);

	// 4.4
	void APIENTRY dglBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
	void APIENTRY dglClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
	void APIENTRY dglClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
	void APIENTRY dglBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
	void APIENTRY dglBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
	void APIENTRY dglBindTextures(GLuint first, GLsizei count, const GLuint *textures);
	void APIENTRY dglBindSamplers(GLuint first, GLsizei count, const GLuint *samplers);
	void APIENTRY dglBindImageTextures(GLuint first, GLsizei count, const GLuint *textures);
	void APIENTRY dglBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);

	// 4.5
	void APIENTRY dglClipControl(GLenum origin, GLenum depth);
	void APIENTRY dglCreateTransformFeedbacks(GLsizei n, GLuint *ids);
	void APIENTRY dglTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer);
	void APIENTRY dglTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	void APIENTRY dglGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param);
	void APIENTRY dglGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param);
	void APIENTRY dglGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
	void APIENTRY dglCreateBuffers(GLsizei n, GLuint *buffers);
	void APIENTRY dglNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
	void APIENTRY dglNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
	void APIENTRY dglNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
	void APIENTRY dglCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	void APIENTRY dglClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
	void APIENTRY dglClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
	void *APIENTRY dglMapNamedBuffer(GLuint buffer, GLenum access);
	void *APIENTRY dglMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
	GLboolean APIENTRY dglUnmapNamedBuffer(GLuint buffer);
	void APIENTRY dglFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length);
	void APIENTRY dglGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params);
	void APIENTRY dglGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params);
	void APIENTRY dglGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params);
	void APIENTRY dglGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
	void APIENTRY dglCreateFramebuffers(GLsizei n, GLuint *framebuffers);
	void APIENTRY dglNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	void APIENTRY dglNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param);
	void APIENTRY dglNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
	void APIENTRY dglNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
	void APIENTRY dglNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf);
	void APIENTRY dglNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs);
	void APIENTRY dglNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src);
	void APIENTRY dglInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
	void APIENTRY dglInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	void APIENTRY dglClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
	void APIENTRY dglClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
	void APIENTRY dglClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
	void APIENTRY dglClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	void APIENTRY dglBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	GLenum APIENTRY dglCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target);
	void APIENTRY dglGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param);
	void APIENTRY dglGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
	void APIENTRY dglCreateRenderbuffers(GLsizei n, GLuint *renderbuffers);
	void APIENTRY dglNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
	void APIENTRY dglNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	void APIENTRY dglGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params);
	void APIENTRY dglCreateTextures(GLenum target, GLsizei n, GLuint *textures);
	void APIENTRY dglTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer);
	void APIENTRY dglTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	void APIENTRY dglTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
	void APIENTRY dglTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	void APIENTRY dglTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	void APIENTRY dglTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	void APIENTRY dglTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	void APIENTRY dglTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
	void APIENTRY dglTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
	void APIENTRY dglTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	void APIENTRY dglCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
	void APIENTRY dglCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
	void APIENTRY dglCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
	void APIENTRY dglCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	void APIENTRY dglCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void APIENTRY dglCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void APIENTRY dglTextureParameterf(GLuint texture, GLenum pname, GLfloat param);
	void APIENTRY dglTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param);
	void APIENTRY dglTextureParameteri(GLuint texture, GLenum pname, GLint param);
	void APIENTRY dglTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params);
	void APIENTRY dglTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params);
	void APIENTRY dglTextureParameteriv(GLuint texture, GLenum pname, const GLint *param);
	void APIENTRY dglGenerateTextureMipmap(GLuint texture);
	void APIENTRY dglBindTextureUnit(GLuint unit, GLuint texture);
	void APIENTRY dglGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
	void APIENTRY dglGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
	void APIENTRY dglGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params);
	void APIENTRY dglGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params);
	void APIENTRY dglGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params);
	void APIENTRY dglGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params);
	void APIENTRY dglGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params);
	void APIENTRY dglGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params);
	void APIENTRY dglCreateVertexArrays(GLsizei n, GLuint *arrays);
	void APIENTRY dglDisableVertexArrayAttrib(GLuint vaobj, GLuint index);
	void APIENTRY dglEnableVertexArrayAttrib(GLuint vaobj, GLuint index);
	void APIENTRY dglVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);
	void APIENTRY dglVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	void APIENTRY dglVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
	void APIENTRY dglVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
	void APIENTRY dglVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	void APIENTRY dglVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	void APIENTRY dglVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	void APIENTRY dglVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
	void APIENTRY dglGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param);
	void APIENTRY dglGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
	void APIENTRY dglGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
	void APIENTRY dglCreateSamplers(GLsizei n, GLuint *samplers);
	void APIENTRY dglCreateProgramPipelines(GLsizei n, GLuint *pipelines);
	void APIENTRY dglCreateQueries(GLenum target, GLsizei n, GLuint *ids);
	void APIENTRY dglGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	void APIENTRY dglGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	void APIENTRY dglGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	void APIENTRY dglGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
	void APIENTRY dglMemoryBarrierByRegion(GLbitfield barriers);
	void APIENTRY dglGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
	void APIENTRY dglGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
	GLenum APIENTRY dglGetGraphicsResetStatus();
	void APIENTRY dglGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
	void APIENTRY dglGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
	void APIENTRY dglGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
	void APIENTRY dglGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
	void APIENTRY dglGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params);
	void APIENTRY dglGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
	void APIENTRY dglReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
	void APIENTRY dglTextureBarrier();

	// 4.6
	void APIENTRY dglSpecializeShader(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
	void APIENTRY dglMultiDrawArraysIndirectCount(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
	void APIENTRY dglMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
	void APIENTRY dglPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp);
#elif defined(__ANDROID__)
	// 2.0
	void GL_APIENTRY dglActiveTexture(GLenum texture);
	void GL_APIENTRY dglAttachShader(GLuint program, GLuint shader);
	void GL_APIENTRY dglBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
	void GL_APIENTRY dglBindBuffer(GLenum target, GLuint buffer);
	void GL_APIENTRY dglBindFramebuffer(GLenum target, GLuint framebuffer);
	void GL_APIENTRY dglBindRenderbuffer(GLenum target, GLuint renderbuffer);
	void GL_APIENTRY dglBindTexture(GLenum target, GLuint texture);
	void GL_APIENTRY dglBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void GL_APIENTRY dglBlendEquation(GLenum mode);
	void GL_APIENTRY dglBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
	void GL_APIENTRY dglBlendFunc(GLenum sfactor, GLenum dfactor);
	void GL_APIENTRY dglBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	void GL_APIENTRY dglBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
	void GL_APIENTRY dglBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
	GLenum GL_APIENTRY dglCheckFramebufferStatus(GLenum target);
	void GL_APIENTRY dglClear(GLbitfield mask);
	void GL_APIENTRY dglClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void GL_APIENTRY dglClearDepthf(GLfloat d);
	void GL_APIENTRY dglClearStencil(GLint s);
	void GL_APIENTRY dglColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	void GL_APIENTRY dglCompileShader(GLuint shader);
	void GL_APIENTRY dglCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
	void GL_APIENTRY dglCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
	void GL_APIENTRY dglCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	void GL_APIENTRY dglCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	GLuint GL_APIENTRY dglCreateProgram();
	GLuint GL_APIENTRY dglCreateShader(GLenum type);
	void GL_APIENTRY dglCullFace(GLenum mode);
	void GL_APIENTRY dglDeleteBuffers(GLsizei n, const GLuint *buffers);
	void GL_APIENTRY dglDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
	void GL_APIENTRY dglDeleteProgram(GLuint program);
	void GL_APIENTRY dglDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
	void GL_APIENTRY dglDeleteShader(GLuint shader);
	void GL_APIENTRY dglDeleteTextures(GLsizei n, const GLuint *textures);
	void GL_APIENTRY dglDepthFunc(GLenum func);
	void GL_APIENTRY dglDepthMask(GLboolean flag);
	void GL_APIENTRY dglDepthRangef(GLfloat n, GLfloat f);
	void GL_APIENTRY dglDetachShader(GLuint program, GLuint shader);
	void GL_APIENTRY dglDisable(GLenum cap);
	void GL_APIENTRY dglDisableVertexAttribArray(GLuint index);
	void GL_APIENTRY dglDrawArrays(GLenum mode, GLint first, GLsizei count);
	void GL_APIENTRY dglDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices);
	void GL_APIENTRY dglEnable(GLenum cap);
	void GL_APIENTRY dglEnableVertexAttribArray(GLuint index);
	void GL_APIENTRY dglFinish();
	void GL_APIENTRY dglFlush();
	void GL_APIENTRY dglFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	void GL_APIENTRY dglFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	void GL_APIENTRY dglFrontFace(GLenum mode);
	void GL_APIENTRY dglGenBuffers(GLsizei n, GLuint *buffers);
	void GL_APIENTRY dglGenerateMipmap(GLenum target);
	void GL_APIENTRY dglGenFramebuffers(GLsizei n, GLuint *framebuffers);
	void GL_APIENTRY dglGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
	void GL_APIENTRY dglGenTextures(GLsizei n, GLuint *textures);
	void GL_APIENTRY dglGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	void GL_APIENTRY dglGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	void GL_APIENTRY dglGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
	GLint GL_APIENTRY dglGetAttribLocation(GLuint program, const GLchar *name);
	void GL_APIENTRY dglGetBooleanv(GLenum pname, GLboolean *data);
	void GL_APIENTRY dglGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
	GLenum GL_APIENTRY dglGetError();
	void GL_APIENTRY dglGetFloatv(GLenum pname, GLfloat *data);
	void GL_APIENTRY dglGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetIntegerv(GLenum pname, GLint *data);
	void GL_APIENTRY dglGetProgramiv(GLuint program, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	void GL_APIENTRY dglGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetShaderiv(GLuint shader, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	void GL_APIENTRY dglGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
	void GL_APIENTRY dglGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
	const GLubyte *GL_APIENTRY dglGetString(GLenum name);
	void GL_APIENTRY dglGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
	void GL_APIENTRY dglGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetUniformfv(GLuint program, GLint location, GLfloat *params);
	void GL_APIENTRY dglGetUniformiv(GLuint program, GLint location, GLint *params);
	GLint GL_APIENTRY dglGetUniformLocation(GLuint program, const GLchar *name);
	void GL_APIENTRY dglGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
	void GL_APIENTRY dglGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
	void GL_APIENTRY dglHint(GLenum target, GLenum mode);
	GLboolean GL_APIENTRY dglIsBuffer(GLuint buffer);
	GLboolean GL_APIENTRY dglIsEnabled(GLenum cap);
	GLboolean GL_APIENTRY dglIsFramebuffer(GLuint framebuffer);
	GLboolean GL_APIENTRY dglIsProgram(GLuint program);
	GLboolean GL_APIENTRY dglIsRenderbuffer(GLuint renderbuffer);
	GLboolean GL_APIENTRY dglIsShader(GLuint shader);
	GLboolean GL_APIENTRY dglIsTexture(GLuint texture);
	void GL_APIENTRY dglLineWidth(GLfloat width);
	void GL_APIENTRY dglLinkProgram(GLuint program);
	void GL_APIENTRY dglPixelStorei(GLenum pname, GLint param);
	void GL_APIENTRY dglPolygonOffset(GLfloat factor, GLfloat units);
	void GL_APIENTRY dglReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
	void GL_APIENTRY dglReleaseShaderCompiler();
	void GL_APIENTRY dglRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	void GL_APIENTRY dglSampleCoverage(GLfloat value, GLboolean invert);
	void GL_APIENTRY dglScissor(GLint x, GLint y, GLsizei width, GLsizei height);
	void GL_APIENTRY dglShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
	void GL_APIENTRY dglShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
	void GL_APIENTRY dglStencilFunc(GLenum func, GLint ref, GLuint mask);
	void GL_APIENTRY dglStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
	void GL_APIENTRY dglStencilMask(GLuint mask);
	void GL_APIENTRY dglStencilMaskSeparate(GLenum face, GLuint mask);
	void GL_APIENTRY dglStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
	void GL_APIENTRY dglStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	void GL_APIENTRY dglTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
	void GL_APIENTRY dglTexParameterf(GLenum target, GLenum pname, GLfloat param);
	void GL_APIENTRY dglTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
	void GL_APIENTRY dglTexParameteri(GLenum target, GLenum pname, GLint param);
	void GL_APIENTRY dglTexParameteriv(GLenum target, GLenum pname, const GLint *params);
	void GL_APIENTRY dglTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
	void GL_APIENTRY dglUniform1f(GLint location, GLfloat v0);
	void GL_APIENTRY dglUniform1fv(GLint location, GLsizei count, const GLfloat *value);
	void GL_APIENTRY dglUniform1i(GLint location, GLint v0);
	void GL_APIENTRY dglUniform1iv(GLint location, GLsizei count, const GLint *value);
	void GL_APIENTRY dglUniform2f(GLint location, GLfloat v0, GLfloat v1);
	void GL_APIENTRY dglUniform2fv(GLint location, GLsizei count, const GLfloat *value);
	void GL_APIENTRY dglUniform2i(GLint location, GLint v0, GLint v1);
	void GL_APIENTRY dglUniform2iv(GLint location, GLsizei count, const GLint *value);
	void GL_APIENTRY dglUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	void GL_APIENTRY dglUniform3fv(GLint location, GLsizei count, const GLfloat *value);
	void GL_APIENTRY dglUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
	void GL_APIENTRY dglUniform3iv(GLint location, GLsizei count, const GLint *value);
	void GL_APIENTRY dglUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	void GL_APIENTRY dglUniform4fv(GLint location, GLsizei count, const GLfloat *value);
	void GL_APIENTRY dglUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	void GL_APIENTRY dglUniform4iv(GLint location, GLsizei count, const GLint *value);
	void GL_APIENTRY dglUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglUseProgram(GLuint program);
	void GL_APIENTRY dglValidateProgram(GLuint program);
	void GL_APIENTRY dglVertexAttrib1f(GLuint index, GLfloat x);
	void GL_APIENTRY dglVertexAttrib1fv(GLuint index, const GLfloat *v);
	void GL_APIENTRY dglVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
	void GL_APIENTRY dglVertexAttrib2fv(GLuint index, const GLfloat *v);
	void GL_APIENTRY dglVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
	void GL_APIENTRY dglVertexAttrib3fv(GLuint index, const GLfloat *v);
	void GL_APIENTRY dglVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void GL_APIENTRY dglVertexAttrib4fv(GLuint index, const GLfloat *v);
	void GL_APIENTRY dglVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
	void GL_APIENTRY dglViewport(GLint x, GLint y, GLsizei width, GLsizei height);

	// 3.0
	void GL_APIENTRY dglReadBuffer(GLenum src);
	void GL_APIENTRY dglDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
	void GL_APIENTRY dglTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
	void GL_APIENTRY dglTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	void GL_APIENTRY dglCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void GL_APIENTRY dglCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
	void GL_APIENTRY dglCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
	void GL_APIENTRY dglGenQueries(GLsizei n, GLuint *ids);
	void GL_APIENTRY dglDeleteQueries(GLsizei n, const GLuint *ids);
	GLboolean GL_APIENTRY dglIsQuery(GLuint id);
	void GL_APIENTRY dglBeginQuery(GLenum target, GLuint id);
	void GL_APIENTRY dglEndQuery(GLenum target);
	void GL_APIENTRY dglGetQueryiv(GLenum target, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
	GLboolean GL_APIENTRY dglUnmapBuffer(GLenum target);
	void GL_APIENTRY dglGetBufferPointerv(GLenum target, GLenum pname, void **params);
	void GL_APIENTRY dglDrawBuffers(GLsizei n, const GLenum *bufs);
	void GL_APIENTRY dglUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	void GL_APIENTRY dglRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	void GL_APIENTRY dglFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	void *GL_APIENTRY dglMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	void GL_APIENTRY dglFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
	void GL_APIENTRY dglBindVertexArray(GLuint array);
	void GL_APIENTRY dglDeleteVertexArrays(GLsizei n, const GLuint *arrays);
	void GL_APIENTRY dglGenVertexArrays(GLsizei n, GLuint *arrays);
	GLboolean GL_APIENTRY dglIsVertexArray(GLuint array);
	void GL_APIENTRY dglGetIntegeri_v(GLenum target, GLuint index, GLint *data);
	void GL_APIENTRY dglBeginTransformFeedback(GLenum primitiveMode);
	void GL_APIENTRY dglEndTransformFeedback();
	void GL_APIENTRY dglBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	void GL_APIENTRY dglBindBufferBase(GLenum target, GLuint index, GLuint buffer);
	void GL_APIENTRY dglTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
	void GL_APIENTRY dglGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
	void GL_APIENTRY dglVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	void GL_APIENTRY dglGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
	void GL_APIENTRY dglVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
	void GL_APIENTRY dglVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	void GL_APIENTRY dglVertexAttribI4iv(GLuint index, const GLint *v);
	void GL_APIENTRY dglVertexAttribI4uiv(GLuint index, const GLuint *v);
	void GL_APIENTRY dglGetUniformuiv(GLuint program, GLint location, GLuint *params);
	GLint GL_APIENTRY dglGetFragDataLocation(GLuint program, const GLchar *name);
	void GL_APIENTRY dglUniform1ui(GLint location, GLuint v0);
	void GL_APIENTRY dglUniform2ui(GLint location, GLuint v0, GLuint v1);
	void GL_APIENTRY dglUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
	void GL_APIENTRY dglUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	void GL_APIENTRY dglUniform1uiv(GLint location, GLsizei count, const GLuint *value);
	void GL_APIENTRY dglUniform2uiv(GLint location, GLsizei count, const GLuint *value);
	void GL_APIENTRY dglUniform3uiv(GLint location, GLsizei count, const GLuint *value);
	void GL_APIENTRY dglUniform4uiv(GLint location, GLsizei count, const GLuint *value);
	void GL_APIENTRY dglClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
	void GL_APIENTRY dglClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
	void GL_APIENTRY dglClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
	void GL_APIENTRY dglClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	const GLubyte *GL_APIENTRY dglGetStringi(GLenum name, GLuint index);
	void GL_APIENTRY dglCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	void GL_APIENTRY dglGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
	void GL_APIENTRY dglGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
	GLuint GL_APIENTRY dglGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
	void GL_APIENTRY dglGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
	void GL_APIENTRY dglUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
	void GL_APIENTRY dglDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
	void GL_APIENTRY dglDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
	GLsync GL_APIENTRY dglFenceSync(GLenum condition, GLbitfield flags);
	GLboolean GL_APIENTRY dglIsSync(GLsync sync);
	void GL_APIENTRY dglDeleteSync(GLsync sync);
	GLenum GL_APIENTRY dglClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
	void GL_APIENTRY dglWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
	void GL_APIENTRY dglGetInteger64v(GLenum pname, GLint64 *data);
	void GL_APIENTRY dglGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
	void GL_APIENTRY dglGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
	void GL_APIENTRY dglGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
	void GL_APIENTRY dglGenSamplers(GLsizei count, GLuint *samplers);
	void GL_APIENTRY dglDeleteSamplers(GLsizei count, const GLuint *samplers);
	GLboolean GL_APIENTRY dglIsSampler(GLuint sampler);
	void GL_APIENTRY dglBindSampler(GLuint unit, GLuint sampler);
	void GL_APIENTRY dglSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
	void GL_APIENTRY dglSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
	void GL_APIENTRY dglSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
	void GL_APIENTRY dglSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
	void GL_APIENTRY dglGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
	void GL_APIENTRY dglVertexAttribDivisor(GLuint index, GLuint divisor);
	void GL_APIENTRY dglBindTransformFeedback(GLenum target, GLuint id);
	void GL_APIENTRY dglDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
	void GL_APIENTRY dglGenTransformFeedbacks(GLsizei n, GLuint *ids);
	GLboolean GL_APIENTRY dglIsTransformFeedback(GLuint id);
	void GL_APIENTRY dglPauseTransformFeedback();
	void GL_APIENTRY dglResumeTransformFeedback();
	void GL_APIENTRY dglGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
	void GL_APIENTRY dglProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
	void GL_APIENTRY dglProgramParameteri(GLuint program, GLenum pname, GLint value);
	void GL_APIENTRY dglInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
	void GL_APIENTRY dglInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	void GL_APIENTRY dglTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	void GL_APIENTRY dglTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	void GL_APIENTRY dglGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);

	// 3.1
	void GL_APIENTRY dglDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
	void GL_APIENTRY dglDispatchComputeIndirect(GLintptr indirect);
	void GL_APIENTRY dglDrawArraysIndirect(GLenum mode, const void *indirect);
	void GL_APIENTRY dglDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect);
	void GL_APIENTRY dglFramebufferParameteri(GLenum target, GLenum pname, GLint param);
	void GL_APIENTRY dglGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
	GLuint GL_APIENTRY dglGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
	void GL_APIENTRY dglGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
	void GL_APIENTRY dglGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
	GLint GL_APIENTRY dglGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
	void GL_APIENTRY dglUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
	void GL_APIENTRY dglActiveShaderProgram(GLuint pipeline, GLuint program);
	GLuint GL_APIENTRY dglCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings);
	void GL_APIENTRY dglBindProgramPipeline(GLuint pipeline);
	void GL_APIENTRY dglDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
	void GL_APIENTRY dglGenProgramPipelines(GLsizei n, GLuint *pipelines);
	GLboolean GL_APIENTRY dglIsProgramPipeline(GLuint pipeline);
	void GL_APIENTRY dglGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
	void GL_APIENTRY dglProgramUniform1i(GLuint program, GLint location, GLint v0);
	void GL_APIENTRY dglProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
	void GL_APIENTRY dglProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	void GL_APIENTRY dglProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	void GL_APIENTRY dglProgramUniform1ui(GLuint program, GLint location, GLuint v0);
	void GL_APIENTRY dglProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
	void GL_APIENTRY dglProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	void GL_APIENTRY dglProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	void GL_APIENTRY dglProgramUniform1f(GLuint program, GLint location, GLfloat v0);
	void GL_APIENTRY dglProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
	void GL_APIENTRY dglProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	void GL_APIENTRY dglProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	void GL_APIENTRY dglProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	void GL_APIENTRY dglProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	void GL_APIENTRY dglProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	void GL_APIENTRY dglProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
	void GL_APIENTRY dglProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	void GL_APIENTRY dglProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	void GL_APIENTRY dglProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	void GL_APIENTRY dglProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
	void GL_APIENTRY dglProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	void GL_APIENTRY dglProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	void GL_APIENTRY dglProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	void GL_APIENTRY dglProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
	void GL_APIENTRY dglProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	void GL_APIENTRY dglValidateProgramPipeline(GLuint pipeline);
	void GL_APIENTRY dglGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	void GL_APIENTRY dglBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
	void GL_APIENTRY dglGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
	void GL_APIENTRY dglMemoryBarrier(GLbitfield barriers);
	void GL_APIENTRY dglMemoryBarrierByRegion(GLbitfield barriers);
	void GL_APIENTRY dglTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	void GL_APIENTRY dglGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
	void GL_APIENTRY dglSampleMaski(GLuint maskNumber, GLbitfield mask);
	void GL_APIENTRY dglGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
	void GL_APIENTRY dglBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	void GL_APIENTRY dglVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	void GL_APIENTRY dglVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	void GL_APIENTRY dglVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
	void GL_APIENTRY dglVertexBindingDivisor(GLuint bindingindex, GLuint divisor);

	// 3.2
	void GL_APIENTRY dglBlendBarrier();
	void GL_APIENTRY dglCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
	void GL_APIENTRY dglDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
	void GL_APIENTRY dglDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
	void GL_APIENTRY dglDebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
	GLuint GL_APIENTRY dglGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
	void GL_APIENTRY dglPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
	void GL_APIENTRY dglPopDebugGroup();
	void GL_APIENTRY dglObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
	void GL_APIENTRY dglGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
	void GL_APIENTRY dglObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
	void GL_APIENTRY dglGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
	void GL_APIENTRY dglGetPointerv(GLenum pname, void **params);
	void GL_APIENTRY dglEnablei(GLenum target, GLuint index);
	void GL_APIENTRY dglDisablei(GLenum target, GLuint index);
	void GL_APIENTRY dglBlendEquationi(GLuint buf, GLenum mode);
	void GL_APIENTRY dglBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	void GL_APIENTRY dglBlendFunci(GLuint buf, GLenum src, GLenum dst);
	void GL_APIENTRY dglBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	void GL_APIENTRY dglColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	GLboolean GL_APIENTRY dglIsEnabledi(GLenum target, GLuint index);
	void GL_APIENTRY dglDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
	void GL_APIENTRY dglDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
	void GL_APIENTRY dglDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
	void GL_APIENTRY dglFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
	void GL_APIENTRY dglPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
	GLenum GL_APIENTRY dglGetGraphicsResetStatus();
	void GL_APIENTRY dglReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
	void GL_APIENTRY dglGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
	void GL_APIENTRY dglGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params);
	void GL_APIENTRY dglGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
	void GL_APIENTRY dglMinSampleShading(GLfloat value);
	void GL_APIENTRY dglPatchParameteri(GLenum pname, GLint value);
	void GL_APIENTRY dglTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
	void GL_APIENTRY dglTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
	void GL_APIENTRY dglGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
	void GL_APIENTRY dglSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
	void GL_APIENTRY dglSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
	void GL_APIENTRY dglGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
	void GL_APIENTRY dglGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
	void GL_APIENTRY dglTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
	void GL_APIENTRY dglTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	void GL_APIENTRY dglTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#endif
}

void dglListener(nitisa::IErrorListener *listener);