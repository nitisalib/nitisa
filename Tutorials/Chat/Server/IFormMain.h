// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 14:14:34

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormMain.h:
//         #include "IFormMain.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace app
//             {
//                 class CFormMain : public IFormMain // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormMain(); // Declare constructor
//                 };
//             }
//         }
//
//     FormMain.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormMain.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace app
//             {
//                 CFormMain::CFormMain(): // Implement constructor of your form
//                     IFormMain(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormMain::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Align.h"
#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "Standard/Components/ITCPServer.h"
#include "Standard/Components/TCPServer/TCPServer.h"
#include "Standard/Components/Timer/Timer.h"
#include "Standard/Controls/Button/Button.h"
#include "Standard/Controls/Container/Container.h"
#include "Standard/Controls/Edit/Edit.h"
#include "Standard/Controls/Label/Label.h"
#include "Standard/Controls/Memo/Memo.h"
#include "Standard/Controls/StatusBar/StatusBar.h"
#include "Standard/Controls/UpDown/UpDown.h"
#include "Standard/ListItems/StatusPanelLabel/ListItemStatusPanelLabel.h"

namespace nitisa
{
	class IComponent;
	class IControl;

	namespace standard
	{
		class IEdit;
	}

	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace app
	{
		class IFormMain : public CForm
		{
		protected:
			// Components
			standard::CTCPServer *m_pTCPServer;
			standard::CTimer *m_pTimer;

			// Controls
			standard::CContainer *m_pContainer1;
			standard::CLabel *m_pLabel1;
			standard::CEdit *m_pEditPort;
			standard::CUpDown *m_pUpDownPort;
			standard::CButton *m_pButtonStart;
			standard::CButton *m_pButtonStop;
			standard::CStatusBar *m_pStatusBar;
			standard::CMemo *m_pMemoLog;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void TCPServer_OnClientHaveData(standard::ITCPServer *sender, standard::ITCPServer::IClient *client, bool &disconnect) = 0;
			virtual void Timer_OnTimer(IComponent *sender) = 0;
			virtual void ButtonStart_OnClick(IControl *sender) = 0;
			virtual void ButtonStop_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create components
				m_pTCPServer = new standard::CTCPServer(this);
				m_pTCPServer->setName(L"TCPServer");
				m_pTimer = new standard::CTimer(this);
				m_pTimer->setName(L"Timer");

				// Create controls
				m_pContainer1 = new standard::CContainer(this);
				m_pContainer1->setName(L"Container1");
				m_pLabel1 = new standard::CLabel(m_pContainer1);
				m_pLabel1->setName(L"Label1");
				m_pEditPort = new standard::CEdit(m_pContainer1);
				m_pEditPort->setName(L"EditPort");
				m_pUpDownPort = new standard::CUpDown(m_pContainer1);
				m_pUpDownPort->setName(L"UpDownPort");
				m_pButtonStart = new standard::CButton(m_pContainer1);
				m_pButtonStart->setName(L"ButtonStart");
				m_pButtonStop = new standard::CButton(m_pContainer1);
				m_pButtonStop->setName(L"ButtonStop");
				m_pStatusBar = new standard::CStatusBar(this);
				m_pStatusBar->setName(L"StatusBar");
				m_pMemoLog = new standard::CMemo(this);
				m_pMemoLog->setName(L"MemoLog");

				// Initialize components
				m_pTCPServer->setName(L"TCPServer");
				m_pTCPServer->OnClientHaveData = [](standard::ITCPServer *sender, standard::ITCPServer::IClient *client, bool &disconnect)->void { cast<IFormMain*>(sender->getForm())->TCPServer_OnClientHaveData(sender, client, disconnect); };

				m_pTimer->setName(L"Timer");
				m_pTimer->setInterval(2.0f);
				m_pTimer->setEnabled(true);
				m_pTimer->OnTimer = [](IComponent *sender)->void { cast<IFormMain*>(sender->getForm())->Timer_OnTimer(sender); };

				// Initialize controls
				m_pContainer1->setName(L"Container1");
				m_pContainer1->setSize(PointF{ 624.0f, 41.0f });
				m_pContainer1->setAlign(Align::Top);

				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(8.0f, 12.0f, 0.0f);
				m_pLabel1->setSize(PointF{ 24.0f, 13.0f });
				m_pLabel1->setCaption(UTF8ToString("Port:"));
				m_pLabel1->setAutoSize(false);

				m_pEditPort->setName(L"EditPort");
				m_pEditPort->getTransform()->Translate(48.0f, 8.0f, 0.0f);
				m_pEditPort->setTabOrder(3);
				m_pEditPort->setText(UTF8ToString("1000"));

				m_pUpDownPort->setName(L"UpDownPort");
				m_pUpDownPort->setSize(PointF{ 18.0f, 21.0f });
				m_pUpDownPort->setMin(1);
				m_pUpDownPort->setMax(65000);
				m_pUpDownPort->setValue(1000);
				m_pUpDownPort->setAssignedTo(cast<standard::IEdit*>(FindControl(L"EditPort")));
				m_pUpDownPort->getTransform()->Translate(168.0f, 8.0f, 0.0f);

				m_pButtonStart->setName(L"ButtonStart");
				m_pButtonStart->getTransform()->Translate(192.0f, 8.0f, 0.0f);
				m_pButtonStart->setTabOrder(5);
				m_pButtonStart->setCaption(UTF8ToString("Start server"));
				m_pButtonStart->OnClick = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->ButtonStart_OnClick(sender); };

				m_pButtonStop->setName(L"ButtonStop");
				m_pButtonStop->getTransform()->Translate(304.0f, 8.0f, 0.0f);
				m_pButtonStop->setTabOrder(6);
				m_pButtonStop->setEnabled(false);
				m_pButtonStop->setCaption(UTF8ToString("Stop server"));
				m_pButtonStop->OnClick = [](IControl *sender)->void { cast<IFormMain*>(sender->getForm())->ButtonStop_OnClick(sender); };

				{
					standard::CListItemStatusPanelLabel *item{ new standard::CListItemStatusPanelLabel() };
					item->setCaption(UTF8ToString("0 connections"));
					m_pStatusBar->AddItem(item);
				}
				m_pStatusBar->setName(L"StatusBar");
				m_pStatusBar->getTransform()->Translate(0.0f, 424.0f, 0.0f);

				m_pMemoLog->setName(L"MemoLog");
				m_pMemoLog->getTransform()->Translate(0.0f, 41.0f, 0.0f);
				m_pMemoLog->setSize(PointF{ 624.0f, 383.0f });
				m_pMemoLog->setTabOrder(8);
				m_pMemoLog->setAlign(Align::Client);
				m_pMemoLog->setText(UTF8ToString(""));
				m_pMemoLog->setReadOnly(true);


			}

		public:
			IFormMain(IWindow *window, IRenderer *renderer, const String &class_name = L"FormMain", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pTCPServer{ nullptr },
				m_pTimer{ nullptr },
				m_pContainer1{ nullptr },
				m_pLabel1{ nullptr },
				m_pEditPort{ nullptr },
				m_pUpDownPort{ nullptr },
				m_pButtonStart{ nullptr },
				m_pButtonStop{ nullptr },
				m_pStatusBar{ nullptr },
				m_pMemoLog{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormMain");
					setCaption(UTF8ToString("Chat server"));
					setClientSize(Point{ 624, 442 });
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
				}
			}
		};
	}
}
