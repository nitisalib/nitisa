// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:33:26

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormFindProto.h:
//         #include "IFormFindProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CFormFindProto : public IFormFindProto // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormFindProto(); // Declare constructor
//                 };
//             }
//         }
//
//     FormFindProto.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormFindProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CFormFindProto::CFormFindProto(): // Implement constructor of your form
//                     IFormFindProto(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormFindProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/CheckBox/CheckBox.h"
#include "../../Controls/Edit/Edit.h"
#include "../../Controls/GroupBox/GroupBox.h"
#include "../../Controls/Label/Label.h"
#include "../../Controls/RadioButton/RadioButton.h"

namespace nitisa
{
	class IControl;
	class IForm;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace standard
	{
		class IFormFindProto : public CForm
		{
		protected:
			// Controls
			CLabel *m_pLabel1;
			CEdit *m_pEditText;
			CCheckBox *m_pCheckBoxWords;
			CCheckBox *m_pCheckBoxCase;
			CGroupBox *m_pGroupBox1;
			CRadioButton *m_pRadioButtonDown;
			CRadioButton *m_pRadioButtonUp;
			CButton *m_pButtonSearch;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormFindProto_OnKeyUp(IForm *sender, const MessageKey &m) = 0;
			virtual void EditText_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void EditText_OnChange(IControl *sender) = 0;
			virtual void ButtonSearch_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pLabel1 = new CLabel(this);
				m_pLabel1->setName(L"Label1");
				m_pEditText = new CEdit(this);
				m_pEditText->setName(L"EditText");
				m_pCheckBoxWords = new CCheckBox(this);
				m_pCheckBoxWords->setName(L"CheckBoxWords");
				m_pCheckBoxCase = new CCheckBox(this);
				m_pCheckBoxCase->setName(L"CheckBoxCase");
				m_pGroupBox1 = new CGroupBox(this);
				m_pGroupBox1->setName(L"GroupBox1");
				m_pRadioButtonDown = new CRadioButton(m_pGroupBox1);
				m_pRadioButtonDown->setName(L"RadioButtonDown");
				m_pRadioButtonUp = new CRadioButton(m_pGroupBox1);
				m_pRadioButtonUp->setName(L"RadioButtonUp");
				m_pButtonSearch = new CButton(this);
				m_pButtonSearch->setName(L"ButtonSearch");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pLabel1->setName(L"Label1");
				m_pLabel1->getTransform()->Translate(8.0f, 12.0f, 0.0f);
				m_pLabel1->setCaption(UTF8ToString("Find what:"));

				m_pEditText->setName(L"EditText");
				m_pEditText->getTransform()->Translate(104.0f, 8.0f, 0.0f);
				m_pEditText->setSize(PointF{ 352.0f, 21.0f });
				m_pEditText->setTabOrder(2);
				m_pEditText->setText(UTF8ToString(""));
				m_pEditText->OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IFormFindProto*>(sender->getForm())->EditText_OnKeyUp(sender, m, processed); };
				m_pEditText->OnChange = [](IControl *sender)->void { cast<IFormFindProto*>(sender->getForm())->EditText_OnChange(sender); };

				m_pCheckBoxWords->setName(L"CheckBoxWords");
				m_pCheckBoxWords->getTransform()->Translate(8.0f, 48.0f, 0.0f);
				m_pCheckBoxWords->setTabOrder(3);
				m_pCheckBoxWords->setCaption(UTF8ToString("Match whole words"));

				m_pCheckBoxCase->setName(L"CheckBoxCase");
				m_pCheckBoxCase->getTransform()->Translate(8.0f, 72.0f, 0.0f);
				m_pCheckBoxCase->setTabOrder(4);
				m_pCheckBoxCase->setCaption(UTF8ToString("Match case"));

				m_pGroupBox1->setName(L"GroupBox1");
				m_pGroupBox1->getTransform()->Translate(192.0f, 32.0f, 0.0f);
				m_pGroupBox1->setSize(PointF{ 265.0f, 57.0f });
				m_pGroupBox1->setCaption(UTF8ToString("Direction"));
				m_pGroupBox1->setUseMask(false);

				m_pRadioButtonDown->setName(L"RadioButtonDown");
				m_pRadioButtonDown->getTransform()->Translate(88.0f, 24.0f, 0.0f);
				m_pRadioButtonDown->setTabOrder(6);
				m_pRadioButtonDown->setCaption(UTF8ToString("Down"));
				m_pRadioButtonDown->setChecked(true);

				m_pRadioButtonUp->setName(L"RadioButtonUp");
				m_pRadioButtonUp->getTransform()->Translate(16.0f, 24.0f, 0.0f);
				m_pRadioButtonUp->setTabOrder(7);
				m_pRadioButtonUp->setCaption(UTF8ToString("Up"));

				m_pButtonSearch->setName(L"ButtonSearch");
				m_pButtonSearch->getTransform()->Translate(464.0f, 8.0f, 0.0f);
				m_pButtonSearch->setTabOrder(8);
				m_pButtonSearch->setEnabled(false);
				m_pButtonSearch->setCaption(UTF8ToString("Find next"));
				m_pButtonSearch->OnClick = [](IControl *sender)->void { cast<IFormFindProto*>(sender->getForm())->ButtonSearch_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(464.0f, 40.0f, 0.0f);
				m_pButtonCancel->setTabOrder(9);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { cast<IFormFindProto*>(sender->getForm())->ButtonCancel_OnClick(sender); };


			}

		public:
			IFormFindProto(IWindow *window, IRenderer *renderer, const String &class_name = L"FormFindProto", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pLabel1{ nullptr },
				m_pEditText{ nullptr },
				m_pCheckBoxWords{ nullptr },
				m_pCheckBoxCase{ nullptr },
				m_pGroupBox1{ nullptr },
				m_pRadioButtonDown{ nullptr },
				m_pRadioButtonUp{ nullptr },
				m_pButtonSearch{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormFindProto");
					setCaption(UTF8ToString("Find"));
					setClientSize(Point{ 576, 97 });
					setState(WindowState::Hidden);
					setWindowPosition(WindowPosition::MainFormCenter);
					setHasMaximizeBox(false);
					setHasMinimizeBox(false);
					setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
					OnKeyUp = [](IForm *sender, const MessageKey &m)->void { cast<IFormFindProto*>(sender)->FormFindProto_OnKeyUp(sender, m); };
				}
			}
		};
	}
}
