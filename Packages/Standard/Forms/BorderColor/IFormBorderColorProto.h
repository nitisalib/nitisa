// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:42:59

// !!! ATTENTION !!!
// This is an auto-generated file with form declaration and initialization.
// Include it into your form class header file and derive your form from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// For example:
//     FormBorderColorProto.h:
//         #include "IFormBorderColorProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CFormBorderColorProto : public IFormBorderColorProto // Derive your form from class from this file
//                 {
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     CFormBorderColorProto(); // Declare constructor
//                 };
//             }
//         }
//
//     FormBorderColorProto.cpp:
//         #include "Standard/Platform/Windows/Window.h" // Include required platform window management class
//         #include "Standard/Platform/Windows/OpenGL/Renderer.h" // Include required renderer
//         #include "FormBorderColorProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CFormBorderColorProto::CFormBorderColorProto(): // Implement constructor of your form
//                     IFormBorderColorProto(new standard::windows::CWindow(), new standard::windows::opengl::CRenderer(false, 0))
//                 {
//                     // Insert your code here
//                 }
//
//                 void CFormBorderColorProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//             }
//         }


#pragma once

#include "Nitisa/Core/Form.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/IFormService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Components/ColorDialog/ColorDialog.h"
#include "../../Controls/Button/Button.h"

namespace nitisa
{
	class IControl;
	class IForm;
	class IRenderer;
	class IWindow;
	struct CreateParams;

	namespace standard
	{
		class IFormBorderColorProto : public CForm
		{
		protected:
			// Components
			CColorDialog *m_pColorDialog1;

			// Controls
			CButton *m_pButtonLeft;
			CButton *m_pButtonTop;
			CButton *m_pButtonRight;
			CButton *m_pButtonBottom;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormBorderColorProto_OnPaint(IForm *sender, const MessagePaint &m, bool &draw_children) = 0;
			virtual void FormBorderColorProto_OnKeyUp(IForm *sender, const MessageKey &m) = 0;
			virtual void ButtonLeft_OnClick(IControl *sender) = 0;
			virtual void ButtonTop_OnClick(IControl *sender) = 0;
			virtual void ButtonRight_OnClick(IControl *sender) = 0;
			virtual void ButtonBottom_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create components
				m_pColorDialog1 = new CColorDialog(this);
				m_pColorDialog1->setName(L"ColorDialog1");

				// Create controls
				m_pButtonLeft = new CButton(this);
				m_pButtonLeft->setName(L"ButtonLeft");
				m_pButtonTop = new CButton(this);
				m_pButtonTop->setName(L"ButtonTop");
				m_pButtonRight = new CButton(this);
				m_pButtonRight->setName(L"ButtonRight");
				m_pButtonBottom = new CButton(this);
				m_pButtonBottom->setName(L"ButtonBottom");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize components
				m_pColorDialog1->setName(L"ColorDialog1");

				// Initialize controls
				m_pButtonLeft->setName(L"ButtonLeft");
				m_pButtonLeft->getTransform()->Translate(11.0f, 36.0f, 0.0f);
				m_pButtonLeft->setSize(PointF{ 50.0f, 23.0f });
				m_pButtonLeft->setTabOrder(1);
				m_pButtonLeft->setCaption(UTF8ToString("Left"));
				m_pButtonLeft->OnClick = [](IControl *sender)->void { cast<IFormBorderColorProto*>(sender->getForm())->ButtonLeft_OnClick(sender); };

				m_pButtonTop->setName(L"ButtonTop");
				m_pButtonTop->getTransform()->Translate(108.0f, 11.0f, 0.0f);
				m_pButtonTop->setSize(PointF{ 50.0f, 23.0f });
				m_pButtonTop->setTabOrder(2);
				m_pButtonTop->setCaption(UTF8ToString("Top"));
				m_pButtonTop->OnClick = [](IControl *sender)->void { cast<IFormBorderColorProto*>(sender->getForm())->ButtonTop_OnClick(sender); };

				m_pButtonRight->setName(L"ButtonRight");
				m_pButtonRight->getTransform()->Translate(205.0f, 36.0f, 0.0f);
				m_pButtonRight->setSize(PointF{ 50.0f, 23.0f });
				m_pButtonRight->setTabOrder(3);
				m_pButtonRight->setCaption(UTF8ToString("Right"));
				m_pButtonRight->OnClick = [](IControl *sender)->void { cast<IFormBorderColorProto*>(sender->getForm())->ButtonRight_OnClick(sender); };

				m_pButtonBottom->setName(L"ButtonBottom");
				m_pButtonBottom->getTransform()->Translate(108.0f, 62.0f, 0.0f);
				m_pButtonBottom->setSize(PointF{ 50.0f, 23.0f });
				m_pButtonBottom->setTabOrder(4);
				m_pButtonBottom->setCaption(UTF8ToString("Bottom"));
				m_pButtonBottom->OnClick = [](IControl *sender)->void { cast<IFormBorderColorProto*>(sender->getForm())->ButtonBottom_OnClick(sender); };

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(63.0f, 92.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(5);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { cast<IFormBorderColorProto*>(sender->getForm())->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(135.0f, 92.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(6);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { cast<IFormBorderColorProto*>(sender->getForm())->ButtonCancel_OnClick(sender); };


			}

		public:
			IFormBorderColorProto(IWindow *window, IRenderer *renderer, const String &class_name = L"FormBorderColorProto", const CreateParams *params = nullptr) :
				CForm(class_name, nullptr, renderer, params),
				m_pColorDialog1{ nullptr },
				m_pButtonLeft{ nullptr },
				m_pButtonTop{ nullptr },
				m_pButtonRight{ nullptr },
				m_pButtonBottom{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				if (window)
				{
					CLockRepaint lock(this);
					setName(L"FormBorderColorProto");
					setCaption(UTF8ToString("Border colors"));
					setClientSize(Point{ 266, 123 });
					setState(WindowState::Hidden);
					setWindowPosition(WindowPosition::MainFormCenter);
					setHasMaximizeBox(false);
					setHasMinimizeBox(false);
					setHasSizeBox(false);
					QueryService()->setWindow(window);
					Application->QueryService()->Add(this);
					Initialize();
					Repaint(Rect{ 0, 0, 0, 0 }, true);
					OnPaint = [](IForm *sender, const MessagePaint &m, bool &draw_children)->void { cast<IFormBorderColorProto*>(sender)->FormBorderColorProto_OnPaint(sender, m, draw_children); };
					OnKeyUp = [](IForm *sender, const MessageKey &m)->void { cast<IFormBorderColorProto*>(sender)->FormBorderColorProto_OnKeyUp(sender, m); };
				}
			}
		};
	}
}
