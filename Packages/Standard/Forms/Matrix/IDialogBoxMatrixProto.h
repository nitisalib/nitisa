// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:30:37

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxMatrixProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxMatrixProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CDialogBoxMatrixProto : public IDialogBoxMatrixProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxMatrixProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxMatrixProto.cpp:
//         #include "DialogBoxMatrixProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CDialogBoxMatrixProto::CDialogBoxMatrixProto(): // Implement constructor of your widget
//                     IDialogBoxMatrixProto(L"DialogBoxMatrixProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxMatrixProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxMatrixProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/RectF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/DialogBoxEx/DialogBoxEx.h"
#include "../../Controls/DialogBoxEx/DialogBoxExService.h"
#include "../../Controls/Edit/Edit.h"
#include "../../Controls/GroupBox/GroupBox.h"
#include "../../Controls/Label/Label.h"

namespace nitisa
{
	class IControl;
	class IDialogBoxService;
	class IForm;

	namespace standard
	{
		class IDialogBoxMatrixProto : public CDialogBoxEx
		{
		public:
			class IDialogBoxMatrixProtoService: public CDialogBoxExService
			{
			private:
				IDialogBoxMatrixProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
					}
				}

				void NotifyOnDetaching() override
				{
					CDialogBoxExService::NotifyOnDetaching();
				}

				IDialogBoxMatrixProtoService(IDialogBoxMatrixProto *control) : CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Controls
			CGroupBox *m_pGroupBoxMatrix;
			CEdit *m_pEdit00;
			CEdit *m_pEdit10;
			CEdit *m_pEdit20;
			CEdit *m_pEdit30;
			CEdit *m_pEdit01;
			CEdit *m_pEdit11;
			CEdit *m_pEdit21;
			CEdit *m_pEdit31;
			CEdit *m_pEdit02;
			CEdit *m_pEdit12;
			CEdit *m_pEdit22;
			CEdit *m_pEdit32;
			CEdit *m_pEdit03;
			CEdit *m_pEdit13;
			CEdit *m_pEdit23;
			CEdit *m_pEdit33;
			CGroupBox *m_pGroupBoxTranslate;
			CEdit *m_pEditTx;
			CEdit *m_pEditTy;
			CEdit *m_pEditTz;
			CButton *m_pButtonMT;
			CButton *m_pButtonT;
			CButton *m_pButtonTM;
			CGroupBox *m_pGroupBoxScale;
			CEdit *m_pEditSx;
			CEdit *m_pEditSy;
			CEdit *m_pEditSz;
			CButton *m_pButtonMS;
			CButton *m_pButtonS;
			CButton *m_pButtonSM;
			CGroupBox *m_pGroupBoxRotate;
			CLabel *m_pLabelRx;
			CButton *m_pButtonMRx;
			CButton *m_pButtonRx;
			CButton *m_pButtonRxM;
			CEdit *m_pEditRx;
			CLabel *m_pLabelRy;
			CButton *m_pButtonMRy;
			CButton *m_pButtonRy;
			CButton *m_pButtonRyM;
			CEdit *m_pEditRy;
			CLabel *m_pLabelRz;
			CButton *m_pButtonMRz;
			CButton *m_pButtonRz;
			CButton *m_pButtonRzM;
			CEdit *m_pEditRz;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormMatrixProto_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void OnKillFocus(IControl *sender) = 0;
			virtual void ButtonMT_OnClick(IControl *sender) = 0;
			virtual void ButtonT_OnClick(IControl *sender) = 0;
			virtual void ButtonTM_OnClick(IControl *sender) = 0;
			virtual void ButtonMS_OnClick(IControl *sender) = 0;
			virtual void ButtonS_OnClick(IControl *sender) = 0;
			virtual void ButtonSM_OnClick(IControl *sender) = 0;
			virtual void ButtonMRx_OnClick(IControl *sender) = 0;
			virtual void ButtonRx_OnClick(IControl *sender) = 0;
			virtual void ButtonRxM_OnClick(IControl *sender) = 0;
			virtual void ButtonMRy_OnClick(IControl *sender) = 0;
			virtual void ButtonRy_OnClick(IControl *sender) = 0;
			virtual void ButtonRyM_OnClick(IControl *sender) = 0;
			virtual void ButtonMRz_OnClick(IControl *sender) = 0;
			virtual void ButtonRz_OnClick(IControl *sender) = 0;
			virtual void ButtonRzM_OnClick(IControl *sender) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pGroupBoxMatrix = new CGroupBox(this);
				m_pGroupBoxMatrix->setName(L"GroupBoxMatrix");
				m_pEdit00 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit00->setName(L"Edit00");
				m_pEdit10 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit10->setName(L"Edit10");
				m_pEdit20 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit20->setName(L"Edit20");
				m_pEdit30 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit30->setName(L"Edit30");
				m_pEdit01 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit01->setName(L"Edit01");
				m_pEdit11 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit11->setName(L"Edit11");
				m_pEdit21 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit21->setName(L"Edit21");
				m_pEdit31 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit31->setName(L"Edit31");
				m_pEdit02 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit02->setName(L"Edit02");
				m_pEdit12 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit12->setName(L"Edit12");
				m_pEdit22 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit22->setName(L"Edit22");
				m_pEdit32 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit32->setName(L"Edit32");
				m_pEdit03 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit03->setName(L"Edit03");
				m_pEdit13 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit13->setName(L"Edit13");
				m_pEdit23 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit23->setName(L"Edit23");
				m_pEdit33 = new CEdit(m_pGroupBoxMatrix);
				m_pEdit33->setName(L"Edit33");
				m_pGroupBoxTranslate = new CGroupBox(this);
				m_pGroupBoxTranslate->setName(L"GroupBoxTranslate");
				m_pEditTx = new CEdit(m_pGroupBoxTranslate);
				m_pEditTx->setName(L"EditTx");
				m_pEditTy = new CEdit(m_pGroupBoxTranslate);
				m_pEditTy->setName(L"EditTy");
				m_pEditTz = new CEdit(m_pGroupBoxTranslate);
				m_pEditTz->setName(L"EditTz");
				m_pButtonMT = new CButton(m_pGroupBoxTranslate);
				m_pButtonMT->setName(L"ButtonMT");
				m_pButtonT = new CButton(m_pGroupBoxTranslate);
				m_pButtonT->setName(L"ButtonT");
				m_pButtonTM = new CButton(m_pGroupBoxTranslate);
				m_pButtonTM->setName(L"ButtonTM");
				m_pGroupBoxScale = new CGroupBox(this);
				m_pGroupBoxScale->setName(L"GroupBoxScale");
				m_pEditSx = new CEdit(m_pGroupBoxScale);
				m_pEditSx->setName(L"EditSx");
				m_pEditSy = new CEdit(m_pGroupBoxScale);
				m_pEditSy->setName(L"EditSy");
				m_pEditSz = new CEdit(m_pGroupBoxScale);
				m_pEditSz->setName(L"EditSz");
				m_pButtonMS = new CButton(m_pGroupBoxScale);
				m_pButtonMS->setName(L"ButtonMS");
				m_pButtonS = new CButton(m_pGroupBoxScale);
				m_pButtonS->setName(L"ButtonS");
				m_pButtonSM = new CButton(m_pGroupBoxScale);
				m_pButtonSM->setName(L"ButtonSM");
				m_pGroupBoxRotate = new CGroupBox(this);
				m_pGroupBoxRotate->setName(L"GroupBoxRotate");
				m_pLabelRx = new CLabel(m_pGroupBoxRotate);
				m_pLabelRx->setName(L"LabelRx");
				m_pButtonMRx = new CButton(m_pGroupBoxRotate);
				m_pButtonMRx->setName(L"ButtonMRx");
				m_pButtonRx = new CButton(m_pGroupBoxRotate);
				m_pButtonRx->setName(L"ButtonRx");
				m_pButtonRxM = new CButton(m_pGroupBoxRotate);
				m_pButtonRxM->setName(L"ButtonRxM");
				m_pEditRx = new CEdit(m_pGroupBoxRotate);
				m_pEditRx->setName(L"EditRx");
				m_pLabelRy = new CLabel(m_pGroupBoxRotate);
				m_pLabelRy->setName(L"LabelRy");
				m_pButtonMRy = new CButton(m_pGroupBoxRotate);
				m_pButtonMRy->setName(L"ButtonMRy");
				m_pButtonRy = new CButton(m_pGroupBoxRotate);
				m_pButtonRy->setName(L"ButtonRy");
				m_pButtonRyM = new CButton(m_pGroupBoxRotate);
				m_pButtonRyM->setName(L"ButtonRyM");
				m_pEditRy = new CEdit(m_pGroupBoxRotate);
				m_pEditRy->setName(L"EditRy");
				m_pLabelRz = new CLabel(m_pGroupBoxRotate);
				m_pLabelRz->setName(L"LabelRz");
				m_pButtonMRz = new CButton(m_pGroupBoxRotate);
				m_pButtonMRz->setName(L"ButtonMRz");
				m_pButtonRz = new CButton(m_pGroupBoxRotate);
				m_pButtonRz->setName(L"ButtonRz");
				m_pButtonRzM = new CButton(m_pGroupBoxRotate);
				m_pButtonRzM->setName(L"ButtonRzM");
				m_pEditRz = new CEdit(m_pGroupBoxRotate);
				m_pEditRz->setName(L"EditRz");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pGroupBoxMatrix->setName(L"GroupBoxMatrix");
				m_pGroupBoxMatrix->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pGroupBoxMatrix->setSize(PointF{ 430.0f, 122.0f });
				m_pGroupBoxMatrix->setCaption(UTF8ToString("Matrix"));
				m_pGroupBoxMatrix->setUseMask(false);

				m_pEdit00->setName(L"Edit00");
				m_pEdit00->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pEdit00->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit00->setTabOrder(2);
				m_pEdit00->setText(UTF8ToString("1"));
				m_pEdit00->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit10->setName(L"Edit10");
				m_pEdit10->getTransform()->Translate(112.0f, 22.0f, 0.0f);
				m_pEdit10->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit10->setTabOrder(3);
				m_pEdit10->setText(UTF8ToString("0"));
				m_pEdit10->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit20->setName(L"Edit20");
				m_pEdit20->getTransform()->Translate(216.0f, 22.0f, 0.0f);
				m_pEdit20->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit20->setTabOrder(4);
				m_pEdit20->setText(UTF8ToString("0"));
				m_pEdit20->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit30->setName(L"Edit30");
				m_pEdit30->getTransform()->Translate(320.0f, 22.0f, 0.0f);
				m_pEdit30->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit30->setTabOrder(5);
				m_pEdit30->setText(UTF8ToString("0"));
				m_pEdit30->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit01->setName(L"Edit01");
				m_pEdit01->getTransform()->Translate(8.0f, 46.0f, 0.0f);
				m_pEdit01->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit01->setTabOrder(6);
				m_pEdit01->setText(UTF8ToString("0"));
				m_pEdit01->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit11->setName(L"Edit11");
				m_pEdit11->getTransform()->Translate(112.0f, 46.0f, 0.0f);
				m_pEdit11->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit11->setTabOrder(7);
				m_pEdit11->setText(UTF8ToString("1"));
				m_pEdit11->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit21->setName(L"Edit21");
				m_pEdit21->getTransform()->Translate(216.0f, 46.0f, 0.0f);
				m_pEdit21->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit21->setTabOrder(8);
				m_pEdit21->setText(UTF8ToString("0"));
				m_pEdit21->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit31->setName(L"Edit31");
				m_pEdit31->getTransform()->Translate(320.0f, 46.0f, 0.0f);
				m_pEdit31->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit31->setTabOrder(9);
				m_pEdit31->setText(UTF8ToString("0"));
				m_pEdit31->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit02->setName(L"Edit02");
				m_pEdit02->getTransform()->Translate(8.0f, 70.0f, 0.0f);
				m_pEdit02->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit02->setTabOrder(10);
				m_pEdit02->setText(UTF8ToString("0"));
				m_pEdit02->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit12->setName(L"Edit12");
				m_pEdit12->getTransform()->Translate(112.0f, 70.0f, 0.0f);
				m_pEdit12->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit12->setTabOrder(11);
				m_pEdit12->setText(UTF8ToString("0"));
				m_pEdit12->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit22->setName(L"Edit22");
				m_pEdit22->getTransform()->Translate(216.0f, 70.0f, 0.0f);
				m_pEdit22->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit22->setTabOrder(12);
				m_pEdit22->setText(UTF8ToString("1"));
				m_pEdit22->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit32->setName(L"Edit32");
				m_pEdit32->getTransform()->Translate(320.0f, 70.0f, 0.0f);
				m_pEdit32->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit32->setTabOrder(13);
				m_pEdit32->setText(UTF8ToString("0"));
				m_pEdit32->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit03->setName(L"Edit03");
				m_pEdit03->getTransform()->Translate(8.0f, 94.0f, 0.0f);
				m_pEdit03->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit03->setTabOrder(14);
				m_pEdit03->setText(UTF8ToString("0"));
				m_pEdit03->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit13->setName(L"Edit13");
				m_pEdit13->getTransform()->Translate(112.0f, 94.0f, 0.0f);
				m_pEdit13->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit13->setTabOrder(15);
				m_pEdit13->setText(UTF8ToString("0"));
				m_pEdit13->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit23->setName(L"Edit23");
				m_pEdit23->getTransform()->Translate(216.0f, 94.0f, 0.0f);
				m_pEdit23->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit23->setTabOrder(16);
				m_pEdit23->setText(UTF8ToString("0"));
				m_pEdit23->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pEdit33->setName(L"Edit33");
				m_pEdit33->getTransform()->Translate(320.0f, 94.0f, 0.0f);
				m_pEdit33->setSize(PointF{ 100.0f, 21.0f });
				m_pEdit33->setTabOrder(17);
				m_pEdit33->setText(UTF8ToString("1"));
				m_pEdit33->OnKillFocus = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->OnKillFocus(sender); };

				m_pGroupBoxTranslate->setName(L"GroupBoxTranslate");
				m_pGroupBoxTranslate->getTransform()->Translate(8.0f, 134.0f, 0.0f);
				m_pGroupBoxTranslate->setSize(PointF{ 430.0f, 50.0f });
				m_pGroupBoxTranslate->setCaption(UTF8ToString("Translate"));
				m_pGroupBoxTranslate->setUseMask(false);

				m_pEditTx->setName(L"EditTx");
				m_pEditTx->getTransform()->Translate(112.0f, 22.0f, 0.0f);
				m_pEditTx->setSize(PointF{ 100.0f, 21.0f });
				m_pEditTx->setTabOrder(19);
				m_pEditTx->setText(UTF8ToString("0"));

				m_pEditTy->setName(L"EditTy");
				m_pEditTy->getTransform()->Translate(216.0f, 22.0f, 0.0f);
				m_pEditTy->setSize(PointF{ 100.0f, 21.0f });
				m_pEditTy->setTabOrder(20);
				m_pEditTy->setText(UTF8ToString("0"));

				m_pEditTz->setName(L"EditTz");
				m_pEditTz->getTransform()->Translate(320.0f, 22.0f, 0.0f);
				m_pEditTz->setSize(PointF{ 100.0f, 21.0f });
				m_pEditTz->setTabOrder(21);
				m_pEditTz->setText(UTF8ToString("0"));

				m_pButtonMT->setName(L"ButtonMT");
				m_pButtonMT->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pButtonMT->setSize(PointF{ 31.0f, 20.0f });
				m_pButtonMT->setTabOrder(22);
				m_pButtonMT->setCaption(UTF8ToString("M * T"));
				m_pButtonMT->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMT->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMT->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMT->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMT->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMT->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMT->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMT->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonMT_OnClick(sender); };

				m_pButtonT->setName(L"ButtonT");
				m_pButtonT->getTransform()->Translate(43.0f, 22.0f, 0.0f);
				m_pButtonT->setSize(PointF{ 30.0f, 20.0f });
				m_pButtonT->setTabOrder(23);
				m_pButtonT->setCaption(UTF8ToString("T"));
				m_pButtonT->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonT->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonT->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonT->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonT->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonT->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonT->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonT->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonT_OnClick(sender); };

				m_pButtonTM->setName(L"ButtonTM");
				m_pButtonTM->getTransform()->Translate(77.0f, 22.0f, 0.0f);
				m_pButtonTM->setSize(PointF{ 31.0f, 20.0f });
				m_pButtonTM->setTabOrder(24);
				m_pButtonTM->setCaption(UTF8ToString("T * M"));
				m_pButtonTM->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonTM->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonTM->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonTM->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonTM->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonTM->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonTM->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonTM->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonTM_OnClick(sender); };

				m_pGroupBoxScale->setName(L"GroupBoxScale");
				m_pGroupBoxScale->getTransform()->Translate(8.0f, 188.0f, 0.0f);
				m_pGroupBoxScale->setSize(PointF{ 430.0f, 50.0f });
				m_pGroupBoxScale->setCaption(UTF8ToString("Scale"));
				m_pGroupBoxScale->setUseMask(false);

				m_pEditSx->setName(L"EditSx");
				m_pEditSx->getTransform()->Translate(112.0f, 22.0f, 0.0f);
				m_pEditSx->setSize(PointF{ 100.0f, 21.0f });
				m_pEditSx->setTabOrder(26);
				m_pEditSx->setText(UTF8ToString("1"));

				m_pEditSy->setName(L"EditSy");
				m_pEditSy->getTransform()->Translate(216.0f, 22.0f, 0.0f);
				m_pEditSy->setSize(PointF{ 100.0f, 21.0f });
				m_pEditSy->setTabOrder(27);
				m_pEditSy->setText(UTF8ToString("1"));

				m_pEditSz->setName(L"EditSz");
				m_pEditSz->getTransform()->Translate(320.0f, 22.0f, 0.0f);
				m_pEditSz->setSize(PointF{ 100.0f, 21.0f });
				m_pEditSz->setTabOrder(28);
				m_pEditSz->setText(UTF8ToString("1"));

				m_pButtonMS->setName(L"ButtonMS");
				m_pButtonMS->getTransform()->Translate(8.0f, 22.0f, 0.0f);
				m_pButtonMS->setSize(PointF{ 31.0f, 20.0f });
				m_pButtonMS->setTabOrder(29);
				m_pButtonMS->setCaption(UTF8ToString("M * S"));
				m_pButtonMS->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMS->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMS->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMS->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMS->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMS->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMS->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMS->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonMS_OnClick(sender); };

				m_pButtonS->setName(L"ButtonS");
				m_pButtonS->getTransform()->Translate(43.0f, 22.0f, 0.0f);
				m_pButtonS->setSize(PointF{ 30.0f, 20.0f });
				m_pButtonS->setTabOrder(30);
				m_pButtonS->setCaption(UTF8ToString("S"));
				m_pButtonS->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonS->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonS->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonS->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonS->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonS->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonS->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonS->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonS_OnClick(sender); };

				m_pButtonSM->setName(L"ButtonSM");
				m_pButtonSM->getTransform()->Translate(77.0f, 22.0f, 0.0f);
				m_pButtonSM->setSize(PointF{ 31.0f, 20.0f });
				m_pButtonSM->setTabOrder(31);
				m_pButtonSM->setCaption(UTF8ToString("S * M"));
				m_pButtonSM->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonSM->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonSM->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonSM->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonSM->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonSM->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonSM->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonSM->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonSM_OnClick(sender); };

				m_pGroupBoxRotate->setName(L"GroupBoxRotate");
				m_pGroupBoxRotate->getTransform()->Translate(8.0f, 242.0f, 0.0f);
				m_pGroupBoxRotate->setSize(PointF{ 430.0f, 98.0f });
				m_pGroupBoxRotate->setCaption(UTF8ToString("Rotate(degrees)"));
				m_pGroupBoxRotate->setUseMask(false);

				m_pLabelRx->setName(L"LabelRx");
				m_pLabelRx->getTransform()->Translate(8.0f, 26.0f, 0.0f);
				m_pLabelRx->setCaption(UTF8ToString("Around X-axis:"));

				m_pButtonMRx->setName(L"ButtonMRx");
				m_pButtonMRx->getTransform()->Translate(216.0f, 22.0f, 0.0f);
				m_pButtonMRx->setSize(PointF{ 31.0f, 20.0f });
				m_pButtonMRx->setTabOrder(34);
				m_pButtonMRx->setCaption(UTF8ToString("M * R"));
				m_pButtonMRx->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRx->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRx->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRx->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRx->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRx->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRx->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRx->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonMRx_OnClick(sender); };

				m_pButtonRx->setName(L"ButtonRx");
				m_pButtonRx->getTransform()->Translate(251.0f, 22.0f, 0.0f);
				m_pButtonRx->setSize(PointF{ 30.0f, 20.0f });
				m_pButtonRx->setTabOrder(35);
				m_pButtonRx->setCaption(UTF8ToString("R"));
				m_pButtonRx->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRx->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRx->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRx->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRx->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRx->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRx->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRx->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonRx_OnClick(sender); };

				m_pButtonRxM->setName(L"ButtonRxM");
				m_pButtonRxM->getTransform()->Translate(285.0f, 22.0f, 0.0f);
				m_pButtonRxM->setSize(PointF{ 31.0f, 20.0f });
				m_pButtonRxM->setTabOrder(36);
				m_pButtonRxM->setCaption(UTF8ToString("R * M"));
				m_pButtonRxM->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRxM->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRxM->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRxM->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRxM->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRxM->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRxM->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRxM->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonRxM_OnClick(sender); };

				m_pEditRx->setName(L"EditRx");
				m_pEditRx->getTransform()->Translate(320.0f, 22.0f, 0.0f);
				m_pEditRx->setSize(PointF{ 100.0f, 21.0f });
				m_pEditRx->setTabOrder(37);
				m_pEditRx->setText(UTF8ToString("0"));

				m_pLabelRy->setName(L"LabelRy");
				m_pLabelRy->getTransform()->Translate(8.0f, 50.0f, 0.0f);
				m_pLabelRy->setCaption(UTF8ToString("Around Y-axis:"));

				m_pButtonMRy->setName(L"ButtonMRy");
				m_pButtonMRy->getTransform()->Translate(216.0f, 46.0f, 0.0f);
				m_pButtonMRy->setSize(PointF{ 31.0f, 20.0f });
				m_pButtonMRy->setTabOrder(39);
				m_pButtonMRy->setCaption(UTF8ToString("M * R"));
				m_pButtonMRy->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRy->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRy->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRy->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRy->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRy->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRy->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRy->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonMRy_OnClick(sender); };

				m_pButtonRy->setName(L"ButtonRy");
				m_pButtonRy->getTransform()->Translate(251.0f, 46.0f, 0.0f);
				m_pButtonRy->setSize(PointF{ 30.0f, 20.0f });
				m_pButtonRy->setTabOrder(40);
				m_pButtonRy->setCaption(UTF8ToString("R"));
				m_pButtonRy->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRy->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRy->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRy->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRy->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRy->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRy->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRy->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonRy_OnClick(sender); };

				m_pButtonRyM->setName(L"ButtonRyM");
				m_pButtonRyM->getTransform()->Translate(285.0f, 46.0f, 0.0f);
				m_pButtonRyM->setSize(PointF{ 31.0f, 20.0f });
				m_pButtonRyM->setTabOrder(41);
				m_pButtonRyM->setCaption(UTF8ToString("R * M"));
				m_pButtonRyM->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRyM->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRyM->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRyM->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRyM->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRyM->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRyM->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRyM->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonRyM_OnClick(sender); };

				m_pEditRy->setName(L"EditRy");
				m_pEditRy->getTransform()->Translate(320.0f, 46.0f, 0.0f);
				m_pEditRy->setSize(PointF{ 100.0f, 21.0f });
				m_pEditRy->setTabOrder(42);
				m_pEditRy->setText(UTF8ToString("0"));

				m_pLabelRz->setName(L"LabelRz");
				m_pLabelRz->getTransform()->Translate(8.0f, 74.0f, 0.0f);
				m_pLabelRz->setCaption(UTF8ToString("Around Z-axis:"));

				m_pButtonMRz->setName(L"ButtonMRz");
				m_pButtonMRz->getTransform()->Translate(216.0f, 70.0f, 0.0f);
				m_pButtonMRz->setSize(PointF{ 31.0f, 20.0f });
				m_pButtonMRz->setTabOrder(44);
				m_pButtonMRz->setCaption(UTF8ToString("M * R"));
				m_pButtonMRz->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRz->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRz->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRz->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRz->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRz->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRz->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonMRz->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonMRz_OnClick(sender); };

				m_pButtonRz->setName(L"ButtonRz");
				m_pButtonRz->getTransform()->Translate(251.0f, 70.0f, 0.0f);
				m_pButtonRz->setSize(PointF{ 30.0f, 20.0f });
				m_pButtonRz->setTabOrder(45);
				m_pButtonRz->setCaption(UTF8ToString("R"));
				m_pButtonRz->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRz->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRz->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRz->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRz->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRz->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRz->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRz->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonRz_OnClick(sender); };

				m_pButtonRzM->setName(L"ButtonRzM");
				m_pButtonRzM->getTransform()->Translate(285.0f, 70.0f, 0.0f);
				m_pButtonRzM->setSize(PointF{ 30.0f, 20.0f });
				m_pButtonRzM->setTabOrder(46);
				m_pButtonRzM->setCaption(UTF8ToString("R * M"));
				m_pButtonRzM->setBorderRadius(CButton::State::Normal, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRzM->setBorderRadius(CButton::State::Hovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRzM->setBorderRadius(CButton::State::Focused, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRzM->setBorderRadius(CButton::State::FocusedHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRzM->setBorderRadius(CButton::State::Active, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRzM->setBorderRadius(CButton::State::ActiveHovered, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRzM->setBorderRadius(CButton::State::Disabled, RectF{ 0.0f, 0.0f, 0.0f, 0.0f });
				m_pButtonRzM->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonRzM_OnClick(sender); };

				m_pEditRz->setName(L"EditRz");
				m_pEditRz->getTransform()->Translate(320.0f, 70.0f, 0.0f);
				m_pEditRz->setSize(PointF{ 100.0f, 21.0f });
				m_pEditRz->setTabOrder(47);
				m_pEditRz->setText(UTF8ToString("0"));

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(152.0f, 344.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(48);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(224.0f, 344.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(49);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxMatrixProto*, false>(sender)->ButtonCancel_OnClick(sender); };


			}

		public:
			IDialogBoxMatrixProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxMatrixProtoService(this)),
				m_pGroupBoxMatrix{ nullptr },
				m_pEdit00{ nullptr },
				m_pEdit10{ nullptr },
				m_pEdit20{ nullptr },
				m_pEdit30{ nullptr },
				m_pEdit01{ nullptr },
				m_pEdit11{ nullptr },
				m_pEdit21{ nullptr },
				m_pEdit31{ nullptr },
				m_pEdit02{ nullptr },
				m_pEdit12{ nullptr },
				m_pEdit22{ nullptr },
				m_pEdit32{ nullptr },
				m_pEdit03{ nullptr },
				m_pEdit13{ nullptr },
				m_pEdit23{ nullptr },
				m_pEdit33{ nullptr },
				m_pGroupBoxTranslate{ nullptr },
				m_pEditTx{ nullptr },
				m_pEditTy{ nullptr },
				m_pEditTz{ nullptr },
				m_pButtonMT{ nullptr },
				m_pButtonT{ nullptr },
				m_pButtonTM{ nullptr },
				m_pGroupBoxScale{ nullptr },
				m_pEditSx{ nullptr },
				m_pEditSy{ nullptr },
				m_pEditSz{ nullptr },
				m_pButtonMS{ nullptr },
				m_pButtonS{ nullptr },
				m_pButtonSM{ nullptr },
				m_pGroupBoxRotate{ nullptr },
				m_pLabelRx{ nullptr },
				m_pButtonMRx{ nullptr },
				m_pButtonRx{ nullptr },
				m_pButtonRxM{ nullptr },
				m_pEditRx{ nullptr },
				m_pLabelRy{ nullptr },
				m_pButtonMRy{ nullptr },
				m_pButtonRy{ nullptr },
				m_pButtonRyM{ nullptr },
				m_pEditRy{ nullptr },
				m_pLabelRz{ nullptr },
				m_pButtonMRz{ nullptr },
				m_pButtonRz{ nullptr },
				m_pButtonRzM{ nullptr },
				m_pEditRz{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxMatrixProto");
				setCaption(UTF8ToString("Matrix"));
				setClientSize(Point{ 446, 375 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
				OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxMatrixProto*>(sender)->FormMatrixProto_OnKeyUp(sender, m, processed); };
			}

			IComponent *getComponent(const String &name)
			{
				return nullptr;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"GroupBoxMatrix" && m_pGroupBoxMatrix != exclude)
					return m_pGroupBoxMatrix;
				if (name == L"Edit00" && m_pEdit00 != exclude)
					return m_pEdit00;
				if (name == L"Edit10" && m_pEdit10 != exclude)
					return m_pEdit10;
				if (name == L"Edit20" && m_pEdit20 != exclude)
					return m_pEdit20;
				if (name == L"Edit30" && m_pEdit30 != exclude)
					return m_pEdit30;
				if (name == L"Edit01" && m_pEdit01 != exclude)
					return m_pEdit01;
				if (name == L"Edit11" && m_pEdit11 != exclude)
					return m_pEdit11;
				if (name == L"Edit21" && m_pEdit21 != exclude)
					return m_pEdit21;
				if (name == L"Edit31" && m_pEdit31 != exclude)
					return m_pEdit31;
				if (name == L"Edit02" && m_pEdit02 != exclude)
					return m_pEdit02;
				if (name == L"Edit12" && m_pEdit12 != exclude)
					return m_pEdit12;
				if (name == L"Edit22" && m_pEdit22 != exclude)
					return m_pEdit22;
				if (name == L"Edit32" && m_pEdit32 != exclude)
					return m_pEdit32;
				if (name == L"Edit03" && m_pEdit03 != exclude)
					return m_pEdit03;
				if (name == L"Edit13" && m_pEdit13 != exclude)
					return m_pEdit13;
				if (name == L"Edit23" && m_pEdit23 != exclude)
					return m_pEdit23;
				if (name == L"Edit33" && m_pEdit33 != exclude)
					return m_pEdit33;
				if (name == L"GroupBoxTranslate" && m_pGroupBoxTranslate != exclude)
					return m_pGroupBoxTranslate;
				if (name == L"EditTx" && m_pEditTx != exclude)
					return m_pEditTx;
				if (name == L"EditTy" && m_pEditTy != exclude)
					return m_pEditTy;
				if (name == L"EditTz" && m_pEditTz != exclude)
					return m_pEditTz;
				if (name == L"ButtonMT" && m_pButtonMT != exclude)
					return m_pButtonMT;
				if (name == L"ButtonT" && m_pButtonT != exclude)
					return m_pButtonT;
				if (name == L"ButtonTM" && m_pButtonTM != exclude)
					return m_pButtonTM;
				if (name == L"GroupBoxScale" && m_pGroupBoxScale != exclude)
					return m_pGroupBoxScale;
				if (name == L"EditSx" && m_pEditSx != exclude)
					return m_pEditSx;
				if (name == L"EditSy" && m_pEditSy != exclude)
					return m_pEditSy;
				if (name == L"EditSz" && m_pEditSz != exclude)
					return m_pEditSz;
				if (name == L"ButtonMS" && m_pButtonMS != exclude)
					return m_pButtonMS;
				if (name == L"ButtonS" && m_pButtonS != exclude)
					return m_pButtonS;
				if (name == L"ButtonSM" && m_pButtonSM != exclude)
					return m_pButtonSM;
				if (name == L"GroupBoxRotate" && m_pGroupBoxRotate != exclude)
					return m_pGroupBoxRotate;
				if (name == L"LabelRx" && m_pLabelRx != exclude)
					return m_pLabelRx;
				if (name == L"ButtonMRx" && m_pButtonMRx != exclude)
					return m_pButtonMRx;
				if (name == L"ButtonRx" && m_pButtonRx != exclude)
					return m_pButtonRx;
				if (name == L"ButtonRxM" && m_pButtonRxM != exclude)
					return m_pButtonRxM;
				if (name == L"EditRx" && m_pEditRx != exclude)
					return m_pEditRx;
				if (name == L"LabelRy" && m_pLabelRy != exclude)
					return m_pLabelRy;
				if (name == L"ButtonMRy" && m_pButtonMRy != exclude)
					return m_pButtonMRy;
				if (name == L"ButtonRy" && m_pButtonRy != exclude)
					return m_pButtonRy;
				if (name == L"ButtonRyM" && m_pButtonRyM != exclude)
					return m_pButtonRyM;
				if (name == L"EditRy" && m_pEditRy != exclude)
					return m_pEditRy;
				if (name == L"LabelRz" && m_pLabelRz != exclude)
					return m_pLabelRz;
				if (name == L"ButtonMRz" && m_pButtonMRz != exclude)
					return m_pButtonMRz;
				if (name == L"ButtonRz" && m_pButtonRz != exclude)
					return m_pButtonRz;
				if (name == L"ButtonRzM" && m_pButtonRzM != exclude)
					return m_pButtonRzM;
				if (name == L"EditRz" && m_pEditRz != exclude)
					return m_pEditRz;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				return nullptr;
			}

		};
	}
}

