// This file was generated by Form Builder from Nitisa C++ GUI framework
// Framework site: http://nitisa.com
// Framework download: http://nitisa.com/downloads
// Framework documentation: http://nitisa.com/documentation
// Framework license: http://nitisa.com/site/license
// Form Builder version: 13.0.0
// Form Builder documentation: http://nitisa.com/guide/form-builder
// Generated: 2022-04-17 13:31:12

// !!! ATTENTION !!!
// This is an auto-generated file with dialog box widget prototype declaration and initialization.
// Include it into your dialog box widget class header file and derive your widget from the class implemented here.
// Add constructor and implement event processing methods(if exist) from "protected" section.
// Also add service(if your widget need one) derived from service prototype below(do not forget to call parent class methods wher overwriting methods).
// For example:
//     DialogBoxPointBProto.h:
//         #include "Nitisa/Core/Consts.h" // DesignDPI constant is declared here
//         #include "Nitisa/Image/Color.h" // Color declaration is here
//         #include "IDialogBoxPointBProto.h" // Include this file
//
//         namespace nitisa
//         {
//             class IControl;
//
//             namespace standard
//             {
//                 class CDialogBoxPointBProto : public IDialogBoxPointBProto // Derive your widget from class from this file
//                 {
//                 private: // Private members for handling widget logic
//                     Color m_sBackgroundColor; // Store background color
//                 protected: // Declare overridden methods handling events if there ones in this class
//                     void ButtonAdd_OnClick(IControl *sender) override;
//                 public:
//                     // IDialogBox's abstract methods re-declaration
//                     Color getBackgroundColor() override;
//                     // Add other abstract methods needed to be implemented
//
//                     CDialogBoxPointBProto(); // Declare constructor
//                 };
//             }
//         }
//
//     DialogBoxPointBProto.cpp:
//         #include "DialogBoxPointBProto.h" // Include header class of your form
//
//         namespace nitisa
//         {
//             namespace standard
//             {
//                 CDialogBoxPointBProto::CDialogBoxPointBProto(): // Implement constructor of your widget
//                     IDialogBoxPointBProto(L"DialogBoxPointBProto", true, true, false, false, DesignDPI) // Here you may add your service implementation as the latest parameter
//                 {
//                     // Insert your code here
//                 }
//
//                 void CDialogBoxPointBProto::ButtonAdd_OnClick(IControl *sender) // Implement event processing methods
//                 {
//                     // Insert your code here
//                 }
//
//                 Color CDialogBoxPointBProto::getBackgroundColor() // Implement IDialogBox's getBackgroundColor() methods
//                 {
//                     return m_sBackgroundColor;
//                 }
//                 // Implement other IDialogBox's abstract methods
//             }
//         }

#pragma once

#include "Nitisa/Core/Consts.h"
#include "Nitisa/Core/LockRepaint.h"
#include "Nitisa/Core/Messages.h"
#include "Nitisa/Core/RotateOrder.h"
#include "Nitisa/Core/Strings.h"
#include "Nitisa/Core/TransformOrder.h"
#include "Nitisa/Core/Utils.h"
#include "Nitisa/Core/WindowPosition.h"
#include "Nitisa/Core/WindowState.h"
#include "Nitisa/Interfaces/IApplication.h"
#include "Nitisa/Interfaces/IApplicationService.h"
#include "Nitisa/Interfaces/ITransform.h"
#include "Nitisa/Math/Point.h"
#include "Nitisa/Math/PointF.h"
#include "Nitisa/Math/Transform.h"
#include "../../Controls/Button/Button.h"
#include "../../Controls/CheckBox/CheckBox.h"
#include "../../Controls/DialogBoxEx/DialogBoxEx.h"
#include "../../Controls/DialogBoxEx/DialogBoxExService.h"

namespace nitisa
{
	class IControl;
	class IDialogBoxService;
	class IForm;

	namespace standard
	{
		class IDialogBoxPointBProto : public CDialogBoxEx
		{
		public:
			class IDialogBoxPointBProtoService: public CDialogBoxExService
			{
			private:
				IDialogBoxPointBProto *m_pControl;
			public:
				void NotifyOnAttach() override
				{
					CDialogBoxExService::NotifyOnAttach();
					if (m_pControl->getForm())
					{
					}
				}

				void NotifyOnDetaching() override
				{
					CDialogBoxExService::NotifyOnDetaching();
				}

				IDialogBoxPointBProtoService(IDialogBoxPointBProto *control) : CDialogBoxExService(control),
					m_pControl{ control }
				{

				}
			};
		protected:
			// Controls
			CCheckBox *m_pCheckBoxX;
			CCheckBox *m_pCheckBoxY;
			CButton *m_pButtonOk;
			CButton *m_pButtonCancel;

		protected:
			// Events(Should be implemented in derived widget)
			virtual void FormPointBProto_OnKeyUp(IControl *sender, const MessageKey &m, bool &processed) = 0;
			virtual void ButtonOk_OnClick(IControl *sender) = 0;
			virtual void ButtonCancel_OnClick(IControl *sender) = 0;

		private:
			void Initialize()
			{
				// Create controls
				m_pCheckBoxX = new CCheckBox(this);
				m_pCheckBoxX->setName(L"CheckBoxX");
				m_pCheckBoxY = new CCheckBox(this);
				m_pCheckBoxY->setName(L"CheckBoxY");
				m_pButtonOk = new CButton(this);
				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonCancel = new CButton(this);
				m_pButtonCancel->setName(L"ButtonCancel");

				// Initialize controls
				m_pCheckBoxX->setName(L"CheckBoxX");
				m_pCheckBoxX->getTransform()->Translate(8.0f, 8.0f, 0.0f);
				m_pCheckBoxX->setTabOrder(1);
				m_pCheckBoxX->setCaption(UTF8ToString("X"));

				m_pCheckBoxY->setName(L"CheckBoxY");
				m_pCheckBoxY->getTransform()->Translate(82.0f, 8.0f, 0.0f);
				m_pCheckBoxY->setTabOrder(2);
				m_pCheckBoxY->setCaption(UTF8ToString("Y"));

				m_pButtonOk->setName(L"ButtonOk");
				m_pButtonOk->getTransform()->Translate(8.0f, 26.0f, 0.0f);
				m_pButtonOk->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonOk->setTabOrder(3);
				m_pButtonOk->setCaption(UTF8ToString("OK"));
				m_pButtonOk->OnClick = [](IControl *sender)->void { parent<IDialogBoxPointBProto*, false>(sender)->ButtonOk_OnClick(sender); };

				m_pButtonCancel->setName(L"ButtonCancel");
				m_pButtonCancel->getTransform()->Translate(82.0f, 26.0f, 0.0f);
				m_pButtonCancel->setSize(PointF{ 68.0f, 23.0f });
				m_pButtonCancel->setTabOrder(4);
				m_pButtonCancel->setCaption(UTF8ToString("Cancel"));
				m_pButtonCancel->OnClick = [](IControl *sender)->void { parent<IDialogBoxPointBProto*, false>(sender)->ButtonCancel_OnClick(sender); };


			}

		public:
			IDialogBoxPointBProto(const String &class_name, const bool accept_form, const bool accept_control, const bool accept_focus, const bool tab_stop, const Point &design_dpi = DesignDPI, IDialogBoxService *service = nullptr) :
				CDialogBoxEx(class_name, accept_form, accept_control, accept_focus, tab_stop, design_dpi, service ? service : new IDialogBoxPointBProtoService(this)),
				m_pCheckBoxX{ nullptr },
				m_pCheckBoxY{ nullptr },
				m_pButtonOk{ nullptr },
				m_pButtonCancel{ nullptr }
			{
				CLockRepaint lock(this);
				setName(L"DialogBoxPointBProto");
				setCaption(UTF8ToString("Point(bool)"));
				setClientSize(Point{ 158, 57 });
				setWindowPosition(WindowPosition::MainFormCenter);
				setState(WindowState::Hidden);
				setHasMaximizeBox(false);
				setHasMinimizeBox(false);
				setHasSizeBox(false);
				Initialize();
				OnKeyUp = [](IControl *sender, const MessageKey &m, bool &processed)->void { cast<IDialogBoxPointBProto*>(sender)->FormPointBProto_OnKeyUp(sender, m, processed); };
			}

			IComponent *getComponent(const String &name)
			{
				return nullptr;
			}

			IControl *FindControl(const String &name, IControl *exclude = nullptr) override
			{
				if (name == L"CheckBoxX" && m_pCheckBoxX != exclude)
					return m_pCheckBoxX;
				if (name == L"CheckBoxY" && m_pCheckBoxY != exclude)
					return m_pCheckBoxY;
				if (name == L"ButtonOk" && m_pButtonOk != exclude)
					return m_pButtonOk;
				if (name == L"ButtonCancel" && m_pButtonCancel != exclude)
					return m_pButtonCancel;
				return nullptr;
			}

		};
	}
}

